CREATE OR REPLACE PACKAGE oasis_health_check_main
  AUTHID CURRENT_USER -- [ DO NOT EDIT! Invoker Rights Clause ]
  IS
 /****************************************************************************
  *
  * ---------------------------------------------------------------------------
  * $Revision 1.0  03/20/2018   $$Author Athi $
  *****************************************************************************
  *  Copyright(C) 2018 - Delphi Technology Inc.
  *
  *   File Name : oasis_health_check_main.pkg
  * Object Name : oasis_health_check_main
  * Description : health check and validation infra structure
  *----------------------------------------------------------------------------
  * Revisions:
  *   Date    By     Purpose
  * -------- ------- ----------------------------------------------------------
  *
  *****************************************************************************/
  -- ========================================================================
  -- ===== PACKAGE LEVEL PUBLIC DECLARATIONS ================================
  -- ========================================================================
  -- === Template variables and constants.
  g_trace   BOOLEAN := FALSE; -- To turn output on/off for debug purposes.
  g_updated BOOLEAN := FALSE; -- To turn output on/off for heatlh check table being altered.

  TYPE oasis_health_check_type IS RECORD (
   pk         number(15),
   SUB_SYSTEM varchar2(25),
   NAME       varchar2(50),
   VALUE      varchar2(200)
  );
  v_ohc_record    oasis_health_check_type;

  /*TYPE oasis_health_check_parm_type IS RECORD (
   parm_name  varchar2(25),
   parm_level varchar2(25)
  );
  v_parm_record    oasis_health_check_parm_type;*/

  FUNCTION is_number( p_str IN VARCHAR2 )
    RETURN VARCHAR2 DETERMINISTIC PARALLEL_ENABLE;

  FUNCTION doJobsExist
    RETURN VARCHAR2 DETERMINISTIC PARALLEL_ENABLE;

  PROCEDURE reset_daily_ohc_sequence;

  PROCEDURE validate_empty_parm (v_name VARCHAR2, v_value VARCHAR2, v_parm VARCHAR2,
                                 v_sub_system VARCHAR2, category VARCHAR2,v_run_date VARCHAR2,
                                 msg VARCHAR2);
                                 
  PROCEDURE validate_yesno_parm (v_name VARCHAR2, v_value VARCHAR2, v_parm VARCHAR2,
                                 v_sub_system VARCHAR2, category VARCHAR2,
                                 v_run_date VARCHAR2, msg VARCHAR2);

  PROCEDURE validate_string_parm (v_name VARCHAR2, v_value VARCHAR2, v_parm VARCHAR2,
                                 v_sub_system VARCHAR2, category VARCHAR2,
                                 v_run_date VARCHAR2, msg VARCHAR2, exp_value VARCHAR2);

  PROCEDURE validate_integer_parm (v_name VARCHAR2, v_value VARCHAR2, v_parm VARCHAR2,
                                 v_sub_system VARCHAR2, category VARCHAR2,
                                 v_run_date VARCHAR2, msg VARCHAR2, exp_value VARCHAR2, 
                                 exp_value1 VARCHAR2 DEFAULT NULL);

  PROCEDURE validate_float_xx_parm (v_name VARCHAR2, v_value VARCHAR2, v_parm VARCHAR2,
                                 v_sub_system VARCHAR2, category VARCHAR2,
                                 v_run_date VARCHAR2, msg VARCHAR2, exp_value VARCHAR2);

  PROCEDURE verify_count (v_level VARCHAR2, v_sub_system VARCHAR2, v_cat VARCHAR2,
                               v_code VARCHAR2, v_test_criteria VARCHAR2, v_count NUMBER,
                               v_check VARCHAR2, v_unit VARCHAR2, v_sql VARCHAR2 DEFAULT NULL);

  PROCEDURE add_ohc_outcome (plevel IN varchar2, subsystem VARCHAR2, category IN varchar2,
                             pcode IN system_parameter_util.sysparm_code%TYPE,
                             pvalue IN system_parameter_util.sysparm_value%TYPE,
                             pdesc IN system_parameter_util.sysparm_description%TYPE,
                             status VARCHAR2 DEFAULT NULL,
                             msg VARCHAR2 DEFAULT NULL,
                             psql VARCHAR2 DEFAULT NULL);

  PROCEDURE update_ohc_outcome(parm VARCHAR2, subsystem VARCHAR2, category VARCHAR2,
                               run_date VARCHAR2, outcome VARCHAR2, msg VARCHAR2 DEFAULT NULL);

  PROCEDURE display_health_checks (subsystem IN varchar2);

  PROCEDURE check_parms (plevel IN varchar2, subsystem IN VARCHAR2, category IN varchar2,
                         input_parms IN VARCHAR2);

  PROCEDURE main (subsystem IN varchar2, recv_email_addr IN VARCHAR2, 
                  stats IN BOOLEAN DEFAULT FALSE);

END oasis_health_check_main;
/
CREATE OR REPLACE PACKAGE BODY oasis_health_check_main IS
  -- ========================================================================
  -- ===== PACKAGE LEVEL PRIVATE DECLARATIONS ===============================
  -- ========================================================================
  -- === Template variables and constants.
  g_error       EXCEPTION;
  g_time_format VARCHAR2(12);
  g_date_format VARCHAR2(12);

  v_obj_name    CONSTANT VARCHAR2(30) := 'oasis_health_check_main'; -- Oracle object name
  v_msg_pref    CONSTANT VARCHAR2(20) := 'Error ';
  v_msg VARCHAR2(4000); -- error/info message
  v_line VARCHAR2 (255);
  v_run_date DATE  := SYSDATE;
  v_run_no NUMBER(15);
  v_run_date_str VARCHAR2(25) := TO_CHAR (v_run_date, 'MM/DD/YYYY HH24:MI:SS');
  v_ok VARCHAR2(2) := 'OK';
  v_review VARCHAR2(7) := 'REVIEW';
  v_pending VARCHAR2(7) := 'PENDING';

  -- === Constants: <ConstantName> CONSTANT <DataType> := <Value>;
  -- === Types.
  -- === Variables of user-defined Types.
  -- === Cursors.
  TYPE sys_parm_type IS RECORD (
   code          system_parameter_util.sysparm_code%TYPE,
   value         system_parameter_util.sysparm_value%TYPE,
   description   system_parameter_util.sysparm_description%TYPE
  );
  v_sys_parm_record    sys_parm_type;

  PROCEDURE pl(s IN VARCHAR2);

  --sys_parm_cursor_for_parm start
  CURSOR sys_parm_cursor_for_parm(searchParam IN VARCHAR2)
   IS
    SELECT spu.sysparm_code, spu.sysparm_value, spu.sysparm_description
    FROM system_parameter_util spu
    WHERE  Instr(searchParam, spu.sysparm_code) > 0;
  --sys_parm_cursor_for_parm end

  /**************************************************************************
  * pl
  *--------------------------------------------------------------------------
  * Short form for put_line. Output is controlled by the g_trace variable.
  ***************************************************************************/
  PROCEDURE pl(s IN VARCHAR2) IS
  BEGIN
    IF g_trace=TRUE THEN
      dbms_output.enable(1000000);
      --dbms_output.put_line(substr(s, 1, 255));
      dbms_output.put_line(s);
    END IF;
  END pl;

  FUNCTION is_number( p_str IN VARCHAR2 )
    RETURN VARCHAR2 DETERMINISTIC PARALLEL_ENABLE
  IS
    l_num NUMBER;
  BEGIN
    l_num := to_number( p_str );
    RETURN 'Y';
  EXCEPTION
    WHEN value_error THEN
      RETURN 'N';
  END is_number;

  FUNCTION doJobsExist
    RETURN VARCHAR2 DETERMINISTIC PARALLEL_ENABLE
  IS
    v_count NUMBER;
  BEGIN
    SELECT COUNT(*)
    INTO v_count
    FROM (
      SELECT 1
      FROM dba_jobs dj
      WHERE upper(dj.WHAT) like '%OS_FORM_ORDER.MAIN%'
      UNION
      SELECT 1
      FROM user_scheduler_jobs usj
      WHERE upper(usj.PROGRAM_NAME) like '%OS_FORM_ORDER.MAIN%');

      --pl('dba jobs count = '||v_count);
      IF v_count = 0 THEN
        RETURN 'N';
      ELSE
        RETURN 'Y';
      END IF;
  END doJobsExist;

  PROCEDURE verify_count (v_level VARCHAR2, v_sub_system VARCHAR2, v_cat VARCHAR2,
                               v_code VARCHAR2, v_test_criteria VARCHAR2, v_count NUMBER,
                               v_check VARCHAR2, v_unit VARCHAR2, v_sql VARCHAR2 DEFAULT NULL)
  IS
  BEGIN
    IF (v_test_criteria = '>0') THEN
      --pl ('v_count in verify = ' || v_count);
      IF (v_count > 0) THEN
        add_ohc_outcome(v_level, v_sub_system, v_cat,
                          v_code, v_test_criteria,
                          v_check,
                          v_review,
                          v_count || ' ' || v_unit || ' found - ' || v_check || '.',
                          v_sql);
      ELSE
        add_ohc_outcome(v_level, v_sub_system, v_cat,
                          v_code, v_test_criteria,
                          v_check,
                          v_ok,
                          v_count || ' ' || v_unit || ' found - ' || v_check || '.',
                          v_sql);
      END IF;
    ELSIF (v_test_criteria = '>100') THEN
      IF (v_count > 100) THEN
        add_ohc_outcome(v_level, v_sub_system, v_cat,
                          v_code, v_test_criteria,
                          v_check,
                          v_review,
                          v_count || ' ' || v_unit || ' found - ' || v_check || '.',
                          v_sql);
      ELSE
        add_ohc_outcome(v_level, v_sub_system, v_cat,
                          v_code, v_test_criteria,
                          v_check,
                          v_ok,
                          v_count || ' ' || v_unit || ' found - ' || v_check || '.',
                          v_sql);
      END IF;
    ELSE
      pl ('Test criteria ' || v_test_criteria || ' not supported.');
    END IF;
  END verify_count;
  
  PROCEDURE get_daily_ohc_sequence
  IS
  v_rundate       VARCHAR2(25);
  v_today         VARCHAR2(25);
  BEGIN
    IF v_run_no is null THEN
      SELECT to_char(SYSDATE, 'MM/DD/YYYY') into v_today FROM dual;
      SELECT substr(max(o.run_date), 1, INSTR(MAX(o.run_date), ' ')-1)
      into v_rundate
      FROM oasis_health_check o;

      IF v_rundate <> v_today THEN
        --pl ('Oasis health check first run... resetting run sequence');
        reset_daily_ohc_sequence;
      /*ELSE
        pl ('Oasis health check ran more than once already...');*/
      END IF;
    END IF;
    --pl('prev seq : '||v_run_no);
    SELECT DAILY_OHC_SEQ.nextval into v_run_no from dual;
    --pl('setting seq : '||v_run_no);
  END get_daily_ohc_sequence;

  PROCEDURE reset_daily_ohc_sequence IS
  pragma autonomous_transaction;
  ln_increment       number;
  ln_curr_val        number;
  ln_reset_increment number;
  ln_reset_val       number;
  BEGIN
    -- save the current INCREMENT value for the sequence
    SELECT increment_by
    INTO ln_increment
    FROM user_sequences
    where sequence_name = 'DAILY_OHC_SEQ';

    -- determine the increment value required to reset the sequence
    -- from the next fetched value to 0
    SELECT -1 - DAILY_OHC_SEQ.nextval into ln_reset_increment from dual;

    -- fetch the next value (to make it the current value)
    SELECT DAILY_OHC_SEQ.nextval into ln_curr_val from dual;

    -- change the increment value of the sequence to
    EXECUTE IMMEDIATE 'alter sequence DAILY_OHC_SEQ increment by '
        || ln_reset_increment ||' minvalue 0';

    -- advance the sequence to set it to 0
    SELECT DAILY_OHC_SEQ.nextval into ln_reset_val from dual;

    -- set increment back to the previous(ly saved) value
    EXECUTE IMMEDIATE 'alter sequence DAILY_OHC_SEQ increment by '
        || ln_increment ;
  END reset_daily_ohc_sequence;

  PROCEDURE add_ohc_outcome (plevel IN varchar2, subsystem VARCHAR2, category IN varchar2,
                             pcode IN system_parameter_util.sysparm_code%TYPE,
                             pvalue IN system_parameter_util.sysparm_value%TYPE,
                             pdesc IN system_parameter_util.sysparm_description%TYPE,
                             status VARCHAR2 DEFAULT NULL,
                             msg VARCHAR2 DEFAULT NULL,
                             psql VARCHAR2 DEFAULT NULL) IS
  v_sql_stmt VARCHAR2(3000);
  v_sql VARCHAR2(3000);
  v_seq number(15);
  v_code VARCHAR2(100);
  BEGIN
    BEGIN
       v_sql_stmt := 'select OASIS_HEALTH_CHECK_SEQ.nextval from dual';
       EXECUTE IMMEDIATE v_sql_stmt INTO v_seq;

       --v_code := REPLACE(pcode, '''', NULL);
       v_code := pcode;
       --pl('psql='||psql);
       v_sql := REPLACE(psql, '''', '''''');
       --pl('v_sql='||v_sql);
       --pl('Adding parameter : ' || v_code);
       IF (msg = 'Parameter missing from configuration') THEN
         v_sql_stmt := 'INSERT INTO OASIS_HEALTH_CHECK (OHC_PK, RUN_DATE, RUN_NO, OHC_LEVEL,'||
                     ' SUB_SYSTEM,OHC_CATEGORY,STATUS,MSG,PARM_NAME, PARM_VALUE, PARM_DESC, OHC_SQL) '||
                     'VALUES ('||v_seq||', ''' ||v_run_date_str|| ''', '||v_run_no||', ''' || plevel ||
                     ''', ''' || subsystem || ''',''' || category || ''', ''PENDING'', '''||msg||
                     ''','''||v_code||''', '''||pvalue||''', '''||pdesc||''', '''||v_sql||''')';
       ELSE
         IF status IS NULL OR status = '' OR status = v_ok OR status = v_review THEN
            --pl('in else if');
            v_sql_stmt := 'INSERT INTO OASIS_HEALTH_CHECK (OHC_PK, RUN_DATE, RUN_NO, OHC_LEVEL,'||
                     ' SUB_SYSTEM,OHC_CATEGORY,STATUS, MSG, PARM_NAME, PARM_VALUE, PARM_DESC, OHC_SQL) '||
                     'VALUES ('||v_seq||', ''' ||v_run_date_str|| ''', '||v_run_no||', ''' || plevel ||
                     ''', ''' || subsystem || ''',''' || category || ''', '''||status||''', 
                     '''||msg||''', '''||v_code||''', '''||pvalue||''', '''||pdesc||''', '''||v_sql||''')';
         ELSE
           --pl('in else');
            v_sql_stmt := 'INSERT INTO OASIS_HEALTH_CHECK (OHC_PK, RUN_DATE, RUN_NO, OHC_LEVEL,'||
                     ' SUB_SYSTEM, OHC_CATEGORY,STATUS, PARM_NAME, PARM_VALUE, PARM_DESC, OHC_SQL) '||
                     'VALUES ('||v_seq||', ''' ||v_run_date_str|| ''', '||v_run_no||', ''' || plevel ||
                     ''', ''' || subsystem || ''',''' || category || ''', ''PENDING'', '''||
                     v_code||''', '''||pvalue||''', '''||pdesc||''', '''||v_sql||''')';
         END IF;
       END IF;
       --pl(v_sql_stmt);
       EXECUTE IMMEDIATE v_sql_stmt;
       v_line := rpad(pcode, 30) || rpad(NVL(pvalue, '  '), 75) || rpad(pdesc, 100);
       --pl(v_line);
    END;
  END add_ohc_outcome;

  PROCEDURE get_system_param_util_for_parm (plevel IN varchar2, subsystem IN VARCHAR2,
                                            category IN varchar2, parm IN VARCHAR2) IS
  v_sql_stmt VARCHAR2(1000);
  v_seq number(15);
  BEGIN
    BEGIN
      --pl('Getting system paramter for : ' || parm);

      OPEN sys_parm_cursor_for_parm(parm);
      LOOP
       FETCH sys_parm_cursor_for_parm INTO v_sys_parm_record;
       --pl('row count = ' ||sys_parm_cursor_for_parm%ROWCOUNT);
       IF sys_parm_cursor_for_parm%ROWCOUNT = 0 THEN
          add_ohc_outcome(plevel, subsystem, category, parm,
                         '', null, null, 'Parameter missing from configuration');
       END IF;
       EXIT WHEN sys_parm_cursor_for_parm%NOTFOUND;
       IF (parm = v_sys_parm_record.code) THEN
          add_ohc_outcome(plevel, subsystem, category, v_sys_parm_record.code,
                         v_sys_parm_record.value, v_sys_parm_record.description);
       END IF;
      END LOOP;
      CLOSE sys_parm_cursor_for_parm;
    END;
  END get_system_param_util_for_parm;

  PROCEDURE validate_sys_param(category VARCHAR2) IS
  TYPE validate_cursor IS REF CURSOR;
  v_validate_cursor validate_cursor;
  v_sql_stmt VARCHAR2(3000);
  v_rowcount NUMBER(15);
  BEGIN
    BEGIN
      v_sql_stmt := 'SELECT ohc_pk, sub_system, parm_name, parm_value '||
                    'FROM oasis_health_check '||
                    'WHERE ohc_category = ''' || category || ''' and run_date = ''' ||
                    v_run_date_str || '''';

      --pl(v_sql_stmt);
      OPEN v_validate_cursor FOR v_sql_stmt;
       LOOP
          v_rowcount := v_validate_cursor%ROWCOUNT;
          --pl('row count for validate : '||v_rowcount);
          FETCH v_validate_cursor INTO v_ohc_record; --fetch a row in it
          EXIT WHEN v_validate_cursor%NOTFOUND;

          IF (v_ohc_record.SUB_SYSTEM = 'OUTPUT') THEN
            oasis_health_check_output.validate_ods_parm(category, v_ohc_record, v_run_date_str);
            oasis_health_check_output.validate_os_parm(category, v_ohc_record, v_run_date_str);
          END IF;
          IF (v_ohc_record.SUB_SYSTEM = 'POLICY') THEN
             oasis_health_check_policy.validate_pm_parm(category, v_ohc_record, v_run_date_str);
          END IF;
          IF (v_ohc_record.SUB_SYSTEM = 'CLAIMS') THEN
             oasis_health_check_claims.validate_claims_parm(category, v_ohc_record, v_run_date_str);
          END IF;
          /*IF (v_ohc_record.SUB_SYSTEM = 'FM') THEN
             oasis_health_check_fm.validate_claims_parm(category, v_ohc_record, v_run_date_str);
          END IF;*/
       END LOOP;
      CLOSE v_validate_cursor;
    END;
  END validate_sys_param;

  PROCEDURE check_parms (plevel IN varchar2, subsystem IN VARCHAR2, category IN varchar2,
                         input_parms IN VARCHAR2) IS
  v_sql_stmt VARCHAR2(1000);
  v_parm VARCHAR2(500);
  v_parm_name VARCHAR2(25);
  v_parm_level VARCHAR2(15);
  BEGIN
      --parse parms for parm name and validation level
      FOR parm in (SELECT level, TRIM(regexp_substr(input_parms, '[^^,]+', 1, LEVEL)) str
                   FROM dual
                   CONNECT BY regexp_substr(input_parms , '[^^,]+', 1, LEVEL) IS NOT NULL)
      LOOP
        v_parm := REGEXP_REPLACE( parm.str, '[[:space:]]', '' );
        --pl('check_parms : parm='||v_parm);
        IF REMAINDER(parm.level,2) = 0 THEN
          v_parm_level := v_parm;
          --pl(('Checking for parameter : '||v_parm_name||', validataion level : '||v_parm_level);
          get_system_param_util_for_parm(v_parm_level, subsystem, category, v_parm_name );
          validate_sys_param(category);
        ELSE
          v_parm_name := v_parm;
        END IF;
      END LOOP;
  END check_parms;

  PROCEDURE update_ohc_outcome(parm VARCHAR2, subsystem VARCHAR2, category VARCHAR2,
                               run_date VARCHAR2, outcome VARCHAR2, msg VARCHAR2 DEFAULT NULL) IS
  v_update_stmt VARCHAR2(500);
  BEGIN
    --pl('updating parameter : ' || parm);
    IF outcome = 'OK' THEN
      v_update_stmt := 'UPDATE oasis_health_check o '||
                       'SET o.status = ''OK'' ' ||
                       ', o.msg = '''''||
                       'WHERE o.sub_system = ''' || subsystem ||
                       ''' AND o.ohc_category = ''' || category ||
                       ''' AND '||'o.run_date = '''||run_date||''''||
                       ' AND o.run_no = ' ||v_run_no||
                       ' and o.parm_name = '''||parm||'''';
    ELSIF outcome = 'REVIEW' THEN
      v_update_stmt := 'UPDATE oasis_health_check o '||
                       'SET o.status = ''REVIEW'' '||
                       ', o.msg = '''||msg||''''||
                       'WHERE o.sub_system = ''' || subsystem ||
                       ''' AND o.ohc_category = ''' || category ||
                       ''' AND '|| 'o.run_date = '''||run_date||''''||
                       ' AND o.run_no = ' ||v_run_no||
                       ' and o.parm_name = '''||parm||'''';
    --ELSE
    END IF;
    --pl(v_update_stmt);
    EXECUTE IMMEDIATE v_update_stmt;
  END update_ohc_outcome;

  PROCEDURE send_email(email_addr VARCHAR2) IS
    TYPE validate_cursor IS REF CURSOR;
    v_ohc_cursor sys_refcursor;
    v_sql_stmt VARCHAR2(500);
  BEGIN
    BEGIN
      v_sql_stmt := 'select 1,lpad(parm_name, 20)||lpad(parm_value, 40)||lpad(status, 20)||lpad(msg, 100) from oasis_health_check where run_date='''||TO_CHAR (v_run_date, 'MM/DD/YYYY HH24:MI:SS')||'''';

      --pl('Email sql : '||v_sql_stmt);
      OPEN v_ohc_cursor FOR v_sql_stmt;

     cs_email.mail_attachment('oasis_health_check_donotreply@delphi-tech.com', email_addr,'',
     'OASIS Health Check run for '||SYSDATE, 'Oasis Health check run details are attached in the report with this email for date '||SYSDATE,v_ohc_cursor, 'oasis_health_check.txt');
    END;
  END send_email;

  PROCEDURE validate_empty_parm (v_name VARCHAR2, v_value VARCHAR2, v_parm VARCHAR2,
                                 v_sub_system VARCHAR2, category VARCHAR2,v_run_date VARCHAR2,
                                 msg VARCHAR2) IS
  BEGIN
    --pl ('value:'||v_value);
    IF (v_value IS NULL) THEN
      update_ohc_outcome(v_parm, v_sub_system, category,v_run_date,v_review, v_parm||' is not set.');
    ELSE
      update_ohc_outcome(v_parm, v_sub_system, category,v_run_date,v_ok, '');      
    END IF;
  END validate_empty_parm;
        
  PROCEDURE validate_yesno_parm (v_name VARCHAR2, v_value VARCHAR2, v_parm VARCHAR2,
                                 v_sub_system VARCHAR2, category VARCHAR2,v_run_date VARCHAR2,
                                 msg VARCHAR2) IS
  BEGIN
    IF (v_value IS NOT NULL) THEN
      IF (v_name =  v_parm) THEN
         IF (v_value<> 'Y') THEN
            update_ohc_outcome(v_parm, v_sub_system, category,v_run_date,v_review, msg);
         ELSIF (v_value = 'Y') THEN
            update_ohc_outcome(v_parm, v_sub_system, category,v_run_date,v_ok, msg);
         ELSE
            update_ohc_outcome(v_parm, v_sub_system, category,v_run_date,v_review,
                               v_parm||' ' ||msg);
         END IF;
       END IF;
    END IF;
  END validate_yesno_parm;

  PROCEDURE validate_string_parm (v_name VARCHAR2, v_value VARCHAR2, v_parm VARCHAR2,
                                 v_sub_system VARCHAR2, category VARCHAR2,v_run_date VARCHAR2,
                                 msg VARCHAR2, exp_value VARCHAR2) IS
  BEGIN
    IF (v_value IS NOT NULL) THEN
      IF (v_name =  v_parm) THEN
         IF (v_value<> exp_value) THEN
            update_ohc_outcome(v_parm, v_sub_system, category, v_run_date,v_review, msg);
         ELSIF (v_value = exp_value) THEN
            update_ohc_outcome(v_parm, v_sub_system, category,v_run_date,v_ok, msg);
         ELSE
            update_ohc_outcome(v_parm, v_sub_system, category,v_run_date,v_review,
                               v_parm||' ' ||msg);
         END IF;
       END IF;
    END IF;
  END validate_string_parm;

  PROCEDURE validate_integer_parm (v_name VARCHAR2, v_value VARCHAR2, v_parm VARCHAR2,
                                 v_sub_system VARCHAR2, category VARCHAR2,v_run_date VARCHAR2,
                                 msg VARCHAR2, exp_value VARCHAR2, exp_value1 VARCHAR2 DEFAULT NULL) IS
  BEGIN
    IF (v_value IS NOT NULL) THEN
      IF (v_name =  v_parm) THEN
	       IF is_number(v_value) = 'N' THEN
          update_ohc_outcome(v_parm, v_sub_system, category,
                      v_run_date, v_review, v_parm||' parameter is not a number');
         ELSE
           IF exp_value1 IS NOT NULL THEN
             IF (TO_NUMBER(v_value) = TO_NUMBER(exp_value) 
                 OR TO_NUMBER(v_value) = TO_NUMBER(exp_value1)) THEN
              update_ohc_outcome(v_parm, v_sub_system, category,
                          v_run_date, v_ok, '');
             ELSIF (TO_NUMBER(v_value) <> TO_NUMBER(exp_value) 
                    OR TO_NUMBER(v_value) <> TO_NUMBER(exp_value1)) THEN
              update_ohc_outcome(v_parm, v_sub_system, category,
                          v_run_date, v_review, msg);
             ELSE
              update_ohc_outcome(v_parm, v_sub_system, category, v_run_date,
                                 v_review, v_parm||' parameter not set or set to wrong value');
             END IF;
           ELSE
             IF (TO_NUMBER(v_value) = TO_NUMBER(exp_value)) THEN
              update_ohc_outcome(v_parm, v_sub_system, category,
                          v_run_date, v_ok, '');
             ELSIF (TO_NUMBER(v_value) <> TO_NUMBER(exp_value) ) THEN
              update_ohc_outcome(v_parm, v_sub_system, category,
                          v_run_date, v_review, msg);
             ELSE
              update_ohc_outcome(v_parm, v_sub_system, category, v_run_date,
                                 v_review, v_parm||' parameter not set or set to wrong value');
             END IF;
           END IF;
         END IF;
       END IF;
    END IF;
  END validate_integer_parm;

  PROCEDURE validate_float_xx_parm (v_name VARCHAR2, v_value VARCHAR2, v_parm VARCHAR2,
                                 v_sub_system VARCHAR2, category VARCHAR2,v_run_date VARCHAR2,
                                 msg VARCHAR2, exp_value VARCHAR2) IS
  BEGIN
    IF (v_value IS NOT NULL) THEN
      IF (v_name =  v_parm) THEN
           IF REGEXP_LIKE (v_value, '^\d+(\.\d+)?$', '') THEN
             IF (TO_NUMBER(v_value, '9.9') = TO_NUMBER(exp_value, '9.9')) THEN
              update_ohc_outcome(v_parm, v_sub_system, category, v_run_date, v_ok, '');
             ELSIF (TO_NUMBER(v_value, '9.9') < TO_NUMBER(exp_value, '9.9') OR
                    TO_NUMBER(v_value, '9.9') > TO_NUMBER(exp_value, '9.9')) THEN
              update_ohc_outcome(v_parm, v_sub_system, category,
                          v_run_date, v_review, 'Value should be 2.1');
             ELSE
              update_ohc_outcome(v_parm, v_sub_system, category,
                          v_run_date,v_review, v_parm||' parameter not set or set to wrong value.');
             END IF;
          ELSE
             update_ohc_outcome(v_parm, v_sub_system, category,
                          v_run_date, v_review, 'Not a decimal number');
           END IF;
       END IF;
    END IF;
  END validate_float_xx_parm;

  PROCEDURE get_ohc_stats IS
    v_ss VARCHAR2(10);
    v_sub VARCHAR2(25);
    v_cat VARCHAR2(25);
    v_status VARCHAR2(25);
    v_line VARCHAR2(9000);
    v_new_line VARCHAR2(25) := chr(13) || chr(10);
    v_two_tabs VARCHAR2(25) := chr(9)||chr(9);
    v_three_tabs VARCHAR2(25) := chr(9)||chr(9)||chr(9);
    v_four_tabs VARCHAR2(25) := chr(9)||chr(9)||chr(9)||chr(9);
  BEGIN
      v_line := chr(13) || chr(10) || 'OASIS Health Check Stats' || v_new_line;
      v_line := v_line || '------------------------' || v_new_line;
      v_line := v_line || 'SUB_SYSTEM'||v_two_tabs|| 'CATEGORY'||v_two_tabs||'STATUS'||v_two_tabs||'COUNT' || v_new_line;

      FOR row in (
        select o.sub_system, o.ohc_category, o.status, count(*) as checks_count
        from oasis_health_check o
        WHERE o.run_no IN (
          select max(o1.run_no)
          FROM oasis_health_check o1
          WHERE INSTR(o1.run_date,substr(v_run_date_str, 1, INSTR(v_run_date_str, ' ')-1))>0
          )
          AND o.run_date = v_run_date_str
          GROUP by rollup (o.sub_system, o.ohc_category, o.status)
      )
      LOOP
        --pl(row.sub_system || '-' || row.ohc_category || '-' || row.status);
        IF (row.sub_system IS NULL and row.ohc_category is null AND row.status IS NULL) THEN
          v_sub := 'TOTAL';
          v_cat := 'CHECKS';
          v_status := 'RUN';
        ELSIF (row.ohc_category is null AND row.status IS NULL) THEN
          v_cat := '   ';
          v_status := 'TOTAL';
          v_ss := 'Y';
        ELSIF (row.status IS NULL) then
          IF (row.ohc_category IS NULL) THEN
            v_status := '   ';
            v_cat := 'TOTAL';
          ELSE
            v_status := 'TOTAL';
          END IF;
        ELSE
          v_cat := row.ohc_category;
          v_sub := row.sub_system;
          v_status := row.status;
        END IF;

        v_line := v_line ||lpad(v_sub, 10)||v_three_tabs
                  || lpad(v_cat, 15)||v_four_tabs
                  || lpad(v_status, 7)||v_four_tabs
                  || lpad(row.checks_count, 4) || v_new_line;

        IF (v_ss = 'Y') THEN
          v_line := v_line || v_new_line;
        END IF;
        v_ss := null;
        v_status := null;
      END LOOP;
      pl(v_line);
  END get_ohc_stats;

  PROCEDURE display_review_checks IS
  v_new_line VARCHAR2(25) := chr(13) || chr(10);
  BEGIN
    pl(v_new_line||'===========PARAMETERS TO REVIEW START==============');
    FOR ohc in (
    SELECT o.parm_name, o.parm_value, o.parm_desc, o.status, o.msg
    FROM oasis_health_check o
    WHERE o.run_date = v_run_date_str 
          AND o.run_no = v_run_no 
          AND o.status = 'REVIEW'
    )
    LOOP
      pl('<='||lpad(ohc.parm_name, 20)||
         ', '||lpad(ohc.parm_value, 15)||
         ', '||lpad(ohc.status, 10)||
         ', '||lpad(ohc.parm_desc, 150)||
         ', '||lpad(ohc.msg, 200)||'=>'
         );
    END LOOP;
    pl('===========PARAMETERS TO REVIEW END================'||v_new_line);
  END display_review_checks;

  PROCEDURE display_checks (subsystem IN varchar2) IS
  v_test_count NUMBER(15);
  v_tabs VARCHAR2(25) := chr(9)||chr(9)||chr(9);
  v_new_line VARCHAR2(25) := chr(13) || chr(10);
  BEGIN
    v_test_count := 0;
    IF (subsystem = 'ALL') THEN
      pl('Oasis Health Checks for ' || subsystem || ' subsystem' || v_new_line);
      FOR ohc in (
        SELECT o.sub_system, o.parm_desc FROM oasis_health_check o
        WHERE o.run_date IN (
          select max(o1.run_date)
          FROM oasis_health_check o1
        )
        ORDER BY 1
      )
      LOOP
        v_test_count := v_test_count + 1;
        pl(lpad(v_test_count, 4) || v_tabs || rpad(ohc.sub_system, 10) || v_tabs || rpad(ohc.parm_desc, 255));
      END LOOP;
    ELSE
      pl('Oasis Health Checks for ' || subsystem || ' subsystem' || v_new_line);
      FOR ohc in (
        SELECT o.sub_system, o.parm_desc FROM oasis_health_check o
        WHERE o.run_date IN (
          select max(o1.run_date)
          FROM oasis_health_check o1
        )
        AND o.sub_system = subsystem
        ORDER BY 1
      )
      LOOP
        v_test_count := v_test_count + 1;
        pl(lpad(v_test_count, 4) || v_tabs || rpad(ohc.sub_system, 10) || v_tabs || rpad(ohc.parm_desc, 255));
      END LOOP;
    END IF;
  END display_checks;

  PROCEDURE display_health_checks (subsystem IN varchar2) IS
  BEGIN
    IF (subsystem = 'OUTPUT') THEN
      display_checks('OUTPUT');
    ELSIF (subsystem = 'POLICY') THEN
      display_checks('POLICY');
    ELSIF (subsystem = 'CLAIMS') THEN
      display_checks('CLAIMS');
    ELSIF (subsystem = 'CIS') THEN
      display_checks('CIS');
    ELSIF (subsystem = 'FM') THEN
      display_checks('FM');
    ELSE
      display_checks('ALL');
    END IF;
  END display_health_checks;

  PROCEDURE perform_ohc_validations(subsystem IN varchar2) IS
  BEGIN
    get_daily_ohc_sequence;
    pl('Health Check Run # : ' || v_run_no);    
    IF (subsystem = 'OUTPUT') THEN
      oasis_health_check_output.main;
    ELSIF (subsystem = 'PM') THEN
      oasis_health_check_policy.main;
    ELSIF (subsystem = 'CLAIMS') THEN
      oasis_health_check_claims.main;
    ELSIF (subsystem = 'CIS') THEN
      oasis_health_check_cis.main;
    ELSIF (subsystem = 'FM') THEN
      oasis_health_check_fm.main;
    ELSE
      oasis_health_check_output.main;
      oasis_health_check_policy.main;
      oasis_health_check_claims.main;
      oasis_health_check_cis.main;
      oasis_health_check_fm.main;
    END IF;
  END perform_ohc_validations;

  /**************************************************************************
  * Main
  ***************************************************************************/
  PROCEDURE main (subsystem IN varchar2, recv_email_addr IN VARCHAR2, 
                  stats IN BOOLEAN DEFAULT FALSE) IS
  BEGIN
    BEGIN
      perform_ohc_validations(subsystem);
      display_review_checks();
      IF stats = TRUE THEN
        get_ohc_stats();
      END IF;
      --pl(get_stats);
      if (REGEXP_LIKE (recv_email_addr, '^[A-Za-z]+[A-Za-z0-9.]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,4}$')) then
        send_email(recv_email_addr);
      end if;
    END;
  END main;

  BEGIN
    g_trace := TRUE;
    --g_updated := FALSE;
  EXCEPTION
    WHEN OTHERS THEN
      g_date_format := 'YYYY-MM-DD';
END oasis_health_check_main;
/
