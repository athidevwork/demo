CREATE OR REPLACE PACKAGE oasis_health_check_policy
  AUTHID CURRENT_USER -- [ DO NOT EDIT! Invoker Rights Clause ]
  IS
 /****************************************************************************
  *
  * ---------------------------------------------------------------------------
  * $Revision 1.0  03/20/2018   $$Author Athi $
  *****************************************************************************
  *  Copyright(C) 2018 - Delphi Technology Inc.
  *
  *   File Name : oasis_health_check_output.pkg
  * Object Name : oasis_health_check_output
  * Description : health check and validation for output sub system
  *----------------------------------------------------------------------------
  * Revisions:
  *   Date    By     Purpose
  * -------- ------- ----------------------------------------------------------
  *
  *****************************************************************************/
  -- ========================================================================
  -- ===== PACKAGE LEVEL PUBLIC DECLARATIONS ================================
  -- ========================================================================
  -- === Template variables and constants.
  g_trace   BOOLEAN := FALSE; -- To turn output on/off for debug purposes.
  g_updated BOOLEAN := FALSE; -- To turn output on/off for heatlh check table being altered.

  PROCEDURE main;

  PROCEDURE validate_pm_parm(category VARCHAR2,
                              v_ohc_record oasis_health_check_main.oasis_health_check_type,
                              v_run_date VARCHAR2);

END oasis_health_check_policy;
/
CREATE OR REPLACE PACKAGE BODY oasis_health_check_policy IS
  -- ========================================================================
  -- ===== PACKAGE LEVEL PRIVATE DECLARATIONS ===============================
  -- ========================================================================
  -- === Template variables and constants.
  g_error       EXCEPTION;
  g_time_format VARCHAR2(12);
  g_date_format VARCHAR2(12);

  v_obj_name        CONSTANT VARCHAR2(30) := 'oasis_health_check_policy'; -- Oracle object name
  v_msg_pref        CONSTANT VARCHAR2(20) := 'Error ';
  v_msg             VARCHAR2(4000); -- error/info message
  v_line            VARCHAR2 (255);
  v_run_date        DATE  := SYSDATE;
  v_run_code        VARCHAR2(50) := '';
  v_proc_name       VARCHAR2(50) := '';
  v_sub_system      VARCHAR2(25) := 'POLICY';
  v_category        VARCHAR(25) := 'POLICY_CFG';
  --v_data_code       VARCHAR2(25) := 'POLICY_CFG_DATA';
  v_data_code       VARCHAR2(25) := '';
  v_sql_stmt        VARCHAR2(3000) := '';
  v_ok              VARCHAR2(2) := 'OK';
  v_review          VARCHAR2(7) := 'REVIEW';
  v_desc            VARCHAR2(255) := '';
  v_level           VARCHAR2(25);
  v_count           NUMBER(15);
  v_test_criteria_0 VARCHAR2(25) := 'COUNT=0';

  -- === Constants: <ConstantName> CONSTANT <DataType> := <Value>;
  -- === Types.
  -- === Variables of user-defined Types.
  -- === Cursors.
    --pm_sys_parms VARCHAR2(200) := '''PM_CHECK_NOTICE''';
    --pm_sys_parms VARCHAR2(200) := 'PM_CHECK_NOTICE';
    pm_sys_parms VARCHAR2(200) := 'PM_CHECK_NOTICE^ERROR';
  /**************************************************************************
  * pl
  *--------------------------------------------------------------------------
  * Short form for put_line. Output is controlled by the g_trace variable.
  ***************************************************************************/
  PROCEDURE pl(s IN VARCHAR2) IS
  BEGIN
    IF g_trace=TRUE THEN
      dbms_output.enable(1000000);
      --dbms_output.put_line(substr(s, 1, 255));
      dbms_output.put_line(s);
    END IF;
  END pl;

  PROCEDURE validate_pm_parm(category VARCHAR2,
                            v_ohc_record oasis_health_check_main.oasis_health_check_type,
                            v_run_date VARCHAR2) IS
  v_parm VARCHAR2(25);
  v_update_stmt VARCHAR2(500);
  BEGIN
    BEGIN
      IF (v_ohc_record.VALUE IS NOT NULL) THEN
         oasis_health_check_main.validate_yesno_parm(v_ohc_record.NAME, v_ohc_record.VALUE,
                                 'PM_CHECK_NOTICE', v_sub_system, category,v_run_date,
                                 'Should be set to Y for product notifies to work.');
      END IF;
    END;
  END validate_pm_parm;

  PROCEDURE PM_001 IS
  BEGIN
    v_proc_name := 'PM_001';
    v_run_code := v_proc_name;
    v_desc := v_obj_name||'.'||v_proc_name||' - Policy term records that have incorrect closing trans log fk';
    v_level := 'WARNING';
    pl('Checking for ' || v_desc || ' : ' || v_level);

    v_sql_stmt := 'SELECT COUNT(1)
    FROM  (SELECT pth.term_base_record_fk,
                  pth.closing_trans_log_fk,
                  LEAD(pth.transaction_log_fk, 1)
                    OVER (PARTITION BY pth.term_base_record_fk
                          ORDER BY pth.policy_term_history_pk) next_row_trans_fk       
           FROM   policy_term_history pth, 
                  policy p
           WHERE  p.policy_pk = pth.policy_fk
           AND    p.policy_cycle_code = ''POLICY''
           AND    p.pol_curr_status_code <> ''PENDING''
           AND    pth.record_mode_code = ''OFFICIAL''
           AND    pth.base_record_b = ''N''
           AND    pth.closing_trans_log_fk IS NOT NULL) x
    WHERE  x.next_row_trans_fk <> x.closing_trans_log_fk';

    EXECUTE IMMEDIATE v_sql_stmt INTO v_count;
    
    oasis_health_check_main.verify_count(v_level, v_sub_system, v_category, 
                        v_data_code, v_test_criteria_0, v_count, v_desc, 'rows', v_sql_stmt, v_run_code);
  END PM_001;

  PROCEDURE PM_002 IS
  BEGIN
    v_proc_name := 'PM_002';
    v_run_code := v_proc_name;
    v_desc := v_obj_name||'.'||v_proc_name||' - Transaction_applied_term that has more than one term affected by a '||
              'transaction but has same policy_term_history_fk in transaction_applied_term';
    v_level := 'WARNING';
    pl('Checking for ' || v_desc || ' : ' || v_level);

    v_sql_stmt := 'SELECT COUNT(1)
    FROM  (SELECT pth.term_base_record_fk,
                  pth.closing_trans_log_fk,
                  LEAD(pth.transaction_log_fk, 1)
                    OVER (PARTITION BY pth.term_base_record_fk
                          ORDER BY pth.policy_term_history_pk) next_row_trans_fk       
           FROM   policy_term_history pth, 
                  policy p
           WHERE  p.policy_pk = pth.policy_fk
           AND    p.policy_cycle_code = ''POLICY''
           AND    p.pol_curr_status_code <> ''PENDING''
           AND    pth.record_mode_code = ''OFFICIAL''
           AND    pth.base_record_b = ''N''
           AND    pth.closing_trans_log_fk IS NOT NULL) x
    WHERE  x.next_row_trans_fk <> x.closing_trans_log_fk';

    EXECUTE IMMEDIATE v_sql_stmt INTO v_count;
    
    oasis_health_check_main.verify_count(v_level, v_sub_system, v_category, 
                        v_data_code, v_test_criteria_0, v_count, v_desc, 'rows', v_sql_stmt, v_run_code);
  END PM_002;

  PROCEDURE PM_003 IS
  BEGIN
    v_proc_name := 'PM_003';
    v_run_code := v_proc_name;
    v_desc := v_obj_name||'.'||v_proc_name||' - Strange effective date in mini policy coverage';
    v_level := 'WARNING';
    pl('Checking for ' || v_desc || ' : ' || v_level);

    v_sql_stmt := 'SELECT COUNT(1)
    FROM   cm_coverage cc
    WHERE  cc.effective_from_date < to_date(''1/1/1950'',''mm/dd/yyyy'')
    or     cc.effective_from_date > add_months(SYSDATE,24)';

    EXECUTE IMMEDIATE v_sql_stmt INTO v_count;
    
    oasis_health_check_main.verify_count(v_level, v_sub_system, v_category, 
                        v_data_code, v_test_criteria_0, v_count, v_desc, 'rows', v_sql_stmt, v_run_code);
  END PM_003;

  PROCEDURE PM_004 IS
  BEGIN
    v_proc_name := 'PM_004';
    v_run_code := v_proc_name;
    v_desc := v_obj_name||'.'||v_proc_name||' - strange effective date in mini policy risk';
    v_level := 'WARNING';
    pl('Checking for ' || v_desc || ' : ' || v_level);

    v_sql_stmt := 'SELECT COUNT(1)
    FROM   cm_risk cr
    WHERE  cr.effective_from_date < to_date(''1/1/1950'',''mm/dd/yyyy'')
    or     cr.effective_from_date > add_months(SYSDATE,24)';

    EXECUTE IMMEDIATE v_sql_stmt INTO v_count;
    
    oasis_health_check_main.verify_count(v_level, v_sub_system, v_category, 
                        v_data_code, v_test_criteria_0, v_count, v_desc, 'rows', v_sql_stmt, v_run_code);
  END PM_004;

  PROCEDURE PM_005 IS
  BEGIN
    v_proc_name := 'PM_005';
    v_run_code := v_proc_name;
    v_desc := v_obj_name||'.'||v_proc_name||' - Strange effective date in mini policy';
    v_level := 'WARNING';
    pl('Checking for ' || v_desc || ' : ' || v_level);

    v_sql_stmt := 'SELECT COUNT(1)
    FROM   cm_policy p
    WHERE  p.policy_start_date < to_date(''1/1/1950'',''mm/dd/yyyy'')
    or     p.policy_start_date > add_months(SYSDATE,24)';

    EXECUTE IMMEDIATE v_sql_stmt INTO v_count;
    
    oasis_health_check_main.verify_count(v_level, v_sub_system, v_category, 
                        v_data_code, v_test_criteria_0, v_count, v_desc, 'rows', v_sql_stmt, v_run_code);
  END PM_005;

  PROCEDURE PM_006 IS
  BEGIN
    v_proc_name := 'PM_006';
    v_run_code := v_proc_name;
    v_desc := v_obj_name||'.'||v_proc_name||' - Transactions that have timestamp info in ACCOUNTING_DATE';
    v_level := 'WARNING';
    pl('Checking for ' || v_desc || ' : ' || v_level);

    v_sql_stmt := 'SELECT COUNT(1)
    FROM   Transaction_Log tl, policy p
    WHERE  tl.policy_fk = p.policy_pk
    AND    p.policy_cycle_code = ''POLICY''
    AND    p.pol_curr_status_code <> ''PENDING''
    AND    tl.transaction_status_code = ''COMPLETE''
    AND    tl.accounting_date <> TRUNC(tl.accounting_date)';

    EXECUTE IMMEDIATE v_sql_stmt INTO v_count;
    
    oasis_health_check_main.verify_count(v_level, v_sub_system, v_category, 
                        v_data_code, v_test_criteria_0, v_count, v_desc, 'rows', v_sql_stmt, v_run_code);
  END PM_006;

  PROCEDURE PM_007 IS
  BEGIN
    v_proc_name := 'PM_007';
    v_run_code := v_proc_name;
    v_desc := v_obj_name||'.'||v_proc_name||' - Policies with more than one primary risk';
    v_level := 'WARNING';
    pl('Checking for ' || v_desc || ' : ' || v_level);

    v_sql_stmt := 'SELECT COUNT(1)
    FROM   Policy p,
           Risk   r,
           Risk   r1
    WHERE  r.policy_fk = p.policy_pk
    AND    r.base_record_b = ''N''
    AND    r.primary_risk_b =''Y''
    AND    r.accounting_to_date = to_date(''1/1/3000'',''mm/dd/yyyy'')
    AND    r.effective_to_date = to_date(''1/1/3000'',''mm/dd/yyyy'')
    AND    r.record_mode_code = ''OFFICIAL''
    AND    r1.policy_fk = p.policy_pk
    AND    r1.base_record_b = ''N''
    AND    r1.primary_risk_b = ''Y''
    AND    r1.accounting_to_date = to_date(''1/1/3000'',''mm/dd/yyyy'')
    AND    r1.effective_to_date = to_date(''1/1/3000'',''mm/dd/yyyy'')
    AND    r1.record_mode_code = ''OFFICIAL''
    AND    r1.risk_base_record_fk <> r.risk_base_record_fk
    AND    r1.effective_from_date BETWEEN r.effective_from_date AND r.effective_to_date
    AND    p.policy_cycle_code = ''POLICY''';

    EXECUTE IMMEDIATE v_sql_stmt INTO v_count;
    
    oasis_health_check_main.verify_count(v_level, v_sub_system, v_category, 
                        v_data_code, v_test_criteria_0, v_count, v_desc, 'rows', v_sql_stmt, v_run_code);
  END PM_007;

  PROCEDURE PM_008 IS
  BEGIN
    v_proc_name := 'PM_008';
    v_run_code := v_proc_name;
    v_desc := v_obj_name||'.'||v_proc_name||' - Policy terms that acct from date is greater than acct to date';
    v_level := 'WARNING';
    pl('Checking for ' || v_desc || ' : ' || v_level);

    v_sql_stmt := 'SELECT count(1)
    FROM   Policy_Term_History pth, Transaction_Log tl, policy p
    WHERE  pth.policy_fk = p.policy_pk
    AND    pth.transaction_log_fk = tl.transaction_log_pk
    AND    p.policy_cycle_code = ''POLICY''
    AND    p.pol_curr_status_code <> ''PENDING''
    AND    tl.transaction_status_code = ''COMPLETE''
    AND    pth.record_mode_code = ''OFFICIAL''
    AND    pth.accounting_from_date > pth.accounting_to_date'; 

    EXECUTE IMMEDIATE v_sql_stmt INTO v_count;
    
    oasis_health_check_main.verify_count(v_level, v_sub_system, v_category, 
                        v_data_code, v_test_criteria_0, v_count, v_desc, 'rows', v_sql_stmt, v_run_code);
  END PM_008;

  PROCEDURE PM_009 IS
  BEGIN
    v_proc_name := 'PM_009';
    v_run_code := v_proc_name;
    v_desc := v_obj_name||'.'||v_proc_name||' - Records in Transaction_Applied_Term with policy_term_history_fk ' ||
              'does not match term_base_record_fk';
    v_level := 'WARNING';
    pl('Checking for ' || v_desc || ' : ' || v_level);

    v_sql_stmt := 'SELECT COUNT(*)
    FROM   transaction_log tl,
           transaction_applied_term tat,
           policy_term_history pth, 
           policy p
    WHERE  tl.transaction_log_pk = tat.transaction_log_fk 
    AND    tat.policy_term_history_fk = pth.policy_term_history_pk
    AND    pth.term_base_record_fk <> tat.term_base_record_fk
    AND    p.policy_pk = tl.policy_fk
    AND    p.policy_cycle_code = ''POLICY''
    AND    p.pol_curr_status_code <> ''PENDING''
    AND    tl.transaction_status_code = ''COMPLETE''
    AND    pth.record_mode_code = ''OFFICIAL''';

    EXECUTE IMMEDIATE v_sql_stmt INTO v_count;
    
    oasis_health_check_main.verify_count(v_level, v_sub_system, v_category, 
                        v_data_code, v_test_criteria_0, v_count, v_desc, 'rows', v_sql_stmt, v_run_code);
  END PM_009;

  PROCEDURE PM_010 IS
  BEGIN
    v_proc_name := 'PM_010';
    v_run_code := v_proc_name;
    v_desc := v_obj_name||'.'||v_proc_name||' - Risk records that eff from date is greater than eff to date';
    v_level := 'WARNING';
    pl('Checking for ' || v_desc || ' : ' || v_level);

    v_sql_stmt := 'SELECT count(*)
    FROM   risk r, 
           policy p
    WHERE  r.effective_to_date < r.effective_from_date
    AND    p.policy_pk = r.policy_fk
    AND    p.policy_cycle_code = ''POLICY''
    AND    p.pol_curr_status_code <> ''PENDING''
    AND    r.record_mode_code = ''OFFICIAL''';

    EXECUTE IMMEDIATE v_sql_stmt INTO v_count;
    
    oasis_health_check_main.verify_count(v_level, v_sub_system, v_category, 
                        v_data_code, v_test_criteria_0, v_count, v_desc, 'rows', v_sql_stmt, v_run_code);
  END PM_010;

  PROCEDURE PM_011 IS
  BEGIN
    v_proc_name := 'PM_011';
    v_run_code := v_proc_name;
    v_desc := v_obj_name||'.'||v_proc_name||' - Risk that acct from date is greater than acct to date';
    v_level := 'WARNING';
    pl('Checking for ' || v_desc || ' : ' || v_level);

    v_sql_stmt := 'SELECT count(1)
    FROM   Risk r, 
           policy p
    WHERE  r.accounting_from_date > r.accounting_to_date
    AND    p.policy_pk = r.policy_fk
    AND    p.policy_cycle_code = ''POLICY''
    AND    p.pol_curr_status_code <> ''PENDING''
    AND    r.record_mode_code = ''OFFICIAL''';
    
    EXECUTE IMMEDIATE v_sql_stmt INTO v_count;

    oasis_health_check_main.verify_count(v_level, v_sub_system, v_category, 
                        v_data_code, v_test_criteria_0, v_count, v_desc, 'rows', v_sql_stmt, v_run_code);
  END PM_011;

  PROCEDURE PM_012 IS
  BEGIN
    v_proc_name := 'PM_012';
    v_run_code := v_proc_name;
    v_desc := v_obj_name||'.'||v_proc_name||' - Coverage with eff from date is greater than eff to date';
    v_level := 'WARNING';
    pl('Checking for ' || v_desc || ' : ' || v_level);

    v_sql_stmt := 'SELECT count(*)
    FROM   coverage c, 
           risk     r,
           policy   p
    WHERE  c.risk_base_record_fk = r.risk_pk
    AND    r.policy_fk = p.policy_pk
    AND    p.policy_cycle_code = ''POLICY''
    AND    p.pol_curr_status_code <> ''PENDING''
    AND    r.record_mode_code = ''OFFICIAL''
    AND    c.effective_to_date < c.effective_from_date
    AND    c.record_mode_code = ''OFFICIAL''';
    
    EXECUTE IMMEDIATE v_sql_stmt INTO v_count;

    oasis_health_check_main.verify_count(v_level, v_sub_system, v_category, 
                        v_data_code, v_test_criteria_0, v_count, v_desc, 'rows', v_sql_stmt, v_run_code);
  END PM_012;

  PROCEDURE PM_013 IS
  BEGIN
    v_proc_name := 'PM_013';
    v_run_code := v_proc_name;
    v_desc := v_obj_name||'.'||v_proc_name||' - Coverage with acct from date is greater than acct to date';
    v_level := 'WARNING';
    pl('Checking for ' || v_desc || ' : ' || v_level);

    v_sql_stmt := 'SELECT count(1)
    FROM   coverage c, 
           risk     r,
           policy   p
    WHERE  c.risk_base_record_fk = r.risk_pk
    AND    r.policy_fk = p.policy_pk
    AND    p.policy_cycle_code = ''POLICY''
    AND    p.pol_curr_status_code <> ''PENDING''
    AND    r.record_mode_code = ''OFFICIAL''
    AND    c.accounting_to_date < c.accounting_from_date
    AND    c.record_mode_code = ''OFFICIAL''';

    EXECUTE IMMEDIATE v_sql_stmt INTO v_count;
    
    oasis_health_check_main.verify_count(v_level, v_sub_system, v_category, 
                        v_data_code, v_test_criteria_0, v_count, v_desc, 'rows', v_sql_stmt, v_run_code);
  END PM_013;

  PROCEDURE PM_014 IS
  BEGIN
    v_proc_name := 'PM_014';
    v_run_code := v_proc_name;
    v_desc := v_obj_name||'.'||v_proc_name||' - Component with eff from date is greater than eff to date';
    v_level := 'WARNING';
    pl('Checking for ' || v_desc || ' : ' || v_level);

    v_sql_stmt := 'SELECT count(*)
    FROM   policy_coverage_component pcc, 
           coverage c, 
           risk     r,
           policy   p
    WHERE  c.risk_base_record_fk = r.risk_pk
    AND    r.policy_fk = p.policy_pk
    AND    c.coverage_pk = pcc.coverage_base_record_fk
    AND    p.policy_cycle_code = ''POLICY''
    AND    p.pol_curr_status_code <> ''PENDING''
    AND    r.record_mode_code = ''OFFICIAL''
    AND    c.record_mode_code = ''OFFICIAL''
    AND    pcc.effective_to_date < pcc.effective_from_date
    AND    pcc.record_mode_code = ''OFFICIAL''';

    EXECUTE IMMEDIATE v_sql_stmt INTO v_count;
    
    oasis_health_check_main.verify_count(v_level, v_sub_system, v_category, 
                        v_data_code, v_test_criteria_0, v_count, v_desc, 'rows', v_sql_stmt, v_run_code);
  END PM_014;

  PROCEDURE PM_015 IS
  BEGIN
    v_proc_name := 'PM_015';
    v_run_code := v_proc_name;
    v_desc := v_obj_name||'.'||v_proc_name||' - Risk effective from or to date is less than transaction effective from date';
    v_level := 'WARNING';
    pl('Checking for ' || v_desc || ' : ' || v_level);

    v_sql_stmt := 'SELECT COUNT(*)
    FROM   transaction_log tl,
           Risk r, 
           Policy p
    WHERE  tl.transaction_log_pk = r.transaction_log_fk
    AND    r.policy_fk = p.policy_pk
    AND    p.policy_cycle_code = ''POLICY''
    AND    p.pol_curr_status_code <> ''PENDING''
    AND    tl.transaction_status_code = ''COMPLETE''
    AND    (r.effective_to_date < tl.effective_from_date or 
            r.effective_from_date < tl.effective_from_date)
    AND    r.base_record_b = ''N''
    AND    r.record_mode_code = ''OFFICIAL''
    -- Exclude prior acts
    AND    r.exposure_basis_code IS NULL
    AND    NOT EXISTS
          (SELECT 1
           FROM   Risk r1
           WHERE  r1.risk_pk = r.risk_base_record_fk
           AND    r1.transaction_log_fk <> r.transaction_log_fk)
    ORDER  BY 1';

    EXECUTE IMMEDIATE v_sql_stmt INTO v_count;
    
    oasis_health_check_main.verify_count(v_level, v_sub_system, v_category, 
                        v_data_code, v_test_criteria_0, v_count, v_desc, 'rows', v_sql_stmt, v_run_code);
  END PM_015;

  PROCEDURE PM_016 IS
  BEGIN
    v_proc_name := 'PM_016';
    v_run_code := v_proc_name;
    v_desc := v_obj_name||'.'||v_proc_name||' - Coverage effective from or to date is less than transaction effective from date';
    v_level := 'WARNING';
    pl('Checking for ' || v_desc || ' : ' || v_level);

    v_sql_stmt := 'SELECT COUNT(*)
    FROM   transaction_log tl,
           coverage c, 
           policy   p
    WHERE  tl.transaction_log_pk = c.transaction_log_fk
    AND    tl.transaction_status_code = ''COMPLETE''
    -- Exclude cancellation and reinstate transactions 
    AND    tl.transaction_type_code NOT IN (''CANCEL'',''REINSTATE'') 
    AND    tl.transaction_code NOT IN (''RISKCANCEL'',''COVGCANCEL'')
    AND    tl.policy_fk = p.policy_pk
    AND    p.policy_cycle_code = ''POLICY''
    AND    p.pol_curr_status_code <> ''PENDING''
    AND    (c.effective_to_date < tl.effective_from_date or
            c.effective_from_date < tl.effective_from_date)
    AND    c.base_record_b = ''N''
    AND    c.record_mode_code = ''OFFICIAL''
    AND    c.coverage_pk NOT IN
            (SELECT coverage_child_fk 
             FROM   coverage_relation cr 
             WHERE  cr.cvg_relation_type_code = ''NOSE''
             AND    cr.record_mode_code = ''OFFICIAL''
             AND    cr.accounting_to_date = to_date(''1/1/3000'',''mm/dd/yyyy''))
    AND    NOT EXISTS
          (SELECT 1
           FROM   coverage c1
           WHERE  c1.coverage_pk = c.coverage_base_record_fk
           AND    c1.transaction_log_fk <> c.transaction_log_fk)';

    EXECUTE IMMEDIATE v_sql_stmt INTO v_count;
    
    oasis_health_check_main.verify_count(v_level, v_sub_system, v_category, 
                        v_data_code, v_test_criteria_0, v_count, v_desc, 'rows', v_sql_stmt, v_run_code);
  END PM_016;

  PROCEDURE PM_017 IS
  BEGIN
    v_proc_name := 'PM_017';
    v_run_code := v_proc_name;
    v_desc := v_obj_name||'.'||v_proc_name||' - Component effective from or to date is less than transaction effective from date';
    v_level := 'WARNING';
    pl('Checking for ' || v_desc || ' : ' || v_level);

    v_sql_stmt := 'SELECT COUNT(*)
    FROM   transaction_log tl,
           policy_coverage_component pcc, 
           policy p
    WHERE  tl.transaction_log_pk = pcc.transaction_log_fk
    AND    tl.transaction_status_code = ''COMPLETE''
    AND    tl.policy_fk = p.policy_pk
    AND    p.policy_cycle_code = ''POLICY''
    AND    p.pol_curr_status_code <> ''PENDING''
    AND    (pcc.effective_to_date < tl.effective_from_date or
            pcc.effective_from_date < tl.effective_from_date)
    AND    pcc.base_record_b = ''N''
    AND    pcc.record_mode_code = ''OFFICIAL''
    AND    NOT EXISTS
          (SELECT 1
           FROM   policy_coverage_component pcc1
           WHERE  pcc1.policy_cov_component_pk = pcc.pol_cov_comp_base_rec_fk
           AND    pcc1.transaction_log_fk <> pcc.transaction_log_fk)
    AND    NOT EXISTS (
           (SELECT ''X''
            FROM   Coverage_Relation cr, Coverage C 
            WHERE  cr.accounting_to_date = to_date(''01/01/3000'',''mm/dd/yyyy'')
            AND    cr.record_mode_code = ''OFFICIAL''
            AND    cr.cvg_relation_type_code = ''NOSE'' 
            AND    pcc.effective_from_date < c.effective_to_date 
            AND    pcc.effective_to_date > c.effective_from_date 
            AND    cr.coverage_child_fk = c.coverage_pk 
            AND    cr.coverage_parent_fk = c.coverage_base_record_fk 
            AND    c.coverage_base_record_fk = pcc.coverage_base_record_fk) )';

    EXECUTE IMMEDIATE v_sql_stmt INTO v_count;

    oasis_health_check_main.verify_count(v_level, v_sub_system, v_category, 
                        v_data_code, v_test_criteria_0, v_count, v_desc, 'rows', v_sql_stmt, v_run_code);
  END PM_017;

  PROCEDURE PM_018 IS
  BEGIN
    v_proc_name := 'PM_018';
    v_run_code := v_proc_name;
    v_desc := v_obj_name||'.'||v_proc_name||' - Trans_Applied_Term records that link to TEMP status PTH record';
    v_level := 'WARNING';
    pl('Checking for ' || v_desc || ' : ' || v_level);

    v_sql_stmt := 'SELECT COUNT(1)
    FROM   transaction_applied_term tat,
           policy_term_history      pth,
           transaction_log          tl, 
           policy                   p
    WHERE  pth.term_base_record_fk = tat.term_base_record_fk
    AND    tl.transaction_log_pk   = tat.transaction_log_fk
    AND    tl.policy_fk            = p.policy_pk
    AND    tat.init_term_b         = ''N''
    AND    pth.base_record_b       = ''N''
    AND    pth.record_mode_code    <> ''OFFICIAL''   
    AND    tl.transaction_status_code = ''COMPLETE''
    AND    p.policy_cycle_code     = ''POLICY''
    AND    p.pol_curr_status_code  <> ''PENDING''
    AND    NOT EXISTS 
           (SELECT 1
            FROM   policy_term_history pth1
            WHERE  pth1.term_base_record_fk = pth.term_base_record_fk
            AND    pth1.base_record_b = ''N''
            AND    pth1.record_mode_code = ''OFFICIAL'')
    -- Only look at premium bearing transactions
    AND    EXISTS 
           (SELECT 1 
            FROM   Policy_Premium_Net_V pp
            WHERE  pp.transaction_log_fk = tl.transaction_log_pk)';

    EXECUTE IMMEDIATE v_sql_stmt INTO v_count;

    oasis_health_check_main.verify_count(v_level, v_sub_system, v_category, 
                        v_data_code, v_test_criteria_0, v_count, v_desc, 'rows', v_sql_stmt, v_run_code);
  END PM_018;

  PROCEDURE PM_019 IS
  BEGIN
    v_proc_name := 'PM_019';
    v_run_code := v_proc_name;
    v_desc := v_obj_name||'.'||v_proc_name||' - Policy_Term_History records that have gap in accounting dates';
    v_level := 'WARNING';
    pl('Checking for ' || v_desc || ' : ' || v_level);

    v_sql_stmt := 'SELECT COUNT(1)
    FROM   policy_term_history pth,
           policy              p,
           policy_term_history pth1, --Closed record
           transaction_log     tl
    WHERE  p.policy_pk = pth.policy_fk
    AND    pth.official_record_fk = pth1.policy_term_history_pk
    AND    pth.term_base_record_fk = pth1.term_base_record_fk
    AND    pth1.transaction_log_fk = tl.transaction_log_pk
    AND    pth.base_record_b = ''N''
    AND    pth.record_mode_code = ''OFFICIAL''
    AND    p.policy_cycle_code = ''POLICY''
    AND    p.pol_curr_status_code <> ''PENDING''
    AND    tl.transaction_status_code = ''COMPLETE''
    AND    pth.accounting_from_date <> pth1.accounting_to_date';

    EXECUTE IMMEDIATE v_sql_stmt INTO v_count;

    oasis_health_check_main.verify_count(v_level, v_sub_system, v_category, 
                        v_data_code, v_test_criteria_0, v_count, v_desc, 'rows', v_sql_stmt, v_run_code);
  END PM_019;

  PROCEDURE PM_020 IS
  BEGIN
    v_proc_name := 'PM_020';
    v_run_code := v_proc_name;
    v_desc := v_obj_name||'.'||v_proc_name||' - Policy that have incorrect transaction accounting date';
    v_level := 'WARNING';
    pl('Checking for ' || v_desc || ' : ' || v_level);

    v_sql_stmt := 'SELECT COUNT(DISTINCT tl.policy_fk)
    FROM   ( SELECT MIN(t.transaction_log_pk) min_pk
             FROM   policy          p,
                    transaction_log t                
             WHERE  p.policy_cycle_code = ''POLICY''
             AND    p.pol_curr_status_code <> ''PENDING''
             AND    t.transaction_status_code = ''COMPLETE''
             AND    t.policy_fk = p.policy_pk
             GROUP  BY p.policy_pk ) a,
           transaction_log           tl,
           transaction_log           tl2
    WHERE  tl.transaction_log_pk = a.min_pk
    AND    tl2.policy_fk = tl.policy_fk
    AND    tl.transaction_status_code = ''COMPLETE''
    AND    tl2.transaction_status_code = ''COMPLETE''
    AND    tl2.accounting_date < tl.accounting_date
    AND    tl2.transaction_code <> ''ENDPOLADD''
    AND    tl2.transaction_type_code <> ''ENDORSE''';

    EXECUTE IMMEDIATE v_sql_stmt INTO v_count;

    oasis_health_check_main.verify_count(v_level, v_sub_system, v_category, 
                        v_data_code, v_test_criteria_0, v_count, v_desc, 'rows', v_sql_stmt, v_run_code);
  END PM_020;

  PROCEDURE PM_021 IS
  BEGIN
    v_proc_name := 'PM_021';
    v_run_code := v_proc_name;
    v_desc := v_obj_name||'.'||v_proc_name||' - Agent without proper row in ENTITY_ROLE table';
    v_level := 'WARNING';
    pl('Checking for ' || v_desc || ' : ' || v_level);

    v_sql_stmt:= 'SELECT COUNT(1)
    FROM   AGENT       a,
           entity      e
    WHERE  a.entity_fk = e.entity_pk
    AND    NOT EXISTS 
           (SELECT 1
            FROM   entity_role er
            WHERE  er.entity_fk = e.entity_pk
            AND    er.role_type_code = ''AGENT'')';

    EXECUTE IMMEDIATE v_sql_stmt INTO v_count;

    oasis_health_check_main.verify_count(v_level, v_sub_system, v_category, 
                        v_data_code, v_test_criteria_0, v_count, v_desc, 'rows', v_sql_stmt, v_run_code);
  END PM_021;

  PROCEDURE PM_022 IS
  BEGIN
    v_proc_name := 'PM_022';
    v_run_code := v_proc_name;
    v_desc := v_obj_name||'.'||v_proc_name||' - Policy term that eff from date is greater than eff to date';
    v_level := 'WARNING';
    pl('Checking for ' || v_desc || ' : ' || v_level);

    v_sql_stmt := 'SELECT count(*)
    FROM   policy_term_history pth, 
           policy              p
    WHERE  pth.policy_fk = p.policy_pk
    AND    p.policy_cycle_code = ''POLICY''
    AND    p.pol_curr_status_code <> ''PENDING''
    AND    pth.record_mode_code = ''OFFICIAL''
    AND    pth.effective_to_date < pth.effective_from_date';

    EXECUTE IMMEDIATE v_sql_stmt INTO v_count;

    oasis_health_check_main.verify_count(v_level, v_sub_system, v_category, 
                        v_data_code, v_test_criteria_0, v_count, v_desc, 'rows', v_sql_stmt, v_run_code);
  END PM_022;

  PROCEDURE PM_023 IS
  BEGIN
    v_proc_name := 'PM_023';
    v_run_code := v_proc_name;
    v_desc := v_obj_name||'.'||v_proc_name||' - Policy term that acct from date is greater than acct to date';
    v_level := 'WARNING';
    pl('Checking for ' || v_desc || ' : ' || v_level);

    v_sql_stmt := 'SELECT count(*)
    FROM   policy_term_history pth, 
           policy              p
    WHERE  pth.policy_fk = p.policy_pk
    AND    p.policy_cycle_code = ''POLICY''
    AND    p.pol_curr_status_code <> ''PENDING''
    AND    pth.record_mode_code = ''OFFICIAL''
    AND    pth.accounting_to_date < pth.accounting_from_date';

    EXECUTE IMMEDIATE v_sql_stmt INTO v_count;

    oasis_health_check_main.verify_count(v_level, v_sub_system, v_category, 
                        v_data_code, v_test_criteria_0, v_count, v_desc, 'rows', v_sql_stmt, v_run_code);
  END PM_023;

  PROCEDURE PM_024 IS
  BEGIN
    v_proc_name := 'PM_024';
    v_run_code := v_proc_name;
    v_desc := v_obj_name||'.'||v_proc_name||' - Policy prem that rate from date is greater than rate to date';
    v_level := 'WARNING';
    pl('Checking for ' || v_desc || ' : ' || v_level);

    v_sql_stmt := 'SELECT count(*)
    FROM   policy_premium_v ppv,
           transaction_log tl,
           policy          p
    WHERE  ppv.transaction_log_fk = tl.transaction_log_pk
    AND    tl.policy_fk = p.policy_pk
    AND    p.policy_cycle_code = ''POLICY''
    AND    p.pol_curr_status_code <> ''PENDING''
    AND    tl.transaction_status_code = ''COMPLETE''
    AND    ppv.record_mode_code = ''OFFICIAL''
    AND    ppv.RATE_PERIOD_TO_DATE < ppv.RATE_PERIOD_FROM_DATE';

    EXECUTE IMMEDIATE v_sql_stmt INTO v_count;

    oasis_health_check_main.verify_count(v_level, v_sub_system, v_category, 
                        v_data_code, v_test_criteria_0, v_count, v_desc, 'rows', v_sql_stmt, v_run_code);
  END PM_024;

  PROCEDURE PM_025 IS
  BEGIN
    v_proc_name := 'PM_025';
    v_run_code := v_proc_name;
    v_desc := v_obj_name||'.'||v_proc_name||' - Policy prem that acct from date is greater than acct to date';
    v_level := 'WARNING';
    pl('Checking for ' || v_desc || ' : ' || v_level);

    v_sql_stmt := 'SELECT count(*)
    FROM   policy_premium_v ppv,
           transaction_log tl,
           policy          p
    WHERE  ppv.transaction_log_fk = tl.transaction_log_pk
    AND    tl.policy_fk = p.policy_pk
    AND    p.policy_cycle_code = ''POLICY''
    AND    p.pol_curr_status_code <> ''PENDING''
    AND    tl.transaction_status_code = ''COMPLETE''
    AND    ppv.record_mode_code = ''OFFICIAL''
    AND    ppv.ACCOUNTING_TO_DATE < ppv.ACCOUNTING_FROM_DATE';

    EXECUTE IMMEDIATE v_sql_stmt INTO v_count;

    oasis_health_check_main.verify_count(v_level, v_sub_system, v_category, 
                        v_data_code, v_test_criteria_0, v_count, v_desc, 'rows', v_sql_stmt, v_run_code);
  END PM_025;

  PROCEDURE PM_026 IS
  BEGIN
    v_proc_name := 'PM_026';
    v_run_code := v_proc_name;
    v_desc := v_obj_name||'.'||v_proc_name||' - PM trans that Gross prem plus Comp do not equal to Net premium';
    v_level := 'WARNING';
    pl('Checking for ' || v_desc || ' : ' || v_level);

    v_sql_stmt := 'SELECT COUNT(*)
    FROM  (
          SELECT p.policy_no,
                 pp.policy_term_fk,
                 pp.transaction_log_fk,
                 SUM(decode(pp.coverage_component_code,''GROSS'',pp.premium_amount)) gross_premium,
                 SUM(DECODE(pp.coverage_component_code,''NETPREM'',pp.premium_amount)) net_premium,
                 SUM(DECODE(pp.coverage_component_code,''GROSS'',0,''NETPREM'',0,pp.premium_amount)) component_prem
          FROM  (SELECT t.policy_term_fk, t.transaction_log_fk, t.premium_amount,
                        t.coverage_component_code
                 FROM   policy_premium_net_v t
           WHERE  t.ACTIVE_PREMIUM_B = ''Y''
                 UNION ALL
                 SELECT t.policy_term_fk, t.transaction_log_fk, t.premium_amount,
                        t.coverage_component_code
                 FROM   policy_premium_trm_v t
           WHERE  t.ACTIVE_PREMIUM_B = ''Y'') pp,
                 policy_term_history  pth,
                 transaction_log      tl,
                 policy               p
          WHERE  pp.policy_term_fk = pth.policy_term_history_pk
          AND    p.policy_pk = pth.policy_fk
          AND    pp.transaction_log_fk = tl.transaction_log_pk  
          AND    p.policy_cycle_code = ''POLICY''
          AND    p.pol_curr_status_code <> ''PENDING''
          AND    tl.transaction_status_code = ''COMPLETE''
          GROUP  BY p.policy_no, pp.policy_term_fk, pp.transaction_log_fk
          HAVING (SUM(decode(pp.coverage_component_code,''GROSS'',pp.premium_amount)) +
                  SUM(DECODE(pp.coverage_component_code,''GROSS'',0,''NETPREM'',0,pp.premium_amount))) <> 
                  SUM(DECODE(pp.coverage_component_code,''NETPREM'',pp.premium_amount))
        )';

    EXECUTE IMMEDIATE v_sql_stmt INTO v_count;

    oasis_health_check_main.verify_count(v_level, v_sub_system, v_category, 
                        v_data_code, v_test_criteria_0, v_count, v_desc, 'rows', v_sql_stmt, v_run_code);
  END PM_026;

  PROCEDURE PM_027 IS
  BEGIN
    v_proc_name := 'PM_027';
    v_run_code := v_proc_name;
    v_desc := v_obj_name||'.'||v_proc_name||' - Records with invalid transaction fk in COVERAGE table';
    v_level := 'WARNING';
    pl('Checking for ' || v_desc || ' : ' || v_level);

    v_sql_stmt := 'SELECT COUNT(1)
    FROM   coverage c, 
           risk     r,
           policy   p
    WHERE  p.policy_pk = r.policy_fk
    AND    r.risk_pk = c.risk_base_record_fk
    AND    p.policy_cycle_code = ''POLICY''
    AND    p.pol_curr_status_code <> ''PENDING''
    AND    c.record_mode_code = ''OFFICIAL''
    AND    c.transaction_log_fk NOT IN
           (SELECT transaction_log_pk FROM transaction_log)';

    oasis_health_check_main.verify_count(v_level, v_sub_system, v_category, 
                        v_data_code, v_test_criteria_0, v_count, v_desc, 'rows', v_sql_stmt, v_run_code);
  END PM_027;

  PROCEDURE PM_028 IS
  BEGIN
    v_proc_name := 'PM_028';
    v_run_code := v_proc_name;
    v_desc := v_obj_name||'.'||v_proc_name||' - Records with invalid transaction fk in RISK table';
    v_level := 'WARNING';
    pl('Checking for ' || v_desc || ' : ' || v_level);

    v_sql_stmt := 'SELECT COUNT(1)
    FROM   risk r,
           policy   p
    WHERE  p.policy_pk = r.policy_fk
    AND    p.policy_cycle_code = ''POLICY''
    AND    p.pol_curr_status_code <> ''PENDING''
    AND    r.record_mode_code = ''OFFICIAL''
    AND    r.transaction_log_fk NOT IN
           (SELECT transaction_log_pk FROM transaction_log)';

    EXECUTE IMMEDIATE v_sql_stmt INTO v_count;

    oasis_health_check_main.verify_count(v_level, v_sub_system, v_category, 
                        v_data_code, v_test_criteria_0, v_count, v_desc, 'rows', v_sql_stmt, v_run_code);
  END PM_028;

  PROCEDURE PM_029 IS
  BEGIN
    v_proc_name := 'PM_029';
    v_run_code := v_proc_name;
    v_desc := v_obj_name||'.'||v_proc_name||' - Records with invalid transaction fk in POLICY_TERM_HISTORY table';
    v_level := 'WARNING';
    pl('Checking for ' || v_desc || ' : ' || v_level);

    v_sql_stmt := 'SELECT COUNT(1)
    FROM   policy_term_history pth, 
           policy  p
    WHERE  p.policy_pk = pth.policy_fk
    AND    p.policy_cycle_code = ''POLICY''
    AND    p.pol_curr_status_code <> ''PENDING''
    AND    pth.record_mode_code = ''OFFICIAL''
    AND    pth.transaction_log_fk NOT IN
           (SELECT transaction_log_pk FROM transaction_log)';

    oasis_health_check_main.verify_count(v_level, v_sub_system, v_category, 
                        v_data_code, v_test_criteria_0, v_count, v_desc, 'rows', v_sql_stmt, v_run_code);
  END PM_029;

  PROCEDURE PM_030 IS
  BEGIN
    v_proc_name := 'PM_030';
    v_run_code := v_proc_name;
    v_desc := v_obj_name||'.'||v_proc_name||' - Records with invalid transaction fk in POLICY_COVERAGE_COMPONENT table';
    v_level := 'WARNING';
    pl('Checking for ' || v_desc || ' : ' || v_level);

    v_sql_stmt := 'SELECT COUNT(1)
    FROM   policy_coverage_component pcc,
           coverage c, 
           risk     r,
           policy   p
    WHERE  p.policy_pk = r.policy_fk
    AND    r.risk_pk = c.risk_base_record_fk
    AND    c.coverage_pk = pcc.coverage_base_record_fk
    AND    p.policy_cycle_code = ''POLICY''
    AND    p.pol_curr_status_code <> ''PENDING''
    AND    pcc.record_mode_code = ''OFFICIAL''
    AND    pcc.transaction_log_fk NOT IN
           (SELECT transaction_log_pk FROM transaction_log)';

    EXECUTE IMMEDIATE v_sql_stmt INTO v_count;

    oasis_health_check_main.verify_count(v_level, v_sub_system, v_category, 
                        v_data_code, v_test_criteria_0, v_count, v_desc, 'rows', v_sql_stmt, v_run_code);
  END PM_030;

  PROCEDURE PM_031 IS
  BEGIN
    v_proc_name := 'PM_031';
    v_run_code := v_proc_name;
    v_desc := v_obj_name||'.'||v_proc_name||' - Records with incorrect transaction fk in POLICY_COVERAGE_COMPONENT table';
    v_level := 'WARNING';
    pl('Checking for ' || v_desc || ' : ' || v_level);

    v_sql_stmt := 'WITH x AS (
           SELECT pcc.coverage_base_record_fk, MIN(pcc.transaction_log_fk) min_trans_fk
           FROM   policy_coverage_component pcc, 
                  coverage                  c,
                  risk                      r,
                  policy                    p
           WHERE  pcc.record_mode_code = ''OFFICIAL''
           AND    pcc.coverage_base_record_fk = c.coverage_pk
           AND    c.risk_base_record_fk = r.risk_pk
           AND    r.policy_fk = p.policy_pk
           AND    p.policy_cycle_code = ''POLICY''
           AND    p.pol_curr_status_code <> ''PENDING''
           GROUP  BY pcc.coverage_base_record_fk), 
         y AS (
           SELECT c.coverage_base_record_fk, MIN(c.transaction_log_fk) min_trans_fk
           FROM   coverage c, 
                  risk     r,
                  policy   p
           WHERE  c.record_mode_code = ''OFFICIAL''
           AND    c.risk_base_record_fk = r.risk_pk
           AND    r.policy_fk = p.policy_pk
           AND    p.policy_cycle_code = ''POLICY''
           AND    p.pol_curr_status_code <> ''PENDING''
           GROUP  BY c.coverage_base_record_fk)
    SELECT COUNT(1)
    FROM   x, y
    WHERE  x.coverage_base_record_fk = y.coverage_base_record_fk
    AND    x.min_trans_fk < y.min_trans_fk';

    EXECUTE IMMEDIATE v_sql_stmt INTO v_count;

    oasis_health_check_main.verify_count(v_level, v_sub_system, v_category, 
                        v_data_code, v_test_criteria_0, v_count, v_desc, 'rows', v_sql_stmt, v_run_code);
  END PM_031;

  PROCEDURE PM_032 IS
  BEGIN
    v_proc_name := 'PM_032';
    v_run_code := v_proc_name;
    v_desc := v_obj_name||'.'||v_proc_name||' - Records with incorrect transaction fk in COVERAGE table';
    v_level := 'WARNING';
    pl('Checking for ' || v_desc || ' : ' || v_level);

    v_sql_stmt := 'WITH x AS (
           SELECT c.risk_base_record_fk, MIN(c.transaction_log_fk) min_trans_fk
           FROM   coverage c, 
                  risk     r,
                  policy   p
           WHERE  c.record_mode_code = ''OFFICIAL''
           AND    c.risk_base_record_fk = r.risk_pk
           AND    r.policy_fk = p.policy_pk
           AND    p.policy_cycle_code = ''POLICY''
           AND    p.pol_curr_status_code <> ''PENDING''
           GROUP  BY c.risk_base_record_fk), 
         y AS (
           SELECT r.risk_base_record_fk, MIN(r.transaction_log_fk) min_trans_fk
           FROM   risk     r,
                  policy   p
           WHERE  r.record_mode_code = ''OFFICIAL''
           AND    r.policy_fk = p.policy_pk
           AND    p.policy_cycle_code = ''POLICY''
           AND    p.pol_curr_status_code <> ''PENDING''
           GROUP  BY r.risk_base_record_fk)
    SELECT COUNT(1)
    FROM   x, y
    WHERE  x.risk_base_record_fk = y.risk_base_record_fk
    AND    x.min_trans_fk < y.min_trans_fk';

    EXECUTE IMMEDIATE v_sql_stmt INTO v_count;

    oasis_health_check_main.verify_count(v_level, v_sub_system, v_category, 
                        v_data_code, v_test_criteria_0, v_count, v_desc, 'rows', v_sql_stmt, v_run_code);
  END PM_032;

  /**************************************************************************
  * Main
  ***************************************************************************/
  PROCEDURE main IS
  BEGIN
    BEGIN
      oasis_health_check_main.check_parms('INFO', v_sub_system, 'PM_SYS_PARM', pm_sys_parms);
      --Policy data checks
      PM_001();
      PM_002();
      PM_003();
      PM_004();
      PM_005();
      PM_006();
      PM_007();
      PM_008();
      PM_009();
      PM_010();
      PM_011();
      PM_012();
      PM_013();
      PM_014();
      PM_015();
      PM_016();
      PM_017();
      PM_018();
      PM_019();
      PM_020();
      PM_021();
      PM_022();
      PM_023();
      PM_024();
      PM_025();
      PM_026();
      PM_027();
      PM_028();
      PM_029();
      PM_030();
      PM_031();
      PM_032();
    END;
  END main;

  BEGIN
    g_trace := FALSE;

  EXCEPTION
    WHEN OTHERS THEN
      g_date_format := 'YYYY-MM-DD';
END oasis_health_check_policy;
/
