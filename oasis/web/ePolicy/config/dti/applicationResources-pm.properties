# {0} rownum
# {1} fieldName
# {2} minValue
# {3} maxValue
pm.common.numberOutOfRange.error=Row {0}: Invalid data.  The value of {1} should be no less than {2} and no more than {3}.
# {0} warning message
pm.common.warning.message={0}
pm.common.warning.error = Unable to get warning message. Please contact your system administrator.
# For Find Policy
pm.findpolicy.sample=This is a sample information message that appears all time in find policy web page.
## {0} user view name
pm.maintainUserView.create.warning=You have changed the name of the user view. Click OK to create a new user view or click Cancel to change the name of the existing user view to {0}.
## {0} user view name
pm.maintainUserView.delete.warning=Do you want to delete the user view named {0}?
## {0} user view name
pm.maintainUserView.overwrite.warning=The user view {0} already exists, Do you want to overwrite it?
pm.maintainUserView.lengthCheck.warning=The length of user view name should not be more than 30.
pm.maintainUserView.blank.warning=Please input user view name.
## {0} oracle return error message
pm.userview.validateAdditionalSql.error={0}
## {0} policy no
pm.findpolicy.noData.msg=Policy {0} does not exist. Please verify the policy number and try again.

pm.findPolicyAction.findPolicyList.results.header=Policy Count:
pm.findPolicyAction.findPolicyList.criteria.header=Search Criteria
pm.findPolicy.processMailing.noSelection.error=No policies checked for processing.
pm.findPolicy.processQuestionnaire.noSelection.error=No policies checked for processing.
pm.findPolicy.processQuestionnaire.done.info=Questionnaire request has been submitted.
pm.findPolicy.mutuallyExclusive.conditions.error=Two conditions \\"Only Display Latest Term=Yes\\" and \\"Term Status=Work in Progress Only\\" are mutually exclusive.
# {0}{1} It is string parameter which can be either "policy holder" or "risk"
pm.findPolicy.invalidEntityName.warning=The {0} name hasn't been verified. System will clear the {1} name. Do you want to continue?
pm.findPolicy.findPolicyList.noDataFound.error=No Data Found.


# For Policy Header
pm.policyHeader.header=Policy Information
pm.policy.policySummary.header=Policy List
# For Maintain Policy page
pm.maintainPolicy.policyForm.header=Policy Detail
pm.maintainPolicy.verifyPolicyNo.accountExists.error=Cannot change policy # if billing account has already been setup.

## {0} policy #
pm.maintainPolicy.verifyPolicyNo.policyNoExists.error=Policy # {0} is already in use.

## {0} policy #
pm.maintainPolicy.verifyPolicyNo.policyNoExistsAsAccount.error=Policy # {0} is already in use by an account.
pm.maintainPolicy.invalidIbnrChange.error=Rolling IBNR date can only be changed effective the start date of the policy.
pm.maintainPolicy.missingOoseTermExpDate.error=OOSE Term expiration date must be entered.
pm.maintainPolicy.invalidOoseTermExpDate.error=Invalid Data.  OOSE Term change expiration date can be set to current or future term expiry dates.

pm.maintainPolicy.copyPolicyToQuote.deriveQuoteNo.error = Unable to derive new quote number. Please contact your system administrator.
pm.maintainPolicy.copyPolicyToQuote.error = Unable to copy to quote. Please contact your system administrator.
## {0} error message
pm.maintainPolicy.lockpolicy.error={0}
pm.maintainPolicy.clickOk.changesSave.confirm=Policy page changed, Do you want to save it to proceed?

# For OOSE Risk/Coverage/Class/Component
## {0} row number
## {1} risk/coverage/coverage calss
pm.oose.modified.record.exist.error=Row {0}: Invalid Operation.  Cannot make multiple changes to the same {1}.

## {0} risk/coverage/coverage calss
pm.oose.modified.record.exist.error2=Invalid Operation.  Cannot make multiple changes to the same {0}.

# For Maintain Risk page
pm.maintainRisk.riskList.header=Risk List
pm.maintainRisk.riskForm.header=Risk Information
pm.maintainRisk.countyCode.warning=You have changed the risk's county. Please remember to change the corresponding address through the Client Management function.
pm.maintainRisk.ooseRisk.changeOption.error=You have no privilege to change the risk.
pm.maintainRisk.unsaved.changes.insuredTracking.error=Changes must be saved prior to accessing Insured Tracking.
pm.maintainRisk.auto.delete.coverage.confirmation=Existing coverage will be deleted, continue?

# For View Risk Summary page
pm.viewRiskSummary.riskList.header=Risk List

# For View Risk Detail page
pm.maintainRiskDetail.riskForm.header=Risk Information

# For Search Risk page
pm.findRiskList.searchCriteria.header=Enter Search Criteria
pm.findRiskList.riskList.header=Matches
pm.searchRisk.noSearchCriteria.error=To search please enter minimally the last name for the individual or the organization name.
pm.searchRisk.personAndOrganization.error=Both an organization and person name has been entered. Only one name can be searched at a time.
pm.searchRisk.onlyFirstName.error=To search please enter minimally the last name for an individual or the organization name.
pm.searchRisk.noMatchFound.error=No match found.
pm.existingRisk.missing.error=Invalid Operation.Please select at least one risk.
## {0} row number
pm.maintainRisk.effectiveToDate.error=Row {0}: The risk effective to date cannot be changed.

## {0} row number
## {1} number field
pm.maintainRisk.numberField.error=Row {0}: {1} cannot be negative.
pm.maintainRisk.squareFootage.error=Row {0}: Square Footage must be between 0 and 999999999.
pm.maintainRisk.IBNR.error=Row {0}: Rolling IBNR indicator can only be changed effective the start date of the risk.
pm.maintainRisk.noRisk.error=No risk exists. Please add a risk first.
pm.maintainRisk.noPrimaryRisk.warning=Primary risk does not exist, please add or select a risk first.
pm.maintainRisk.noRiskOrCoverage.error=No risk or coverage exists. Please add it first.
# For Maintain Coverage page
pm.maintainCoverage.coverageList.header=Coverage List for
pm.maintainCoverage.coverageForm.header=Coverage Information

## {0} row number
## {1} policy expiration date
pm.maintainCoverage.expirationDate.ooswip.error=Row {0}: Invalid Date. Retroactive date cannot be changed unless the expiration date is {1}.

## {0} row number
## {1} error message
pm.maintainCoverage.retroactiveDate.rule1.error=Row {0}: Invalid Date. {1}

## {0} row number
## {1} policy expiration date
pm.maintainCoverage.retroactiveDate.rule4.error=Row {0}: Invalid Date. Retroactive date cannot be changed unless expiration date is {1}.
## {0} transaction effective from date
## {1} policy expiration date
pm.maintainCoverage.effToDate.oosRange.error=Expiration date must be within {0} and {1}.

pm.maintainCoverage.priorActsExists.warning=Changing the retroactive date may cause prior acts information to be deleted. Do you wish to continue?

## {0} row number
pm.maintainCoverage.annualBaseRate.error=Row {0}: Invalid Data. The annual base rate cannot be negative.
pm.maintainCoverage.effectiveToDate.required.error = Row {0}: The coverage effective to date is required.

## {0} row number
pm.maintainCoverage.excessPayor.error=Row {0}: Changing the excess payor, please review the billing setup.

pm.maintainCoverage.excessPayor.warning=Changing the excess payor, please review the billing setup.
pm.maintainCoverage.ooseCovg.changeOption.error=You have no privilege to change the coverage.
pm.maintainCoverage.effectiveToDate.error=Row {0}: The coverage effective to date cannot be changed.
pm.maintainCoverage.ibnrEffFromDate.required.error=Row {0}: The original coverage effective date is required.
pm.maintainCoverage.ibnrEffToDate.required.error=Row {0}: The original coverage expiration date is required.
pm.maintainCoverage.ibnrEffFromDateAfterRetroDate.error=Row {0}: The retroactive date of the IBNR coverage should be prior to or equal to the original coverage effective date.
pm.maintainCoverage.ibnrEffToDateBeforeCovgEffDate.error=Row {0}: The original coverage expiration date should be prior to or equal to the IBNR coverage effective date.
pm.maintainCoverage.ibnrEffFromDateBeforeIbnrEffToDate.error=Row {0}: The original coverage effective date should be prior to the original coverage expiration date.

pm.addCoverage.missingRisk.error=Invalid Operation.  Please select a Risk first.
pm.addCoverage.missingPracticeState.error=Invalid Operation.  Please select a risk practice state first.
pm.addCoverage.noselection.error=Please make at least one selection.
pm.addCoverage.nodata.error=No available coverages for this risk.

## {0} first row number
## {1} second number
## {2} coverage code
pm.addCoverage.duplicateCoverage.error=Row {0} and {1} overlap: Coverage {2}.

#Display the validation error message which returned from backend.
pm.common.invalid.data=Invalid Data. {0}.

## {0} coverage code
pm.addCoverage.duplicateCoverage.exist.error=Invalid Operation. Coverage {0} already exists for this risk.

## {0} row number
## {1} coverage code
pm.addCoverage.coverageEffectiveDate.error=Invalid Operation. Coverage {1} cannot be added prior to the risk effective date of {2}
pm.addCoverage.coverageEffectiveDate.error2=Row {0}: Invalid Operation. Coverage {1} cannot be added prior to the risk effective date of {2}

pm.selectCoverage.header=Coverage List
pm.selectCoverage.coverage.detail.header=Coverage Detail

# For Maintain Coverage Component layer (in Coverage page)
pm.maintainCoverage.componentList.header=Deductible/Discount/Surcharge
pm.maintainCoverage.componentForm.header=Component Information

## {0} row number
## {1} coverage code
## {2} component description
pm.maintainComponent.effectiveToDate.rule1.error=Row {0}: Invalid Operation for Coverage {1}, Component {2} expiration date.  Only one edit for either component value or expiration date allowed.
pm.maintainComponent.effectiveToDate.rule4.error=Row {0}: Invalid Operation for {1}, Component {2} expiration date.  Cannot change existing component dates for records prior to the transaction effective date.
pm.maintainComponent.effectiveToDate.rule5.error=Row {0}: Invalid Operation for {1}, Component {2} expiration date.  Expiration date cannot be before transaction effective date.
pm.maintainComponent.effectiveToDate.rule6.error=Row {0}: Invalid Operation for {1}, Component {2} expiration date.  Expiration date cannot be after the cancellation date.
pm.maintainComponent.effectiveToDate.rule7.error=Row {0}: Invalid Operation for {1}, Component {2} expiration date.  Expiration date cannot be after term expiration date.
pm.maintainComponent.effectiveToDate.rule8.error=Row {0}: Invalid Operation for {1}, Component {2} expiration date.  Expiration date cannot be after coverage expiration date.
pm.maintainComponent.effectiveToDate.rule9.error=Row {0}: Invalid Operation for {1}, Component {2} expiration date.  Expiration date cannot be empty.
pm.maintainComponent.suspension.effectiveToDate.info=Row {0}: Please adjust {1} discount period if necessary.
pm.maintainComponent.newDoctor.cycleDate.error=Row {0}: Invalid Operation for {1}, Component {2}.  Cycle begin date cannot be after the component effective date.
pm.maintainComponent.componentValue.null.error=Row {0}: Invalid Operation for {1}, Component {2}.  Component value is required.

## {0} component description
pm.maintainComponent.add.suspension.effectiveToDate.info=Please adjust {0} discount period if necessary.

## {0} row number
## {1} coverage code
## {2} component description
## {3} expiration date
pm.maintainComponent.newDoctor.effectiveToDate.error=Row {0}: Invalid Operation for {1}, Component {2}.  Expiration date cannot be greater than {3}.
pm.maintainComponent.oose.changeDate.effectiveToDate.error=Row {0}: Invalid Operation for {1}, Component {2}.  Expiration date cannot be changed to {3} which is later than current term's expiring date in OOSE initial term when future version existed. Please do it in future term.

## {0} row number
## {1} coverage code
## {2} component description
## {3} cycle years
## {4} effective from date
pm.maintainComponent.newDoctor.cycleDate.exceed.error=Row {0}: Invalid Operation for {1}, Component {2}.  Cycle begin date cannot be more than {3} years before the effective date of {4}.

## {0} row number
## {1} coverage code
## {2} short description
## {3} current cycle date
pm.maintainComponent.newDoctor.cycleDate.equal.error=Row {0}: Invalid Operation for {1}, Component {2}.  Cycle begin date should be after {3}. No flat discount is allowed.

## {0} row number
## {1} coverage code
## {2} component description
## {3} low value
## {4} high value
pm.maintainComponent.componentValue.outofRange.error=Row {0}: Invalid Operation for {1}, Component {2}.  Component must be between {3} and {4}.

# For Add New Component page
pm.addComponent.nodata.error=No available components for this coverage.
pm.addComponent.partTime.component.info=You have added Part Time component(s). Be sure to add notes if applicable.

## {0} short description
pm.addComponent.cycled.component.info=No cycle information found for {0}. Expiration date will be set to Effective Date.

pm.addComponent.noSelection.error=Please select at least one component.
pm.addComponent.noCoverage.error=Please enter coverage information first.
pm.addComponent.duplicated.error = Invalid Operation. Component {0} already exists for this coverage.

# For View cycle Detail in Component page
pm.cycleDetail.nodata.error=No data found.
pm.cycleDetail.cycleDate.missing=Invalid Operation. Cycle begin date is required.

# For Surcharge Points in Component page
## {0} row no
pm.surchargePoints.overridePoints.error=Row {0}: Override Points must be integer.

pm.maintainSurchargePoints.page.header=Surcharge Points
pm.maintainSurchargePoints.form.header=Details
pm.maintainSurchargePoints.nodata.error=No data found.
# For Surcharge Points in Risk page
pm.maintainRiskSurchargePoints.page.header=Claims Snapshot
pm.maintainRiskSurchargePoints.saved.date.failed=Could not save the changes.

#For Experience Component
pm.processExperienceComponent.search.header=Search Criteria
pm.processExperienceComponent.list.header=Policy List
pm.processExperienceComponent.abandonProcessExperience=Do you want to process experience for selected date range?
pm.processExperienceComponent.process.success=Processed Successfully
pm.processExperienceComponent.fromDateAfterTo=Start Date must be the same as or after the end date.
pm.processExperienceComponent.process.error=Errors occurred while processing the component.
pm.processExperienceComponent.process.nodata=No policies selected for the search criteria entered.
pm.processExperienceComponent.process.noteligible=Some policies are not eligible.

# For Maintain Coverage class page
pm.maintainCoverageClass.coverageClassList.header=Coverage Class List for
pm.maintainCoverageClass.coverageClassForm.header=Coverage Class Information
pm.maintainCoverageClass.effectiveToDate.error=Expiration date cannot be prior to or equal to effective date.
pm.addCoverageClass.missingCoverage.error=Invalid Operation.  Please select a Coverage first.
pm.addCoverageClass.noselection.error=Please make at least one selection.
pm.addCoverageClass.nodata.error=No available coverage class for this
pm.maintainCoverageClass.ooseCovgClass.changeOption.error=You have no privilege to change the coverage class.

# For Select Coverage Class
pm.selectCoverageClass.header=Coverage Class List
pm.selectCoverageClass.detail.header=Coverage Class Detail

## {0} coverage class code
pm.addCoverageClass.duplicateCoverageClass.error=Invalid Operation.  Coverage Class {0} already exists for this coverage.

## {0} row number
## {1} product Coverage Class Code
## {2} Coverage Effective Date
pm.addCoverageClass.covgClassFromDate.error=Invalid Operation.  Coverage Class {1} cannot be added prior to the coverage effective date of {2}.
pm.addCoverageClass.covgClassFromDate.error2=Row {0}:Invalid Operation.  Coverage Class {1} cannot be added prior to the coverage effective date of {2}.
pm.maintainCoverageClass.expUnit.decimalPlace.error=Row {0}: Invalid Data. Exp Unit cannot be more than two decimal places.

## {0} first row number
## {1} second row number
## {2} coverage class
pm.addCoverageClass.duplicateCoverageClass.error2=Row {0} and {1} overlap: Coverage Class {2}.

# For Maintain Underwriter page
pm.maintainUnderwriter.addlPolicyInfo.header=Additional Policy Info
pm.maintainUnderwriter.underwriterList.header=Underwriting Team Member
pm.maintainUnderwriter.underwriterForm.header=Underwriting Team Member Information

pm.addUnderwriter.addForm.header=Underwriter Information
## {0} row number
pm.maintainUnderwriter.invalidEffectiveToDate.error=Row {0}: End Date cannot be before Start Date.
pm.maintainUnderwriter.required.error=Row {0}: {1} is required.
pm.maintainUnderwriter.invalidSelectedEntity.error=Please select a valid entity for the policy.
## {0} row number
## {1} term effective from date
## {2} term effective to date
pm.maintainUnderwriter.outsideTermDates.error=Row {0}: Start/End Date must be within term effective period {1} - {2}.

## {0} term effective from date
pm.maintainUnderwriter.invalidPeriodStartDate.error=Invalid Data.  Underwriter effective period should start {0}.
pm.maintainUnderwriter.invalidPeriodEndDate.error=Invalid Data.  Underwriter effective period must include entire term.
pm.maintainUnderwriter.invalidContinuity.error=Invalid Data.  {2} time period cannot have a lapse or overlap, please check row {0} and row {1}.

pm.maintainUnderwriter.expireOtherRoles.confirm=Do you wish to reassociate the policy with Team {0} members?
pm.maintainUnderwriter.addUnderwriter.indicator=Underwriter can only be added by clicking Add Underwriter button.

pm.maintainUnderwriter.invalidUnderwriterEntity.error=Invalid underwriter entity Id in policy {0}.
pm.maintainUnderwriter.invalidUnderwriterEntityId.required=Invalid Data. Underwriter entity Id is required in policy {0}

pm.maintainUnderwriter.addUnderwriter.addTeamB=No team configured for this underwriter.
pm.maintainUnderwriter.duplicateUnderwriter.error=Duplicate underwriter for same time period for future terms.

pm.maintainUnderwriter.changeUnderwriter.error=Underwriter type and start date can not be changed for entity {0}.

# For Maintain Speical Handling page
pm.maintainSpecialHandlingInfo.header=Special Handling
pm.maintainSpecialHandling.specialHandlingList.header=Special Handling List
pm.maintainSpecialHandling.specialHandlingForm.header=Special Handling Information

# For Maintain Reinsurance page
pm.maintainReinsurance.reinsuranceList.header=Reinsurance List
pm.maintainReinsurance.reinsuranceForm.header=Reinsurance Detail
pm.maintainReinsurance.invalidParticipationPercent=Participation percent must between 0% and 100%.

# For Limit Sharing page
pm.maintainLimitShareing.sharedGroupList.header=Shared Groups
pm.maintainLimitSharing.sharedDetailList.header=Shared Group Details
pm.maintainLimitSharing.sharedGroupForm.header=Shared Group Information
pm.maintainLimitSharing.sharedDetailForm.header=Shared Detail Information
pm.maintainLimitSharing.separateLimits.header=Separate Limits
pm.maintainLimitSharing.deleteSharedGroup.error=Please delete group detail records first.
pm.maintainLimitSharing.modifyDetailExpDate.warning=Expiring the group will automatically expire the group details.  Do you wish to continue?
pm.maintainLimitSharing.deleteDetailsAndGroup.warning=Do you want to delete the shared group and all its details?

# For premium adjustment page
pm.maintainPremiumAdjustment.coverageList.header=Risk/Coverage Information
pm.maintainPremiumAdjustment.premiumAdjustmentForm.header=Premium Adjustment Information
pm.maintainPremiumAdjustment.premiumAdjustmentList.header=Premium Adjustment
pm.maintainPremiumAdjustment.save.error=Save premium adjustment failed. Please contact your system administrator.
pm.maintainPremiumAdjustment.save.success=Premium adjustment has been saved successfully.

# For select shared detail page
pm.addSharedDetail.noSelection.error=Please select at least one shared detail.
pm.addSharedDetail.noData.error=No available shared detail data.

#For policy mailing page
pm.maintainPolicyMailing.searchMailing.header=Filter Criteria
pm.maintainPolicyMailing.searchRecipient.header=Find Recipient
pm.maintainPolicyMailing.mailingEventList.header=Mailing Events
pm.maintainPolicyMailing.mailingEventForm.header=Event Information
pm.maintainPolicyMailing.mailingAttributeList.header=Mailing Attributes
pm.maintainPolicyMailing.mailingAttributeForm.header=Attribute Information
pm.maintainPolicyMailing.mailingRecipientList.header=Mailing Recipients
pm.maintainPolicyMailing.mailingRecipientForm.header=Recipient Information
pm.maintainPolicyMailing.RecipientList.header=Recipient List
pm.maintainPolicyMailing.RecipientList.abortSort.header=Search aborted because mailing recipient list is too large.  First {0} recipients listed.
pm.selectMailingType.noSelection.error=Please select a mailing type first.
pm.maintainPolicyMailing.unsavedData.error=Changes exist and will be lost. Do you wish to continue?
pm.maintainPolicyMailing.undeletedMailingAttribute.error=Please delete mailing attribute first.
pm.maintainPolicyMailing.undeletedMailingRecipient.error=Please delete mailing recipient first.
pm.maintainPolicyMailing.recipientNotFound.error=Recipient not found.
pm.maintainPolicyMailing.reprintFail.error=Failed to reprint mailing list. Please contact your system administrator.

# {1} - return message from generate mailing procedure
pm.maintainPolicyMailing.generateFail.error={1}
pm.maintainPolicyMailing.generateSuccess.info={1}

pm.maintainPolicyMailing.reprintSuccess.info=This mailing event has been reprinted successfully.
pm.maintainPolicyMailing.postGenNotAvailable.error=Post Generate is only available to event that has not been generated.
pm.maintainPolicyMailing.deleteAttributeAfterGenerated.error=Mailing Event Attributes cannot be deleted after the event has been generated.
pm.maintainPolicyMailing.reprintProcess.info=Reprinting...
pm.maintainPolicyMailing.generateProcess.info=Generating...
pm.maintainPolicyMailing.InvalidPolicyNo.error= Invalid Policy #.
pm.selExludedPolicy.noSelection.error=Please select at least one policy.
pm.selExludedPolicy.excludePolicy.warning=policy(s) will be deleted from the recipient list.
pm.generatePolicyMailing.noPolicy.error=No policies in the mailing event.
pm.maitainolicyMailing.unsavedData.error=Unsaved data exists, please save first.

# {0} field name
pm.maintainPolicyMailing.fieldRequried.error={0} is required.
pm.maintainPolicyMailing.unCompeletedData.error=You must complete or delete current Mailing Event data before you select another event: {0} is required.
# {0} policy no
pm.policyMailing.validateRecipient.error=Policy {0} is(are) invalid.

pm.selExcludedPolicy.header.info=The following policies have been sent this mailing {0} days ago. Please select the policies to be excluded from the mailing by selecting the rows.

pm.maintainPolicyMailing.mailingErrorList.header=Mailing Generation Errors

# For Product Mailing
pm.maintainProductMailing.header=Product Mailing
pm.maintainProductMailing.information=Product Mailing Information
pm.maintainProductMailing.required.error=Row {0}: {1} is required.
pm.maintainProductMailing.date.error=Row {0}: Invalid data. Expiration date cannot be less than effective date.

## {0} row number
pm.maintainReinsurance.invalidEffectiveToDate.error=Row {0}: Invalid data.  End Date cannot be prior to Start Date.
## {0} row number
pm.maintainLimitSharing.invalidSharedGroupEffectiveToDate.error= Row {0}: Invalid data.  Expiration date cannot be less than effective date.
pm.maintainLimitSharing.invalidSharedDtlEffectiveToDate.error= Row {0}: Invalid data.  Expiration date cannot be less than effective date.
pm.maintainLimitSharing.shareDtlExpDateAfterGroupDate.error= Row {0}: Invalid data.  Expiration date cannot be greater than the group's expiration date.
pm.maintainReinsurance.invalidCollateralEffDate.confirm = Collateral date is prior to policy effective date. Do you with to continue?

## {0} row number
## {1} group number
## {2} additional text for sir
pm.maintainLimitSharing.shareOptionNotSelected.error= Row{0}: Invalid data. Either Share Limits or Share Deduct{2} should be checked for group {1}.
pm.maintainLimitSharing.InvalidRenewalIndShareGroup.error=Row{0}: Invalid data.  At least one of the detail records should be set to renew for group {1} since the group is set to renew.

## {0} row number
## {1} risk name
## {2} coverage desc
## {3} group number
pm.maintainLimitSharing.OverLapSourceWithinSameGroup.error=Row{0}: Invalid data.  Time period cannot overlap for risk {1} and coverage {2} in group number {3}.
pm.maintainLimitSharing.InvalidRenewalIndShareDetail.error=Row{0}: Invalid data.  The renewal indicator for risk {1} and coverage {2} in group number {3} must be set to 'No' since the group is set to not renew.

## {0} risk name
## {1} coverage desc
pm.maintainLimitSharing.OverLapSourceWithinTwoGroup.error=Invalid data.  Same risk {0} and coverage {1} cannot exist in multiple groups with the same share type.

## {0} row number
## {1} group number
pm.maintainLimitSharing.noOwnerExistsForSharedGroup.error=Row{0}: Invalid Data - Group #{1}.  Owner record must be defined for the group.
pm.maintainLimitSharing.ownerExistsPartPeriodOfSharedGroup.error=Row{0}: Invalid Data - Group #{1}.  Owner record must exist for the entire period of the group.
pm.maintainLimitSharing.OverLapOwnersForOneGroup.error=Row{0}: Invalid Data.  There are overlapping owner records for shared group # {1}.
pm.maintainLimitSharing.GapBetweenOwnersForOneGroup.error=Row{0}: Invalid Data.  There is a gap in owner records for shared group # {1}.

pm.maintainLimitSharing.InvalidDedutibleShareGroup.error=Row{0}: Invalid Data - Group #{1}. {2}
pm.maintainLimitSharing.InvalidSirShareGroup.error=Row{0}: Invalid Data - Group #: {1}, The attachment point should be the same for all coverages that are sharing SIR.
pm.maintainLimitSharing.InvalidShareLimitGroup.error=Row{0}: Invalid Data - Group #{1}. {2}
## {0} row number
## {1} group number
## {2} risk name
pm.maintainLimitSharing.InvalidLimitsShareGroup.error=Row{0}: Invalid Data - Group #: {1},{2}. Cannot share the limits as the share limit indicator is not setup on the coverage to share the limit.
## {0} row number
## {1} group number
## {2} error message returned by backend procedure
pm.maintainLimitSharing.noSirComponent.error=Row{0}: Invalid Data - Group #{1}. {2}
## {0} row number
pm.maintainSpecialHandling.startDateOutsideTermDates.error=Row {0}: Invalid Data.  Start Date must be within the term period.
pm.maintainSpecialHandling.endDateOutsideTermDates.error=Row {0}: Invalid Data.  End Date must be within the term period.
pm.maintainSpecialHandling.invalidEffectiveToDate.error=Row {0}: Invalid data.  End Date cannot be prior to Start Date.

# For Maintain Additional Insured page
pm.maintainAdditionalInsured.header=Additional Insured
pm.maintainAdditionalInsured.additionalInsuredList.header=Additional Insured List
pm.maintainAdditionalInsured.additionalInsuredForm.header=Additional Insured Information
pm.maintainAdditionalInsured.coverageData.header=Coverage Data
pm.maintainAdditionalInsured.save.error = Error saving additional insured information.Please contact your system administrator.
## {0} row number
pm.maintainAdditionalInsured.startDateOutsideTermDates.error=Row {0}: Invalid Data.  Start Date must be within the term period {1} - {2}.
pm.maintainAdditionalInsured.endDateOutsideTermDates.error=Row {0}: Invalid Data.  End Date must be within the term period {1} - {2}.
pm.maintainAdditionalInsured.invalidEffectiveToDate.error=Row {0}: Invalid data.  End Date cannot be prior to Start Date.
pm.maintainAdditionalInsured.startDate.required.error=Row {0}: Invalid Data. Start Date is required.
pm.maintainAdditionalInsured.endDate.required.error=Row {0}: Invalid Data. End Date is required.
pm.maintainAdditionalInsured.type.required.error=Row {0}: Invalid Data. Type is required.

## {0} first row number
## {1} second row number
pm.maintainAdditionalInsured.invalidContinuityForRisk.error=Invalid Data. Row {0} and {1} have same name, type, address and attached risk, date range cannot overlap.
## {0} first row number
## {1} second row number
pm.maintainAdditionalInsured.invalidContinuityForType.error=Invalid Data. Row {0} and {1} have same name and type, date range cannot overlap.

# For Maintain Employed Physician page
pm.maintainEmployedPhysician.header=Employed Physician
pm.maintainEmployedPhysician.additionalInsuredList.header=Employed Physician List
pm.maintainEmployedPhysician.additionalInsuredForm.header=Employed Physician Information
pm.maintainEmployedPhysician.noData.error = There are no FTE relationships established for this policy.
pm.maintainEmployedPhysician.selRisk.noSelection = Invalid Operation, Please select a risk.
pm.maintainEmployedPhysician.hospitalLayer.header = Hospital Info
pm.maintainEmployedPhysician.grid.header = Employed Physician List
pm.maintainEmployedPhysician.detail.header = Employed Physician Info

## {0} first row number
pm.maintainEmployedPhysician.fullTimeHours.required.error = Row {0}: Invalid data.Please enter Hospital Full Time Hours first.
pm.maintainEmployedPhysician.fullTimeEquivalent.required.error = Row {0}: Invalid data.Please enter Hospital Full Time Equivalent first.
pm.maintainEmployedPhysician.partTimeHours.required.error = Row {0}: Invalid data.Please enter Hospital Part Time Hours first.
pm.maintainEmployedPhysician.perDiemHourst.required.error = Row {0}: Invalid data.Please enter Hospital Per Diem Hours first.
pm.maintainEmployedPhysician.entity.required.error = Row {0}: Please enter a value for FTE.
#risk name
pm.maintainEmployedPhysician.entity.error = Please enter a value for FTE {0}.
pm.maintainEmployedPhysician.endDate.error = Invalid data. To expire End Date must match the transaction Effective Date.
## {0} first row number
## {1} second row number
pm.maintainEmployedPhysician.timeOverlap.error = Row {0} and {1} overlap. Time period cannot overlap for same risk.
## {0} row number
## {1} term effective date
## {2} term expiration date
pm.maintainEmployedPhysician.LPED.error = Row {0}: Last Policy Expiration Date should be between {1} and {2}.
pm.maintainEmployedPhysician.fteStatus.error = Row {0}: Status is Inactive - Please enter valid Last Policy Expiration Date and update Renewal Indicator to be No.
pm.maintainEmployedPhysician.fteStatus.required.error = Row {0}: Please enter a value for FTE Status.
pm.maintainEmployedPhysician.fteEffToDate.required.error = Row {0}: Please enter a value for Last Policy Expiration Date.
## for select FTE Risk page
pm.selectFteRisk.noFteRisk.error = No risk available.
pm.selectFteRisk.noSelectedRisk.error = Invalid Operation. Please select a risk.
pm.selectFteRisk.header = Risk List

## for Risk Copy/Delete All
pm.maintainRiskCopy.saveRiskFirst.error = Risk changes must be saved first.
pm.maintainRiskCopy.processCopy.confirm = You are about to copy the selected fields to all selected risks. Do you wish to continue?
pm.maintainRiskCopy.sourceNotSelected.error = Please select the items to be copied.
pm.maintainRiskCopy.targetNotSelected.error = Please select the items to be copied to.
pm.maintainRiskCopy.validation.confirm = Limits, Specialty or Territory have changed, therefore annual rate may need adjustment. Do you with to continue?
pm.maintainRiskCopy.sourceCoverageNotSelect.error = Invalid operation, Cannot copy component/coverage class without copying the coverage. Please select coverage also.
pm.maintainRiskCopy.failure.error = Copying Failed for at least one of the risks. Please review risk(s) marked as incomplete.
pm.maintainRiskCopy.deselectState.error = State has to be selected when county is selected.
pm.maintainRiskCopy.compValue.outOfRange.error = Invalid Data, component value must be between {0} and {1}.
pm.maintainRiskCopy.copySucess.msg = Process risk copy all successfully.
pm.maintainRiskCopy.source.header = Source
pm.maintainRiskCopy.target.header = Target
pm.maintainRiskCopy.coverage.header = Coverage
pm.maintainRiskCopy.coverageDetail.header = Coverage Detail
pm.maintainRiskCopy.component.header = Component
pm.maintainRiskCopy.componentDetail.header = Component Detail
pm.maintainRiskCopy.coverageClass.header = Coverage Class
pm.maintainRiskCopy.coverageClassDetail.header = Coverage Class Detail
pm.maintainRiskCopy.coiHolder.header = COI Holder
pm.maintainRiskCopy.affiliation.header = Affiliation
pm.maintainRiskCopy.schedule.header = Schedule
pm.maintainRiskCopy.deleteAll.deleteTargetFail.error = Deleting Failed for at least one of the risks. Please review risk(s) marked as incomplete.
pm.maintainRiskCopy.deleteAll.deleteSourceFail.error = Failed Deleting for the source risk. Please contact your system administrator.
pm.maintainRiskCopy.deleteAll.deleteTarget.confirm = Are you sure you want to delete?
pm.maintainRiskCopy.deleteAll.deleteSource.confirm = Do you want to delete the changes from the source risk also? If there are more risks to be processed, please do not delete yet.
pm.maintainRiskCopy.deleteAll.sourceNotSelected.error = Please select the items to be deleted.
pm.maintainRiskCopy.deleteAll.targetNotSelected.error = Please select the items to be deleted from
pm.maintainRiskCopy.deleteAll.processDelete.confirm = Are you sure you want to delete?
pm.maintainRiskCopy.deleteSucess.msg = Process risk delete all successfully.
pm.maintainRiskCopy.noselection.error=Invalid Process.  Please click check box first

## For Prior Acts
pm.maintainPriorActs.riskList.header = Risk List
pm.maintainPriorActs.riskForm.header = Risk Information
pm.maintainPriorActs.coverageList.header = Coverage List
pm.maintainPriorActs.coverageForm.header = Coverage Information   
pm.maintainPriorActs.componentList.header = Component List
pm.maintainPriorActs.componentForm.header = Component Information
pm.maintainPriorActs.saveCoverageFirst.warning = Invalid Operation. You must first save coverage data before maintaining Components.
pm.maintainPriorActs.saveDataFailed = Failed to save prior acts. Please contact your system administrator.
pm.maintainPriorActs.priorActsBreak.error = Matching time periods must exist between risk and coverage records for the out of state practice.
pm.maintainPriorActs.confirm.deleteExistCovgComp = Existing coverage and components will be deleted. You'll need to re-enter them. Continue?
pm.maintainPriorActs.activeCarrierExists.error = Active Carrier exists for other coverage for this risk.
pm.maintainPriorActs.noCoverageInfo.error = Invalid Data. Coverage information must be entered.
## {0} coverage retro date
pm.maintainPriorActs.effDateBeforeRetroDate.error = Invalid Data - Coverage. Prior Acts effective date cannot be before coverage retro date {0}.
## {0} prior act coverage exp
pm.maintainPriorActs.effDateAfterExpDate.error = Invalid Data - Coverage. Effective date cannot be after expiration date {0}.
## {0} coverage effective date
pm.maintainPriorActs.expDateAfterCovgEff.error = Invalid Data. Prior Acts effective period cannot be after coverage inception date {0}.
## {0} row number
pm.maintainPriorActs.practiceStateRequired.error = Row {0}: Invalid Data. Practice state is required.
pm.maintainPriorActs.countyRequired.error = Row {0}: Invalid Data. County is required.
pm.maintainPriorActs.specialtyRequired.error = Row {0}: Invalid Data. Specialty is required.
pm.maintainPriorActs.coverageLimitRequired.error = Row {0}: Invalid Data. Coverage limit is required.
pm.maintainPriorActs.componentValueRequired.error = Row {0}: Invalid Data. Component value is required.
pm.maintainPriorActs.cycleBeginDateRequired.error = Row {0}: Invalid Data. Cycle Begin Date is required for New Doctor Discount.
## {0} coverage retro date
pm.maintainPriorActs.riskEffDateBeforeRetroDate.error = Invalid Data. Prior Acts effective date cannot be before coverage retro date {0}.
## {0} Minimal Nose Date
pm.maintainPriorActs.riskEffDateBeforeMinDate.error = Invalid Data. Prior Acts effective date cannot be before {0}.
pm.maintainPriorActs.riskEffDateAfterExpDate.error = Invalid Data. Prior Acts effective date cannot be after expiration date.
## {0} term expiration date
pm.maintainPriorActs.riskExpDateAfterTermExp.error = Invalid Data. Prior Acts effective period cannot be after risk start date {0}.
## {0} practice state
pm.maintainPriorActs.noPriorActCoverage.error = There is no prior acts coverage for the parent coverage in {0}.
## {0} prior acts coverage effective date
pm.maintainPriorActs.compEffBeforCovgEff.error = Invalid Data. Prior Acts component effective date cannot be before coverage effective date {0}.
pm.maintainPriorActs.compEffAfterCompExp.error = Invalid Data. Effective date cannot be after expiration date.
## {0} prior acts coverage expiration date
pm.maintainPriorActs.compExpAfterCovgExp.error = Invalid Data. Prior Acts component expiration date cannot be after coverage expiration date {0}.
## {0} first row number
## {1} second row number
pm.maintainPriorActs.riskOverlap.error = Invalid Data - Risk. Risk date ranges for row {0} and row {1} overlap.
pm.maintainPriorActs.riskGap.error = Invalid Data - Risk. There is a gap in Risk between row {0} and row {1}.
## {0} last prior act risk exp date
## {1} risk start date
pm.maintainPriorActs.riskLastPeriodMissing.error = Invalid Data - Risk. Risk data must be entered for period {0} and {1}.
## {0} coverage retro date
## {1} first prior act risk eff date
pm.maintainPriorActs.riskFirstPeriodMissing.error = Invalid Data - Risk. Risk data must be entered for period {0} and {1}.
## {0} first row number
## {1} second row number
pm.maintainPriorActs.covgOverlap.error = Invalid Data - Coverage. Coverage date ranges for row {0} and row {1} overlap.
pm.maintainPriorActs.covgGap.error = Invalid Data - Coverage. There is a gap in Coverage between row {0} and row {1}.
## {0} last prior act coverage exp date
## {1} coverage start date
pm.maintainPriorActs.covgLastPeriodMissing.error = Invalid Data - Coverage. Coverage data must be entered for period {0} and {1}.
## {0} coverage retro date
## {1} first prior act coverage eff date
pm.maintainPriorActs.covgFirstPeriodMissing.error = Invalid Data - Coverage. Coverage data must be entered for period {0} and {1}.
## {0} first row number
## {1} second row number
pm.maintainPriorActs.compOverlap.error = Invalid Data - Component. Component date ranges for row {0} and row {1} overlap.
pm.maintainPriorActs.copyStats.error = System failed to copy stats. Please contact technical support.


##For Tail Quote
pm.maintainTailQuote.transactionList.header = Transaction Log
pm.maintainTailQuote.transactionForm.header = Transaction Information
pm.maintainTailQuote.tailQuoteList.header = Tail Quote
pm.maintainTailQuote.tailQuoteForm.header = Quote Information
pm.maintainTailQuote.saveChange.prompt = Changes exist and will be lost. Do you wish to continue?
pm.maintainTailQuote.tailQuoteDateGreaterTermEff.error = Tail Quote Date must be greater than Term Effective Date.
pm.maintainTailQuote.tailQuoteDate.required.error = Tail Quote Date is required.

## For View Premium page
pm.viewPremiumInfo.premiumFilter.header=Premium Filter
pm.viewPremiumInfo.premiumTrans.header=Transaction Information
pm.viewPremiumInfo.premiumList.header=Premium Detail
pm.viewPremiumInfo.premiumList.noDataFound=No Data found. Please rate first.
pm.viewRatingLog.nodata.error=Rating log information is not available.
pm.viewRatingLog.ratingLogFilter.header=Rating Log Filter
pm.viewRatingLog.coverageFilter.error=Please select a risk first.
## {0} risk
pm.viewMemberContribution.memContList.noDataFound=No information for {0}.
## {0} risk
pm.viewMemberContribution.memberContribution.header=Risk - {0}
pm.viewLayerDetail.layerDetailList.noDataFound=No information found.
## {0} coverage
pm.viewLayerDetail.layerDetail.header=Coverage - {0}
pm.viewMemberContribution.memberContributionInfo.header=Information

# For View Fund page
pm.viewFundInfo.fundFilter.header=Filter
pm.viewFundInfo.fundTrans.header=Transaction Information
pm.viewFundInfo.fundList.header=Detail
pm.viewFundInfo.fundList.noDataFound=No Data found. Please rate first.

# For View Payment page
pm.viewPaymentInfo.paymentList.header=Payment Detail
pm.viewPaymentInfo.paymentList.noDataFound=No Data found.

# For Close Page
pm.closePage.error = Error:
# For View Audit page
pm.viewAudit.auditList.header=Audit List
pm.viewAudit.auditDetail.header=Audit Detail
## {0} first row number
## {1} second row number
## {2} special handling description
pm.maintainSpecialHandling.invalidContinuity.error=Invalid Data.  Category {2} is duplicated with overlapping time periods.

# For Related Policy popup
pm.viewRelatedPolInfo.policyList.header=Related Policy Detail

# For Maintain Schedule page
pm.maintainSchedule.scheduleList.header=Schedule List
pm.maintainSchedule.scheduleForm.header=Schedule Information
pm.maintainSchedule.invalidEffectiveToDate.error=Expiration Date cannot be prior to effective Date.
pm.maintainSchedule.required.error=Invalid Data. Row {0}: {1} is required.

## {0} first row number
## {1} second row number
pm.maintainSchedule.dateOverlapForSameEntity.error=Row {0} and {1} have the same name information. Date ranges cannot overlap.
pm.maintainSchedule.dateOverlap.error=Row {0} and {1} overlap. Date ranges cannot overlap.

## {0} row number
pm.maintainSchedule.entityEmpty.error=Row {0}: Please select a client.
pm.maintainSchedule.confirm.totalCount =Total count of locum of records exceed the allowed count.Do you want to continue saving?
pm.maintainSchedule.confirm.totalDuration =Total duration of locum tenens exceeds the allowed duration.Do you want to continue saving?

#For Maintain Renewal policy
## {0} error message
pm.maintainRenewal.renewFailed.error = Failed to renew. {0}.
pm.maintainRenewal.renewalTermExpRequired.error = Invalid Date: Please enter term expiration date.
pm.maintainRenewal.expPriorToEff.error = Invalid Date: Expiration date must be after Effective date.
pm.maintainRenewal.renewalTermForm.header = Renewal Term Expiration
pm.maintainRenewal.confirm.applyPRT = Do you wish to apply pending renewal changes?
pm.maintainRenewal.renewFailed.general.error = There was an issue in the pre-renewal. Please report the error to your system administrator.
pm.maintainRenewal.renewFailed.rmDiscount.error = Error processing RM Components during the pre-renewal process. Please report the error to your system administrator.

#For auto renewal
## {0} error message
pm.autoRenewal.validation.error={0}
pm.autoRenewal.confirmation.info=Are you sure you want to auto renew?
pm.autoRenewal.fail.error=Operation Failed. The Auto Renew Process did not complete.

#For Maintain Quote
pm.maintainQuote.deny.effDateRequired.error = Please enter effective date.
pm.maintainQuote.selectRiskCovg.header=Risk Coverage List
pm.maintainQuote.addlRiskCovgInfo.header=Retroactive Date Information
pm.maintainQuote.copyPolicyToQuote.convert.confirmation=Do you want to convert coverage?
pm.maintainQuote.deny.process.info=Processing Deny Quote ...
pm.maintainQuote.deny.process.abort.info=Deny Quote Process has been aborted.

## {0} term effective from date
## {1} term effective to date
pm.maintainQuote.deny.effDateRange.error = Invalid Data. Effective date must be between {0} and {1}.

pm.maintainQuote.reactive.error = Error while Re-Activating quote.
pm.maintainQuote.denyQuoteForm.header = Deny Quote
pm.maintainQuote.accept.genPolicyNo.error = Unable to generate policy #,Please contact your system administrator.

#For Process Quote Status
pm.processQuoteStatus.selection.header = Status Selection
pm.processQuoteStatus.history.header = Status History
pm.processQuoteStatus.status.empty = Please select a status first.
pm.processQuoteStatus.version.empty = Please select a quote version.
pm.processQuoteStatus.same.status = Selected status is same as the most recent status. Do you wish to continue?

#For Cancellation
pm.maintainCancellation.cancellationForm.header = Cancellation
pm.maintainCancellation.cancellationProcessFailed.error = Error processing cancellation. Please contact your system administrator.
pm.maintainCancellation.cancellationNotPermitted.error = Policy level cancellation is not permitted during Renewal WIP.
pm.maintainCancellation.ddl.grid.header=Select to DDL
pm.maintainCancellation.ddl.form.header=Cancel Detail
pm.maintainCancellation.confirmation.header=Confirmation
pm.maintainCancellation.confirmation.trans.header=Transaction Detail
pm.maintainCancellation.confirmation.noDataFound=No data found.
pm.maintainCancellation.multiCancel.process=Processing cancellation transaction.
pm.maintainCancellation.multiCancel.error = Error processing multiple cancellation. Please contact your system administrator.
pm.maintainCancellation.multiCancel.nextTransaction=Processing next transaction for multi cancellation...

#For Future Cancellation Details Popup
pm.maintainCancellation.futureCancellationList.header = Future Cancellation List

#For Tail
pm.maintainTail.noData.error = No Tail information found.
pm.maintainTail.tailList.Header = Risk/Coverage List
pm.maintainTail.filterCriteria.Header = Filter Criteria
pm.maintainTail.tailDetail.Header = Tail Detail
pm.maintainTail.componentList.Header = Component Detail
pm.maintainTail.closeDivPromt = Do you wish to save changes?
pm.maintainTail.validateError = Internal Error. Policy Validation failure.
pm.maintainTail.noTailSelectedError = Please select one or more tail coverages.
pm.maintainTail.invalidTransactionEffectiveError = Unable to process tail. Selected coverage's have different effective dates.
pm.maintainTail.invalidBillingRelationError = Invalid Operation: Incomplete billing relation.
pm.maintainTail.processTailTransactionError = Process tail transaction failed.
pm.maintainTail.captureFinancePercent.formHeader = Financial Charge
pm.maintainTail.captureFinancePercent.invalidRatePercent = Invalid rate percent. 
## {0} delta validation error
pm.maintainTail.deltaValidationError= {0}

pm.maintainTail.failDeltaValidationError = Error while validating tail delta.
pm.maintainTail.tailExistError = Cannot add the coverage. The coverage already exists.
pm.selectTail.tailList.header = Tail List
pm.selectTail.noSelectTail.error = Please select one tail coverage.
pm.selectTail.noData.error = No Data.
pm.selectTail.addManualTail.error = Failed to save tail. Please contact your system administrator.


## {0} cancellation level
pm.maintainCancellation.renewalWIPChange.error = Changes have been made to {0}. Please save/delete changes prior to cancellation.

## {0} cancellation level
pm.maintainCancellation.selectedObjectNotActive.error = Selected {0} is not active.
pm.maintainCancellation.confirm.cancelSingleActiveOwner = Cancelling the single active owner of an entity-type risk will also cancel the entity-type risk. Do you wish to proceed?
pm.maintainCancellation.cancelPrimaryEntityTypeRisk.error = Entity-Type risk is primary risk. Cannot cancel primary risk.
pm.maintainCancellation.cancelDateBeforeEffDate.error = Cancellation date cannot be before {0} effective date.
pm.maintainCancellation.cancelDateAfterExpDate.error = Cancellation date cannot be after {0} expiration date.
pm.maintainCancellation.tail.cancelDateBeforeEffDate.error = Cancellation date cannot be before {0} effective date {1}.
pm.maintainCancellation.tail.cancelDateAfterExpDate.error = Cancellation date cannot be after {0} expiration date {1}.
pm.maintainCancellation.slotCancelled.error = The selected occupant was already cancelled on {0}.
pm.maintainCancellation.cancelDateForExpiredCancel.error = Cancellation date should be the same as expiration date for the selected cancel type.
pm.maintainCancellation.noCancellationDate.error = Please enter cancellation date.
pm.maintainCancellation.noCancellationType.error = Please indicate the cancellation type.
pm.maintainCancellation.noCancellationReason.error = Please indicate the cancellation reason.
pm.maintainCancellation.noCancellationMethod.error = Please indicate the cancellation method.
pm.maintainCancellation.noAccountingDate.error = Please indicate the accounting date.
pm.maintainCancellation.noNewCarrier.error = Please select the new carrier.
pm.maintainCancellation.noItem.msg = No data found for Cancellation

# for Multi Cancel
pm.matainMultiCancel.noCancelLevel.error = Please select cancel level.
pm.matainMultiCancel.noCancelDate.error = Please enter cancellation date.
pm.matainMultiCancel.noCancelType.error = Please indicate the cancellation type.
pm.matainMultiCancel.noCancelReason.error = Please indicate the cancellation reason.
pm.matainMultiCancel.noCancelMethod.error = Please enter the cancellation method.
pm.matainMultiCancel.noAccountingDate.error = Please enter the accounting date.
pm.matainMultiCancel.noClaimsAccessIndicator.error = Please enter the claims access indicator.
pm.matainMultiCancel.cancelDateBeforeTermEff.error = Cancellation date cannot be before term effective date.
pm.matainMultiCancel.cancelDateAfterTermExp.error = Cancellation date cannot be after term expiration date.
pm.matainMultiCancel.noSeledRisk.error = Select one or more risks.
pm.matainMultiCancel.noSeledCovg.error  = Select one or more coverages.
pm.matainMultiCancel.noSeledComponent.error = Select one or more components.
pm.matainMultiCancel.noSeledSubCovg.error = Select one or more coverage class.
pm.matainMultiCancel.noSeledCoi.error = Select one or more COI holders for a risk.
pm.matainMultiCancel.cancelPrimaryRisk.error = Invalid: Primary risk cannot be cancelled.
pm.matainMultiCancel.cancelFuturePrimaryRisk.error = Invalid: Cannot cancel the selected risk since it has been changed to be a primary risk and cancelling this would result in a policy without primary risk.
pm.matainMultiCancel.cancellationDate.error = Invalid: Cancellation date should be between risk effective dates.
pm.matainMultiCancel.cancelSingleOwner.error = Invalid: Attempting to cancel single active owner/all owners of the primary entity risk. At least one active owner is required.
pm.matainMultiCancel.cancelSingleOwner.warning = Warning: Cancelling the single active owner/all owners of an entity-type risk will cancel the entity-type risk also.
pm.matainMultiCancel.cancelPrimaryCovg.error = Invalid: Primary coverage cannot be cancelled.
pm.matainMultiCancel.covgCancelDate.error = Invalid: Cancellation date should be between coverage effective dates.
pm.matainMultiCancel.cancelPriorActs.error = Invalid: Midterm cancellations for Prior Acts must have CNPP as cancellation reason/type.
pm.matainMultiCancel.compCancelDate.error = Invalid: Cancellation date should be between component effective dates.
pm.matainMultiCancel.noActiveSubcoverage.error = Invalid: Coverage must have at least one active coverage class.
pm.matainMultiCancel.subcovgCancelDate.error = Invalid: Cancellation date should be between coverage class effective dates.
pm.matainMultiCancel.tailCreated.warning = Invalid: Cancellation date should be between coverage class effective dates.
pm.matainMultiCancel.coiCancelDate.error = Invalid: Expiration date should be between COI holder effective dates.
pm.matainMultiCancel.cancelInfoFm.header = Cancel/Expire Information
pm.matainMultiCancel.filterCriteriaFm.header = Filter Criteria
pm.matainMultiCancel.cancelIterGh.header = Cancel/Expire Selection
pm.matainMultiCancel.tailCreated.msg = Tail is created for prior term.
pm.matainMultiCancel.cancelSuccessfully.msg = Cancellation performed successfully.
pm.matainMultiCancel.noItem.msg = No data found for Multi Cancel
pm.matainMultiCancel.noCancelType.error2 = Invalid Operation. Risk {0}: please indicate the cancellation type.
pm.matainMultiCancel.noCancelReason.error2 = Invalid Operation. Risk {0}: please indicate the cancellation reason.
pm.matainMultiCancel.noCancelMethod.error2 = Invalid Operation. Risk {0}: please indicate the cancellation method.
pm.matainMultiCancel.cancelDateBeforeTermEff.error2 = Invalid Operation. Risk {0}: cancellation date cannot be before term effective date.
pm.matainMultiCancel.cancelDateAfterTermExp.error2 = Invalid Operation. Risk {0}: cancellation date cannot be after term expiration date.
pm.matainMultiCancel.noCancelDate.error2 = Invalid Operation. Risk {0}: please enter cancellation date.
## {0} error message
pm.maintainCancellation.processCancellation.error = Process Cancellation Error: {0}

pm.maintainCancellation.confirm.createTail = Do you want to generate Tail Coverages?

# For Capture Transaction Details. Endorsement Transaction, DeleteWIP transaction
## {0} last accounting date
pm.transactionmgr.extendCancelTerm.header.info = Extend Term
pm.transactionmgr.extendCancelTerm.save.error = Unable to save extend term transaction.Please contact your system administrator.
pm.transactionmgr.extendCancelTerm.validation.error = Invalid Data.Extend to date must be after term expiration.
pm.transactionmgr.extendCancelTerm.confirm.info = Are you sure you wish to extend the term and cancel?

pm.transactionmgr.captureTransationDetails.invalidAccountingDate.error =Accounting Date must be greater than or equal to {0}, the latest accounting date for the policy

pm.transactionmgr.captureTransationDetails.noTransactionCode.error = Transaction Code is not found for TransactionManager to initialize default values
pm.transactionmgr.captureTransationDetails.cantLockPolicy.error =Policy is locked by another user at this time. Please try again later
pm.transactionmgr.captureTransationDetails.changedPolicyPicture.error =Policy picture has been modified by another user since your first access. Please re-retrieve the policy first.
pm.transactionmgr.captureTransationDetails.formHeader =Transaction Information
pm.transactionmgr.captureTransationDetails.noAccountingDate.error = Accounting date is required

pm.transactionmgr.createEndorsementTransaction.formHeader = Endorsement Information

## {0} create transaction status
pm.transactionmgr.createEndorsementTransaction.createTransaction.status = {0}

pm.transactionmgr.createEndorsementTransaction.noEffectiveFromDate.error = Transaction Effective From Date is not available

# For View Policy Administrator History
pm.viewPolicyAdminHistoryInfo.adminHistoryList.header=Policy Administrator History Detail
pm.viewPolicyAdminHistoryInfo.adminHistoryList.noDataFound=No Data found.

## {0} term effective from date
## {1} term effective to date
pm.transactionmgr.createEndorsementTransaction.invalidEffectiveFromDate.error = Effective Date must be between {0} and {1}

pm.transactionmgr.deleteWIPTransaction.confirm.wishToDeleteWIP= Are you sure you wish to Delete WIP?
pm.transactionmgr.deleteWIPTransaction.confirm.batchAutoRenewalWIP = This WIP is current part of an Auto Renewal Batch Event, Are you sure you wish to Delete WIP?
pm.transactionmgr.deleteWIPTransaction.error.newBusinessWIPDeletion= You are not authorized to delete New Business WIP
pm.transactionmgr.deleteWIPTransaction.confirm.backupRenewalWIP= Do you wish to backup pending changes?
pm.transactionmgr.deleteWIPTransaction.confirm.deleteSourcePolicyForAmalgamation=This transaction has resulted an amalgamation.  Deleting the work in progress will remove the amalgamation linkage between policies.  Do you wish to continue?
pm.transactionmgr.deleteWIPTransaction.confirm.deleteTargetPolicyForAmalgamation=This transaction was created as a result of an amalgamation.  Deleting the work in progress will remove the amalgamation linkage between policies.  Do you wish to continue?


pm.transactionmgr.deleteWIPTransaction.error.processError= Cannot delete the WIP. Please contact your system administrator.

pm.transactionmgr.deleteWIPTransaction.formHeader = Delete WIP Transaction...

## {0} transaction_type_code
pm.transactionmgr.deleteEndQuoteTransaction.error.processError= Delete {0} quote failed. Please contact your system administrator.
pm.transactionmgr.applyEndQuoteTransaction.error.processError= Failed to apply {0} quote. Please contact your system administrator.
pm.transactionmgr.applyEndQuoteTransaction.error.unlockError=Error Processing Apply {0} Quote (Unlocking).
pm.transactionmgr.copyEndQuoteTransaction.error.createEndorseError= Failed to create an endorsement transaction. Please contact your system administrator.
pm.transactionmgr.copyEndQuoteTransaction.error.copyEndQuoteError= Failed to copy {0} quote. Please contact your system administrator.
pm.deleteEndQuote.confirmed.warning=Are you sure you wish to delete {0} quote?
pm.applyEndQuote.confirmed.warning=Are you sure you wish to apply {0} quote?

## {0} error message
pm.transactionmgr.deleteWIPTransaction.applicationError ={0}

# for change term expiration date
pm.transactionmgr.changeTermExpirationDate.form.header = Change Term Expiration
pm.transactionmgr.changeTermExpirationDate.dateNotLater = Invalid Data. Expiration date must be after current expiration date.
pm.transactionmgr.changeTermExpirationDate.invalidDuration = Invalid Data. Invalid dates for the policy type, issue state, and issue company.
pm.transactionmgr.changeTermExpirationDate.invalidDates = Invalid Data. Invalid term dates for the policy type.
pm.transactionmgr.changeTermExpirationDate.invalidAccountingMonth = Invalid Data. Invalid accounting month.

# for change policy administrator
pm.transactionmgr.changePolicyAdministrator.effectiveTo.error = Invalid Data.Effective To Date must be 01/01/3000.
pm.transactionmgr.changePolicyAdministrator.process.error = Error processing administrator change. Please contact your system administrator.
pm.transactionmgr.changePolicyAdministrator.header.info = Change Policy Administrator
# For Create Policy Page
pm.createPolicyForm.header=Parameters
pm.createPolicyList.header=Policy Type
pm.createPolicy.termEffectiveFromDate.null.error=Please enter term effective date.

## {0} System parameter PM_NEW_BUS_EFF_DATE
pm.createPolicy.termEffectiveFromDate.invalid.error=Effective Date must be within {0} days.

pm.createPolicy.termEffectiveFromToDate.invalid.error=Term expiration date must be after effective date.
pm.createPolicy.accountingDate.null.error=Please enter accounting date.
pm.createPolicy.issueComp.null.error=Please enter issue company.
pm.createPolicy.issueState.null.error=Please enter issue state.
pm.createPolicy.regionlOffice.null.error=Please enter regional office.
pm.createPolicy.policyType.null.error=Please select a policy type.
pm.createPolicy.failed.error=Failed to create policy. Please report the error to your system administrator.
pm.createPolicy.policyNo.existing=There is policy with the same policy no exists.
pm.createPolicy.policyNo.unavailable=There is no policy number available.
pm.createPolicy.confirm.shortRate=Short Rate should be checked to Yes. Do you wish to continue?
pm.createPolicy.pmTransactionCode.notExist=Transaction Code in request does not exist.

# Manage Agent
pm.agentmgr.maintainAgent.formHeader = Agent Information
pm.agentmgr.maintainAgent.listHeader = Agent List
##{0} lincenseClassCode
pm.agentmgr.saveNewAgent.noLicenseClassCodeError = Invalid licenseClassCode used to retrieve Agent defaults:{0}

pm.agentmgr.saveNewAgent.noStartDate = Invalid Data. Please enter a start date
pm.agentmgr.saveNewAgent.noProducerLicenseNo = Invalid Data. Please select a Producer license number
pm.agentmgr.saveNewAgent.noEndDate = Invalid Data. Please enter an end date

## {0} row number
pm.agentmgr.saveNewAgent.startDateGreaterThanEndDate =Row {0}: Invalid Data. End date cannot be prior to the Start date
pm.agentmgr.saveNewAgent.startDateForInProgressTransaction =Row {0}: Invalid Data. Start date should be term effective or renewal term effective date
pm.agentmgr.saveNewAgent.startDateForNonInProgressTransaction =Row {0}: Invalid Data. Start date should be renewal term effective date

## {0} row number
## {1} max Newbus Rate double
pm.agentmgr.saveNewAgent.invalidCommissionRate = Row {0}: Invalid Data. Please enter a Commission Rate value between 0% and {1}

## {0} row number
pm.agentmgr.saveNewAgent.startDateNotEqualTermDate =Row {0}: Invalid Data. Select an agent for the current term first
pm.agentmgr.saveNewAgent.noEreCommSchedule =Row {0}: Invalid Data. Please select a ERE commission schedule
pm.agentmgr.saveNewAgent.noRenewalCommSchedule =Row {0}: Invalid Data. Please select a Renewal commission schedule
pm.agentmgr.saveNewAgent.noNewbusCommSchedule =Row {0}: Invalid Data. Please select a New Business commission schedule
pm.agentmgr.saveNewAgent.startDateNotWithinEreScheduleDates =Row {0}: Invalid Data. Please select a different ERE Schedule, This schedule is not active for the current term
pm.agentmgr.saveNewAgent.startDateNotWithinRenewalScheduleDates =Row {0}: Invalid Data. Please select a different Renewal Schedule, This schedule is not active for the current term
pm.agentmgr.saveNewAgent.startDateNotWithinNewbusScheduleDates =Row {0}: Invalid Data. Please select a different New Business Schedule. This schedule is not active for the current term
pm.agentmgr.saveNewAgent.noEreFlatAmount = Row {0}: Invalid Data. Please enter a ERE flat amount.
pm.agentmgr.saveNewAgent.noRenewalFlatAmount =Row {0}: Invalid Data. Please enter a Renewal flat amount.
pm.agentmgr.saveNewAgent.noNewbusFlatAmount = Row {0}: Invalid Data. Please enter a New Business flat amount.
pm.agentmgr.saveNewAgent.noErePercentAmount = Row {0}: Invalid Data. Please enter a ERE rate.
pm.agentmgr.saveNewAgent.noRenewalPercentAmount = Row {0}: Invalid Data. Please enter a Renewal rate.
pm.agentmgr.saveNewAgent.noNewbusPercentAmount = Row {0}: Invalid Data. Please enter a New Business rate.
pm.agentmgr.saveNewAgent.overlapDates = Invalid Data. End date cannot be after the following row end date - 1 day
pm.agentmgr.saveNewAgent.grossPremPayCodeForPercentBasis =Row {0}: Invalid Data. Gross Premium Pay Code is only available for PERCENT basis
pm.agentmgr.addNewAgent.newAgentRowPendingForSave =  Invalid Data/Operation.  In progress change, please save before proceeding
pm.agentmgr.saveNewAgent.validSubproducer =Row {0}: Producer has valid Subproducers. Do you wish to continue?
pm.agentmgr.saveNewAgent.producer.not.exists=Invalid Data. The provided agent for policy {0} does not exist in the system.

# Agent History
pm.agentmgr.viewAgentHistory.listHeader = Agent History List
pm.agentmgr.viewAgentHistory.noDataFound = No agent history is available for this policy.

# For Manage Billing Setup Page  (if message contains ?, if it will prompt for yes/no confirm instead of alert)
pm.maintainBilling.manageBillingSetupForm.header=Billing Setup
ws.policy.change.billing.setup.incomplete.information=Invalid Data. Incomplete Billing Setup information provided.

## {0} policy #
pm.maintainBilling.init.info.billingRelationExists = Billing Relation Exists for Policy No {0}.

## {0} policy #
pm.maintainBilling.init.alert.addressNotExist = Unable to get address information for Policy No {0}. Close billing setup?

## {0} policy #
## {1} term effective from date
pm.maintainBilling.init.alert.paymentPlanNotExist = No Valid Payment Plans for this Policy {0} with Effective Date {1}.  Close billing setup?

pm.maintainBilling.init.alert.defaultPaymentPlan = Error selecting Default Payment Plan
pm.maintainBilling.init.alert.defaultPaymentPlanLevel = Data Not Found for Default Payment Plan Level
pm.maintainBilling.init.alert.customPamentPlan =Custom plan can be used only for accounts with single policy
pm.maintainBilling.init.alert.defaultMoreFields = Error retrieving Default Account Info
pm.maintainBilling.init.confirm.agentNotSelected = Agent must be selected to check for Account Current Billing. Close billing setup?
pm.maintainBilling.validate.error.singlePolicy = Single Policy set to Y, Base MMDD, Billing Freq, Lead Days, and Next Billing Date should be null.
pm.maintainBilling.validate.error.billingFrequency = Billing Frequency set to Policy Level, Base MmDd, Lead Days, and Next Billing Date should be null.
pm.maintainBilling.validate.error.noBaseMMDDNoLeadDay = Error Billing Incomplete, billing frequency, Base MMDD, bill lead days are all empty at the same time
pm.maintainBilling.validate.error.noBaseBillMonthDay = Error Billing Incomplete. Please enter Base MMDD
pm.maintainBilling.validate.error.noBillLeadDays = Error Billing Incomplete. Please enter bill lead days
pm.maintainBilling.validate.error.noBillingFrequency =Error Billing Incomplete. Please select bill frequency
pm.maintainBilling.validate.error.noAccountNoEntered =A valid account number must be entered.
pm.maintainBilling.validate.error.existingAccountNoEntered =Account already exists.
pm.maintainBilling.validate.info.nonExistingAccountNoEntered =This account did not exist and has been created.

## {0} valid Payment Plan List
pm.maintainBilling.validate.error.invalidPaymentPlan =Please change payment plan. valid plans are {0}

pm.maintainBilling.validate.error.customPaymentPlan =Custom payment plan can be used only for accounts with single policy.

pm.maintainBilling.validate.alert.billingRelationExists = Billing Relation Exists.  Back to policy/quote Page

## {0} accountNo size
pm.maintainBilling.validate.error.accountNoTooLong = Account No with prefix and suffix cannot be more than {0} characters

## {0} new next billing date
pm.maintainBilling.validate.info.nextBillingDateChanged = Next Billing Date is changed by OASIS as {0}
pm.maintainBilling.validate.error.noNextBillingDate = Empty Next Billing Date is returned by OASIS
pm.maintainBilling.alert.enableSearchByAcctHolder= 'Find Account No by Account Holder' option is available only when the field 'Account Holder is Policy Holder' is unchecked
pm.maintainBilling.validation.parameterNotConfiguredFMBSENTERACCT =  System parameter FM_BS_ENTER_ACCT is not configured to enable to use Find Account Option
pm.maintainBilling.confirm.checkSinglePolicyB = When Single Policy is checked, Billing Information will be set from the policy, Billing information will be cleared, Press OK to continue save, or cancel to abort
pm.maintainBilling.confirm.close = Do you want to save the current relation?

## {0} error message
pm.maintainBilling.save.databaseError = {0}
pm.maintainBilling.save.billingRelationCreated = Billing Relation Created for Policy {0}
pm.maintainBilling.label.buttonMoreLess.more = More >>>
pm.maintainBilling.label.buttonMoreLess.less = Less >>>

# For Account Lookup
pm.accountlookupList.header=Billing Accounts
pm.accountlookup.noaccountfound=No billing account found.

# For Loading Save Options (Save As)
pm.transactionmgr.loadSaveOptions.formHeader = Save Options
pm.transactionmgr.loadSaveOptions.agentRequired.info = Agent must be created.
pm.transactionmgr.loadSaveOptions.underwriterRequired.info = Underwriter must be selected.

## {0} agent valid message
pm.transactionmgr.loadSaveOptions.agentDatabaseMessage.info = {0}

pm.transactionmgr.loadSaveOptions.incompleteBillingRelation.info = Incomplete billing relation.
pm.transactionmgr.loadSaveOptions.collateralRequired.info = Collateral is missing.

# For populate cis warning message
pm.transactionmgr.loadSaveOptions.populateCisRequired.info=Risk or IBNR Inactive Risk is not populated in CIS.

# For associated inactive risk warning message
pm.transactionmgr.loadSaveOptions.associatedInactiveRequired.info=IBNR Inactive Risk must be Associated.

# For Select Risk Type
pm.selectRiskType.header=Risk Type List
pm.selectRiskType.NoDataFound=No risk type found.

# For Add Risk  - JS validation
pm.addRisk.invalidEntityType.error=Invalid Operation. Not a valid entity for the selected risk type.
pm.addRisk.riskExists.error=Invalid Operation. Selected risk already exists.
pm.addRisk.noRiskSelected.error=Valid risk must be selected.
pm.addRisk.unsaved.changes.error=Primary Risk changes must be saved prior to adding a Risk.
# {0} entity name
pm.addRisk.riskExists.error3=Selected risk {0} already exists.
# {0} error message for adding risk in batch
pm.addRisk.riskExists.error4={0}

# For Add Risk  - Java validation
## {0} row number
## {1} risk name
## {2} risk type
pm.addRisk.invalidEntityType.error2=Row {0}: Entity {1} is not valid for the selected risk type {2}.

# For Add Risk  - Java validation
## {0} first row number
## {1} second row number
## {2} risk type
## {3} risk name
pm.addRisk.riskExists.error2=Row {0} and {1} overlap: {2} {3}.

# For Select Location
pm.selectLocation.header=Location List
pm.selectLocation.NoSelection.error=Please select at least one location.
pm.selectLocation.singleSelect.error=Only one location can be selected.

# For Lookup Entity
pm.lookupEntity.header=Client List
pm.lookupEntity.filterByName=Filter by Name:
pm.lookupEntity.NoDataFound=No client found.
pm.lookupEntity.quotation.error=You may not combine single quotation with double quotation in search criteria.

# For Standard Effective To Date Rule Java Validator
## {0} row number
## {1} start date
## {2} end date
pm.standardEffectiveToDateRecordValidator.required.error =Row {0}: Expiration date is required.
pm.standardEffectiveToDateRecordValidator.rule1.error=Row {0}: Expiration date cannot be prior to or equal to effective date.
pm.standardEffectiveToDateRecordValidator.rule2.error=Row {0}: Invalid Date. Date range must be within {1} and {2}.
pm.standardEffectiveToDateRecordValidator.rule3.error=Row {0}: Invalid Date. Risk effective to date must be term expiration date if Suppress CME indicator or Suppress Experience indicator is changed.

# For Standard Retroactive Date Rule Java Validator
## {0} row number
## {1} error message
pm.standardRetroactiveDateRecordValidator.error=Invalid Date. {1}

# For Short Term Effective To Date Rule Java Validator
## {0} row number
pm.shortTermEffectiveToDateRecordValidator.rule.error=Row {0}: Invalid Operation for {1} expiration date. Only one edit for either expiration date or other fields allowed for short term insured.

# For Accounting Month Validator
## {0} row number
pm.accountingMonthCheckRecordValidator.error=Invalid Data. Accounting date is invalid.

# For Available Policy Type Validator
## {0} row number
## {1} policy type
pm.availablePolicyTypeRecordValidator.error = Invalid term date for the policy type, issue company and issue state.

# For Valid Term Duration Validator
## {0} row number
pm.validTermDurationRecordValidator.error=Invalid combination of term dates,  policy type, issue company and issue state.

# For Valid Term Duration Validator
pm.similarPolicyRecordValidator.confirm= Same type of policy exists for the period.  Continue?

# For View Validation Error
pm.viewValidationError.header=Validation Errors

# For Validate and Rate Transaction
pm.validateAndRateTransaction.confirm.annualRate=Limits, Specialty, Territory or % of Premium have changed, therefore annual rate may need adjustment. Do you wish to continue?
pm.validateAndRateTransaction.confirm.fee=A fee will be charged for the transaction.  Do you wish to waive the fee?
pm.validateAndRateTransaction.error.validation=Policy validation failure. Please contact your system administrator.
pm.validateAndRateTransaction.error.miniTail=Mini Tail procedure failure. Please contact your system administrator.
pm.validateAndRateTransaction.error.rating=Rating failure has occurred. Please contact your system administrator.
pm.validateAndRateTransaction.error.tax.update=Tax update failure has occurred. Please contact your system administrator.
pm.validateAndRateTransaction.error.tax.rate.match=Tax Web Service could not find matching tax rates for address {0}. Error message: {1}.
pm.validateAndRateTransaction.error.tax.rate.invoke=Tax Web Service failed when getting tax rates for address {0}. Error message: {1}.
pm.validateAndRateTransaction.rate.official.error=cannot process official policy.

# For transfer dividend
pm_transfer.dividend.header=Transfer Risk Dividend
pm_transfer.dividend.failed.error.info=Dividends transferred failed for selected risk.

# For dividend audit page
pm.view.dividend.audit.header=Dividend Audit
pm.view.dividend.audit.search.header=Search Criteria

# For All PM Pages
pm.save.inprogress.msg = Your previous save request is currently in-progress. You cannot save any changes that you make until you refresh this page to reflect updated information.

# Reissue Policy
pm.transactionmgr.reissueprocessmgr.form.header = Reissue Policy
pm.transactionmgr.reissueprocessmgr.info.coiMessage = The COI(s) that were on the policy at the time of cancellation will not be carried into the reissued term
pm.transactionmgr.reissueprocessmgr.error.overlappingTermDates = Invalid Data.  Term cannot overlap

## {0} The original term effective to date
pm.transactionmgr.reissueprocessmgr.error.bookedTermDate = Invalid Data.  Cannot Reissue with an effective date prior to {0}.  Please Reissue with a later date, or Reinstate and Purge the term ending on {0} first

## {0} policy lock message
pm.transactionmgr.reissueprocessmgr.error.policyNotLocked = {0}

pm.transactionmgr.reissueprocessmgr.error.effectiveAfterExpirationDate = Invalid Data.  Term expiration must be after term effective

## {0} policy type valid message
pm.transactionmgr.reissueprocessmgr.error.invalidCombination = Not a valid combination for policy type {1}
pm.transactionmgr.reissueprocessmgr.effDate.missing=Invalid Data.  Please enter Effective Date.

# Change Term Dates
pm.transactionmgr.changeTermDates.form.header=Change Term Dates
pm.transactionmgr.changeTermDates.effDate.missing=Invalid Data.  Please enter term effective date.
pm.transactionmgr.changeTermDates.expDate.missing=Invalid Data.  Please enter term expiration date.
pm.transactionmgr.changeTermDates.dates.error=Invalid Data.  Term Expiration must be after term effective.
pm.transactionmgr.changeTermDates.termDuration.error=Invalid Data.  Invalid term dates for the policy type.

# Rating Workflow
pm.workflowmgr.rating.invokeValidationMsg.info=Processing validation...
pm.workflowmgr.rating.invokeFeeProcessMsg.info=Processing fee...
pm.workflowmgr.rating.invokeTaxProcessMsg.info=Processing tax...
pm.workflowmgr.rating.invokePrerateProductNotifyMsg.info=Processing pre-rating product notification...
pm.workflowmgr.rating.invokeRatingMsg.info=Processing rating...
pm.workflowmgr.rating.invokeMinitailMsg.info=Processing mini tail...
pm.workflowmgr.rating.invokeFreeMiniTailMsg.info=Processing free mini tail...
pm.workflowmgr.rating.invokePostrateProductNotifyMsg.info=Processing post-rating product notification...
pm.workflowmgr.rating.invokePremiumValidationMsg.info=Processing premium validation...

# Long Running Transactions
pm.workflowmgr.longRunningTransaction.monitorTransactionMsg.info=This might take a while, please wait...
pm.workflowmgr.longRunningTransaction.error=Error processing long running transaction. Please contact your system administrator.

## {0} policy cycle code
pm.workflowmgr.rating.saveAsWip.info={0} has been saved as WIP.

# Save Official Workflow
pm.workflowmgr.save.official.invokeValidationMsg.info=Processing validation...
pm.workflowmgr.save.official.invokeCheckClearingReminderMsg.info=Processing checking clearing reminder...
pm.workflowmgr.save.official.invokeFeeProcessMsg.info=Processing fee...
pm.workflowmgr.save.official.invokeTaxProcessMsg.info=Processing tax...
pm.workflowmgr.save.official.invokePrerateProductNotifyMsg.info=Processing pre-rating product notification...
pm.workflowmgr.save.official.invokeRatingMsg.info=Processing rating...
pm.workflowmgr.save.official.invokeMinitailMsg.info=Processing mini tail...
pm.workflowmgr.save.official.invokePostrateProductNotifyMsg.info=Processing post-rating product notification...
pm.workflowmgr.save.official.invokePremiumValidationMsg.info=Processing premium validation...
pm.workflowmgr.save.official.invokeCoverageBillingMsg.info=Processing Coverage Billing...
pm.workflowmgr.save.official.invokeProductNotifyMsg.info=Processing product notification...
pm.workflowmgr.save.official.invokeOpenClaimsValidationMsg.info=Processing open claims validation...
pm.workflowmgr.save.official.invokeViewRelatedPoliciesMsg.info=Processing display of related policies...
pm.workflowmgr.save.official.invokeProcessSaveOfficialMsg.info=Processing save as official...
pm.workflowmgr.save.official.invokeValidationNotifyMsg.info=Processing validation notification...

pm.workflowmgr.save.official.validateLockedRelPol.warning=At least one of the related policies is in WIP mode. Are you sure you want to continue saving as official?
pm.workflowmgr.save.official.validateLockedRelPol.error=Invalid Operation. Related Policies must be saved as official.

# Save Wip Workflow
pm.workflowmgr.save.wip.invokeProcessSaveWipMsg.info=Processing save as wip...

## {0}transaction_type_code
pm.workflowmgr.save.endQuote.saveAsEndorsementQuote.info=Policy has been saved as {0} quote.
pm.workflowmgr.save.endQuote.processSaveEndQuote.info.SAVE_ERROR=Error processing save as {0} quote.  Policy has been saved as wip.
pm.workflowmgr.endQuote.lockPolicy.info=Locking policy...
pm.workflowmgr.endQuote.lockPolicy.error=Lock Policy failed.
pm.workflowmgr.endQuote.applyEndQuote.info=Applying endorsement quote...
pm.workflowmgr.endQuote.applyEndQuote.success.info=Apply endorsement quote successfully.
pm.workflowmgr.endQuote.applyEndQuote.processBilling.info.BILLING_ERROR==Error processing apply endorsement quote (Billing).
pm.workflowmgr.endQuote.applyEndQuote.processOutput.info.OUTPUT_ERROR=Error processing apply endorsement quote (Output).
pm.workflowmgr.endQuote.applyEndQuote.processUnlock.info.UNLOCK_ERROR=Error processing apply endorsement quote (Unlocking).
pm.workflowmgr.endQuote.applyEndQuote.processComplete.info.COMPLETE_ERROR=Error processing apply endorsement quote (Status).

# Save Coi Holder Workflow
pm.workflowmgr.save.coi.invokeProcessSaveCoiHolderMsg.info=Processing save Coi Holder...
pm.workflowmgr.save.coi.saveAsCoiHolderMsg.info=Coi Holder has been saved.

# Save Additional Insured Workflow
pm.workflowmgr.save.addlins.invokeProcessSaveAdditionalInsuredMsg.info=Processing save Additional Insured...
pm.workflowmgr.save.addlins.saveAsAdditionalInsuredMsg.info=Additional Insured has been saved.

## Rate Transaction workflow
pm.workflowmgr.rate.transaction.rateTransactionMsg.info=Rating is complete.
pm.workflowmgr.rate.transaction.invokeProcessRateTransactionMsg.info=Processing Rating...

## {0} policy cycle code
pm.workflowmgr.save.official.processSaveOfficial.info.SAVE_ERROR=Error processing save as official.  {0} has been saved as wip.
pm.workflowmgr.save.official.processSaveOfficial.info.PM_FM_DISCREPANCY=PM FM Discrepancy found.
pm.workflowmgr.save.official.processSaveOfficial.info.BILLING_ERROR=Billing error found
pm.workflowmgr.save.official.processSaveOfficial.info.OUTPUT_ERROR=Output error found
pm.workflowmgr.save.official.processSaveOfficial.info.UNLOCK_ERROR=Unlock error found
pm.workflowmgr.save.official.processSaveOfficial.info.COMPLETE_ERROR=Complete error found
pm.workflowmgr.save.official.processBilling.info.BILLING_ERROR=Error processing save as official (Billing).  {0} has been saved as wip.
pm.workflowmgr.save.official.processOutput.info.OUTPUT_ERROR=Error processing save as official (Output).  {0} has been saved as wip.
pm.workflowmgr.save.official.processUnlock.info.UNLOCK_ERROR=Error processing save as official (Unlocking).  {0} has been saved as wip.
pm.workflowmgr.save.official.processComplete.info.COMPLETE_ERROR=Error processing save as official (Status).  {0} has been saved as wip.
pm.workflowmgr.save.official.processClearingReminder.info.CLEARING_REMINDER_ERROR=Error processing save as official (Check Clearing Reminder).  {0} has been saved as wip.
pm.workflowmgr.save.saveAsWip.info={0} has been saved as WIP.
pm.workflowmgr.save.official.saveAsOfficial.info={0} has been saved as official.
## {0}transaction_type_code
pm.workflowmgr.save.official.invokeProcessSaveEndQuoteMsg.info=Processing save as {0} quote...

pm.workflowmgr.save.wip.processSaveWip.info.SAVE_ERROR=Error processing save as wip.
pm.workflowmgr.save.official.processBilling.error=Error processing Billing - {0}.
## {0} endorsement or renewal
pm.workflowmgr.save.official.processSaveEndQuote.info.SAVE_ERROR=An error saving the {0} quote has occurred.  Policy has been saved as WIP

pm.workflowmgr.save.tail.official.error.info = Save tail transaction failed.
pm.workflowmgr.save.tail.official.invokeBillingValidationMsg.info=Processing billing relation validation...
pm.workflowmgr.save.tail.official.invokeTailDeltaValidation.info=Processing tail delta validation...

pm.workflowmgr.save.official.processClearingReminder.error=Error processing Check Clearing Reminder - {0}.

## {0} policy cycle code
pm.workflowmgr.save.tail.official.processSaveOfficial.info.SAVE_ERROR=Error processing save as official.  {0} has been saved as official.
pm.workflowmgr.save.tail.official.processBilling.info.BILLING_ERROR=Error processing save as official (Billing).  {0} has been saved as official.
pm.workflowmgr.save.tail.official.processOutput.info.OUTPUT_ERROR=Error processing save as official (Output).  {0} has been saved as official.
pm.workflowmgr.save.tail.official.processUnlock.info.UNLOCK_ERROR=Error processing save as official (Unlocking).  {0} has been saved as official.
pm.workflowmgr.save.tail.official.processComplete.info.COMPLETE_ERROR=Error processing save as official (Status).  {0} has been saved as official.

pm.workflowmgr.confirm.openClaimsValidation=A changed Risk/Coverage has open claims against it.  Do you want to continue saving?

# view tail WorkFlow
pm.workflowmgr.view.tail.invokeViewTailMsg.info=Loading tail data...

#cancel slotoccupant workflow
pm.workflowmgr.saveOccupantCancellation.official.invokeValidationMsg.info=Processing validation...
pm.workflowmgr.saveOccupantCancellation.official.invokeFeeProcessMsg.info=Processing fee...
pm.workflowmgr.saveOccupantCancellation.official.invokeTaxProcessMsg.info=Processing tax...
pm.workflowmgr.saveOccupantCancellation.official.invokePrerateProductNotifyMsg.info=Processing pre-rating product notification...
pm.workflowmgr.saveOccupantCancellation.official.invokeRatingMsg.info=Processing rating...
pm.workflowmgr.saveOccupantCancellation.official.invokeMinitailMsg.info=Processing mini tail...
pm.workflowmgr.saveOccupantCancellation.official.invokePostrateProductNotifyMsg.info=Processing post-rating product notification...
pm.workflowmgr.saveOccupantCancellation.official.invokePremiumValidationMsg.info=Processing premium validation...
pm.workflowmgr.saveOccupantCancellation.official.invokeProductNotifyMsg.info=Processing product notification...
pm.workflowmgr.saveOccupantCancellation.official.invokeOpenClaimsValidationMsg.info=Processing open claims validation...
pm.workflowmgr.saveOccupantCancellation.official.invokeViewRelatedPoliciesMsg.info=Processing display of related policies...
pm.workflowmgr.saveOccupantCancellation.official.invokeProcessSaveOfficialMsg.info=Processing save as official...
pm.workflowmgr.saveOccupantCancellation.official.validateLockedRelPol.warning=At least one of the related policies is in WIP mode. Are you sure you want to continue saving as official?
pm.workflowmgr.saveOccupantCancellation.official.validateLockedRelPol.error=Invalid Operation. Related Policies must be saved as official.
pm.workflowmgr.saveOccupantCancellation.official.error.info = Occupant cancellation failed.
pm.workflowmgr.saveOccupantCancellation.official.success.info = Occupant successfully cancelled.
## {0} policy cycle code
pm.workflowmgr.saveOccupantCancellation.processSaveOfficial.info.SAVE_ERROR=Error processing save as official.  {0} has been saved as Official.
pm.workflowmgr.saveOccupantCancellation.processBilling.info.BILLING_ERROR=Error processing save as official (Billing).  {0} has been saved as Official.
pm.workflowmgr.saveOccupantCancellation.processOutput.info.OUTPUT_ERROR=Error processing save as official (Output).  {0} has been saved as Official.
pm.workflowmgr.saveOccupantCancellation.processUnlock.info.UNLOCK_ERROR=Error processing save as official (Unlocking).  {0} has been saved as Official.
pm.workflowmgr.saveOccupantCancellation.processComplete.info.COMPLETE_ERROR=Error processing save as official (Status).  {0} has been saved as Official.
pm.workflowmgr.saveOccupantCancellation.saveAsWip.info={0} has been saved as Official.
pm.workflowmgr.saveOccupantCancellation.saveAsOfficial.info={0} has been saved as official.

# rerate
pm.reRatePolicy.reRate.noSelection.error=No policies checked for rerating.
pm.reRatePolicy.reRate.maxOnDemandNumber.error=The total number of On-demand rerate cannot be more than {0}. Please perform batch rerate.
pm.reRatePolicy.reRate.onDemandNonNumber.error=System parameter PM_MAX_ONDEMAND_RATE must be configured as a number.
pm.reRatePolicy.reRate.loadReRateOptions.formHeader=Make a Selection
pm.reRatePolicy.reRate.reRateResult.filter.formHeader=Search Criteria
pm.reRatePolicy.reRate.reRateResultList.header=Rerate Requests
pm.reRatePolicy.reRate.reRateResultDetailList.header=Rerate Details
pm.reRatePolicy.reRateResult.nodata.found.error=No data found
pm.reRatePolicy.reRateResult.batchSuccess.msg = Process batch rerate successfully.\\nRequest Id: {0}.

# rerate WorkFlow
pm.workflowmgr.reRate.invokeProcessReRateMsg.info=Processing rerate...
pm.workflowmgr.reRate.reRateMsg.info=Policy has been rerated.
pm.workflowmgr.reRate.processReRate.info.RERATE_ERROR=Error processing {0} rerate.
pm.workflowmgr.reRate.invokeReRateReportMsg.info=Processing rerate report...

# PM FM Discrepancy
##{0} Queue processing mode
pm.pmFmDiscrepancy.interfaceStatus.header={0}
pm.pmFmDiscrepancy.pmFmCompare.header=PM/FM Compare
pm.pmFmDiscrepancy.pmFmTransCompare.header=Transactional Comparison
pm.pmFmDiscrepancy.pmFmTransInterface.header=Transactions to be Processed

# View Related Policy Errors
pm.viewRelatedPolicyError.header=Detail Information

# For Add Slot Occupant
## {0} row number
pm.addSlotOccupant.notSlotRiskType.error=Row {0}:Invalid Operation. Not a Valid slot risk type.
pm.addSlotOccupant.slotOccupied.error=Invalid Operation. Please vacate the occupant first.
pm.addSlotOccupant.slotOccupied.error1=Row {0}:Invalid Operation. Please vacate the occupant first.
pm.addSlotOccupant.ooswipCheck.error=Invalid Operation. Please click the change button first.
pm.addSlotOccupant.ooswipCheck.error1=Row {0}:Invalid Operation. Please click the change button first.

#For Reinstate
pm.maintainreinstate.reinstateForm.header = Reinstate

##{0} error message return from stored procedure
pm.maintainreinstate.customReinstate.error={0}

pm.maintainReinstate.validateTerm.risk.error = Invalid Operation:  Selected risk is only valid for reinstatement in the term it was cancelled.
pm.maintainReinstate.validateTerm.coverage.error = Invalid Operation:  Selected coverage is only valid for reinstatement in the term it was cancelled.
pm.maintainReinstate.validateTerm.coverageClass.error = Invalid Operation:  Selected coverage class is only valid for reinstatement in the term it was cancelled.
pm.maintainReinstate.active.policy.error=Invalid Operation: Policy/Quote is active.
pm.maintainReinstate.active.risk.error=Invalid Operation: Selected risk is active.
pm.maintainReinstate.active.coverage.error=Invalid Operation: Selected coverage is active.
pm.maintainReinstate.active.coverageClass.error=Invalid Operation: Selected coverage class is active.

## For the confirm reinstate {0} level description possibly value is Policy/Risk/Coverage/Coverage Class
pm.maintainReinstate.confirm.continue =Are you sure you want to reinstate the {0}?

# For displays Solo Owner Validation message
pm.maintainReinstate.soloOwnerValidation.error= Owned/Contracted/Employed by risk cannot be reinstated.  Please reinstate the Owner/Contractor/Employer.

# For displays Active Tail Exists message
pm.maintainReinstate.activeTailExists.error=The selected Policy/Risk/Coverage has active tail records.  Please cancel the active tail records before reinstating.

# For reinstate Error Saving
pm.maintainReinstate.error.save=Error processing reinstatement.

# For reinstate policy is eligible
pm.maintainReinstate.policyEligible=There have been multiple reinstatements for this policy.  Do you wish to continue?

# COI Holder
## {0} risk name
## {1} risk effective from date
## {2} risk effective to date
pm.maintainCoi.coiGridList.header=COI Information (Risk: {0}, {1} - {2})
pm.maintainCoi.save.error = Error saving Coi information. Please contact your system administrator.
pm.maintainCoi.coiForm.header=COI Detail


## {0} row number
pm.maintainCoi.dateOutsideTermDates.error=Row {0}: Invalid Data.  Start/End Date must be within risk effective period.
pm.maintainCoi.invalidEndDate.error=Row {0}: Invalid Data.  End Date cannot be before Start Date.
pm.maintainCoi.startDateNull.error=Row {0}: Invalid Data.  Start Date cannot be empty.
pm.maintainCoi.endDateNull.error=Row {0}: Invalid Data.  End Date cannot be empty.
## {0} row number
## {1} row number
pm.maintainCoi.invalidContinuity.error=Invalid Data: Row {0} and {1} have same name. Date ranges cannot overlap.

pm.generateCoi.noselection.error=Invalid Process.  Please click check box first -- Select to Generate.
pm.generateCoi.asOfDate.error1=As of date must be greater than the risk effective date.
pm.generateCoi.asOfDate.error2=As of date must be 1 day less than risk expiration date.
pm.generateCoi.save.failed.error=Error processing COI's. Please contact your system administrator.
pm.generateCoi.save.success.info=Job submitted successfully.
pm.generateCoi.asOfDate.empty.error=As of date cannot be empty.

# Generate Additional Insured
pm.generateAddIns.noselection.error=Invalid Process.  Please click check box first -- Select to Generate.
pm.generateAddIns.asOfDate.error1=As of date must be greater than the additional insured effective date.
pm.generateAddIns.asOfDate.error2=As of date must be 1 day less than the additional insured expiration date.
pm.generateAddIns.asOfDate.empty.error=As of date cannot be empty.

# Generate Client COI
pm.generateClientCoi.gridList.header=COI Holder List
## {0} As of Date
## {1} the comma delimited policy list
pm.generateClientCoi.asOfDate.error=The following policies do not qualify for the as of date: {0}. Do you want to continue? {1}
pm.generateClientCoi.asOfDate.beforeRiskEffFromDate.error=As of date must be greater than the risk effective date.
pm.generateClientCoi.asOfDate.afterRiskEffToDate.error=As of date must be 1 day less than risk expiration date.


# Affiliation
## {0} risk name
## {1} risk effective from date
## {2} risk effective to date
pm.maintainAffiliation.affiliationGridList.header=Affiliation (Risk: {0}, {1} - {2})
pm.maintainAffiliation.affiliationForm.header=Affiliation Detail
pm.captureAffiliationStartDate.empty.error=Start Date cannot be empty.
pm.maintainAffiliation.selectVapB.warning=Started the VAP/RAPLA, VAP/RAPLA discount should be added.
pm.maintainAffiliation.deSelectVapB.warning=Terminated the VAP/RAPLA, VAP/RAPLA discount should be cancelled.
pm.maintainAffiliation.overLapForSameOrgAndAffiType.error=Only one affiliation with the same organization allowed during overlap time range.

## {0} row number
pm.maintainAffiliation.startDateTransDateMatch.error=Row {0}: Invalid Data.  Start Date must match the Transaction Effective Date.
pm.maintainAffiliation.endDateTransDateMatch.error=Row {0}: Invalid Data.  To expire, End Date must match the Transaction Effective Date.
pm.maintainAffiliation.dateOutsideTermDates.error=Row {0}: Invalid Data.  Start/End Date must be within risk effective period.
pm.maintainAffiliation.invalidEndDate.error=Row {0}: Invalid Data.  End Date cannot be before Start Date.
pm.maintainAffiliation.invalidVapStatus.error=Row {0}: VAP status requires primary affiliation with an insured hospital.
pm.maintainAffiliation.invalidPercentPractice.error=Row {0}: Percent of practice cannot be over 100%.
pm.maintainAffiliation.overLapForTotalPractice.error=Percent of practice for same time period cannot total over 100% for term {0}.
pm.maintainAffiliation.overLapForAwpurchgrpTypeCount.error=Only one affiliation with purchasing group allowed during overlap time range
pm.maintainAffiliation.overLapForPrimaryAffiliationCount.error=Only one primary affiliation allowed during overlap time range.
pm.maintainAffiliation.overLapForVapCount.error=Only one VAP allowed during overlap time range.
pm.maintainAffiliation.invalidTransactionDate.error=Invalid transaction date for the affiliation.
## For minitail
pm.processMinitail.nodata.error = No data found.
pm.processMinitail.riskCoverage.header = Risk & Coverage: {0}
pm.processMinitail.minitail.header = Mini Tail Detail
pm.processMinitail.form.header = Apply basis

## {0} row no
pm.processMinitail.ratingBasis.error = Row {0}: Invalid Operation for Risk {1}, Coverage {2}. Rating basis value is not valid

pm.processMinitail.onSave.error = Your previous save request is not yet completed. Please refresh the page before you save any changes.

#transactionGrid
#transaction#
pm.transaction.nodata.error=No data found
pm.transaction.save.error=Save error!
pm.transaction.transactionGrid.header=Transaction Information
pm.transaction.changeDetailGrid.header=Change Detail
pm.transaction.form.header=Transaction Detail
pm.transaction.transactionFormGrid.header=Transaction Forms

# Manuscript
pm.maintainManu.manuscriptList.header=Manuscript List
pm.maintainManu.manuscriptForm.header=Manuscript Information
pm.maintainManu.detailList.header=Manuscript Detail
pm.maintainManu.detailForm.header=Detail Information
pm.maintainManu.nodata.error=No data found.
pm.maintainManu.upload.error=Failed to save the RTF file. Please contact your system administrator.
pm.maintainManu.extract.error=Failed to extract the RTF file. Please contact your system administrator.
pm.maintainManu.dataEntry.saveFirst=Please save your changes first.
pm.maintainManu.allTermOverlapDates.error=Time period cannot overlap with the same manuscript form code in all terms.

## {0} row number
pm.maintainManu.renewal.invalid.error=Row {0}: Invalid Data.  Renew flag should be set to No for manuscripts where the duration has been defined.
pm.maintainManu.additionalText.tooLong=Row {0}: Invalid Data. Additional Text is too long to fit the field, the max length is 3000.

## {0} row number
## {1} current transaction effective from date
## {2} last policy term effective to date
pm.maintainManu.expDate.outside.policyDate.error=Row {0}: Invalid Data.  Expiration date must be between {1} and {2}.

## {0} row number
pm.maintainManu.expDate.after.covgExpDate.error=Row {0}: Invalid Data.  Expiration date cannot be after coverage expiration.

## {0} row number
pm.maintainManu.expDate.notMatch.tranEffDate.error=Row {0}: Invalid Data.  To expire, End Date must match the Transaction Effective Date.

## {0} row number
pm.maintainManu.expDate.premium.extend.termExpDate.error=Row {0}: Invalid Data.  Only non-premium manuscript endorsement can be added for more than 1 term.

## {0} row number
## {1} row number
pm.maintainManu.duplicate.error=Invalid Data.  Form duplicate (check row {0} and row {1}).

pm.maintainManu.addManu.noSelection.error=Invalid Operation.  Please select an endorsement form.

pm.maintainManu.expireManu.invalid.error=Row {0}: Invalid Data.  When expiring a record, data in other editable fields cannot be changed.

pm.maintainManu.sameOffVersionExists.error=Invalid Data. Manuscript endorsement version which is from same official record exists in same time period.

# For View Tax page
pm.viewTaxInfo.taxTrans.header=Transaction Information
pm.viewTaxInfo.taxList.header=Tax Detail
pm.viewTaxInfo.taxList.noDataFound=No data found. Please rate first.

# For Maintain Tax page
pm.maintainTax.riskList.header=Risk
pm.maintainTax.taxList.header=Tax Information
pm.maintainTax.taxForm.header=Tax Detail
pm.maintainTax.emptyState.error=Invalid Data.  State cannot be empty.
pm.maintainTax.invalidCombination.error=Invalid Data.  Only the following combinations are valid: State, State/County and State/City.
pm.maintainTax.overlapDates.error=Invalid Data.  Time period cannot overlap under risk and tax level. Available tax level: State, State/County and State/City.
pm.maintainTax.minEndDate.error=Invalid Data.  End date cannot be prior to Transaction Effective Date.
pm.maintainTax.maxEndDate.error=Invalid Data.  End date cannot be after the manual-tax expiration date.  
pm.maintainTax.conflictEdit.error=Invalid Data.  When expiring/extending a record, data in other editable fields cannot be changed.
pm.maintainTax.taxLevel.error=Invalid Data.  Tax level cannot be changed after official.
pm.maintainTax.saveTaxInfo.error=Invalid Data. {0}

# For Maintain Underlying Coverage page
pm.maintainUnderlyingCoverage.expLessTanEff.error=Effective Date must be less than or equal to Expiration Date.
pm.maintainUnderlyingCoverage.invalidEffectiveFromDate.error=Effective Date cannot be prior to Term Effective Date.
pm.maintainUnderlyingCoverage.invalidDate.error=Row {0}: Invalid Data.  Expiration date must be between {1} and {2}.
pm.maintainUnderlyingCoverage.retroDate.required.error = Retro Date is required.
pm.maintainUnderlyingCoverage.retroGreaterEff.error = Retro Date must be less than or equal to Effective Date.
pm.maintainUnderlyingCoverage.sameOffVersionExists.error=Invalid Data. Underlying policy version which is from same official record exists in same time period.
pm.maintainUnderlyingCoverage.currentTermOverlapDates.error = Time period cannot overlap for row {0} and {1} with the same policy no {2} and some coverage {3}.
pm.maintainUnderlyingCoverage.allTermOverlapDates.error = Time period cannot overlap with the same policy no and same coverage.
pm.maintainunderlyingCoverage.conflictEdit.error = Row {0}: Invalid Data. When expiring/extending a record, data in other editable fields cannot be changed.

# For Maintain underlying relation page
pm.maintainUnderlyingRelation.current.policy.header=(Current Policy)
pm.maintainUnderlyingRelation.related.policy.header=(Related Policy)
pm.maintainUnderlyingRelation.noActiveCoverage=No active coverage available.
pm.maintainUnderlyingRelation.noSelection.error=Please select one record on each section.

#batchRenewal,changeDetailGrid,transactionFormGrid
#batchRenewalProcess#
pm.batchRenewalProcess.nodata.error=No qualifying policies were found to renew.
#{0} submitted policy number
pm.batchRenewalProcess.create.info={0} Pre-Renewal process(es) submitted successfully.
pm.batchRenewalProcess.create.twoSteps.info={0} Automatic-Renewal process(es) submitted successfully.
pm.batchRenewalProcess.security.error=You do not have access to renew these policies.
pm.batchRenewalProcess.operation.error=Operation failed.The pre-renewal progress did not complete.
pm.batchRenewalProcess.inprogress.error=Renewal process still in progress.Please try again later.
#{0} policy type
pm.batchRenewalProcess.inprogress.another.error=Another Renewal process is in progress for {0} policy type.Please try again later.
pm.batchRenewalProcess.inprogress.another.noarg.error=Another Renewal process is in progress.Please try again later.
pm.batchRenewalProcess.invalid.data.range.error=Invalid Data.The Policy Exp To date should be greater than the policy Exp From date.
pm.batchRenewalProcess.date.range.error=Invalid Data.The duration of renewal dates cannot be longer than 12 months.
#{0} auto renewal max day
pm.batchRenewalProcess.dates.toofar.error=Invalid Data.The Policy Exp To date cannot be more than {0} days after today.
pm.batchRenewalProcess.renewalEvent.gridHeader=Renewal Events
pm.batchRenewalProcess.renewalDetail.gridHeader=Policies
pm.batchRenewalProcess.renewalDetail.abortSearch.gridHeader = Search aborted because renewal event detail list is too large. First {0} of records listed.
pm.batchRenewalProcess.termType.null.error=Invalid Data.  Please enter term type.
pm.batchRenewalProcess.dates.null.error=Invalid Data.  Please enter search dates.
pm.batchRenewalProcess.endDate.prior.startDate.error=Invalid Data.  End date should be after start date.
pm.batchRenewalProcess.unsaved.data.error=Changes exist and will be lost. Do you wish to continue?
pm.batchRenewalProcess.noSelection.error=Please select one renewal event record.
pm.batchRenewalProcess.nodata.found.error=No data is found.
pm.batchRenewalProcess.searchCriteria.Header=Search Criteria

#generate renewal questionnaire
#{0}=<Policy Type Description> is the sub-string before symbol '-' of the Policy Type column in the Questionnaire List.
#{1}=<Risk Class Description> is the Type column in the Questionnaire List Grid.
pm.generateRenewalQuestionnaire.search.header=Search
pm.generateRenewalQuestionnaire.mailingdate.header=Mailing Date
pm.generateRenewalQuestionnaire.generate.header=Renewal Questionnaire
pm.generateRenewalQuestionnaire.information.header=Information
pm.generateRenewalQuestionnaire.system.error=System error. Please contact your system administrator.
pm.generateRenewalQuestionnaire.noQuestionnaire=No data exists for policy year for the specified date range.
pm.generateRenewalQuestionnaire.startSearchDate.empty=Please enter a valid Start Search Date.
pm.generateRenewalQuestionnaire.endSearchDate.empty=Please enter a valid End Search Date.
pm.generateRenewalQuestionnaire.questionnaireType.empty=Please select a questionnaire type.
pm.generateRenewalQuestionnaire.noQuestionnaireSelected=Please select a questionnaire.
pm.generateRenewalQuestionnaire.abandonGenerateQuestionnaire=Do you want to generate questionnaire(s) for selected item(s)?
pm.generateRenewalQuestionnaire.questionnaire.alreadySent=Questionnaire for {0}/{1} has already been sent.
pm.generateRenewalQuestionnaire.secondMailingDate.lessSystemDate=Invalid Second Mailing Date. Mailing Dates cannot be less than system date.
pm.generateRenewalQuestionnaire.thirdMailingDate.lessSystemDate=Invalid Third Mailing Date. Mailing Dates cannot be less than system date.
pm.generateRenewalQuestionnaire.deadlineDate.lessSystemDate=Invalid Deadline Date. Mailing Dates cannot be less than system date.
pm.generateRenewalQuestionnaire.thirdMailingDate.lessSecondMailingDate=Third Mailing Date should be after Second Mailing.
pm.generateRenewalQuestionnaire.deadlineDate.lessThirdMailingDate=Deadline Date should be after Third Mailing Date.
pm.generateRenewalQuestionnaire.maxQuestionnaire=Search aborted because questionnaire list is too large. First {0} questionnaires listed.

#renewal questionnaire mailing event
pm.renewalQuestionnaireMailingEvent.search.header=Search
pm.renewalQuestionnaireMailingEvent.filter.header=Filter
pm.renewalQuestionnaireMailingEvent.find.header=Find
pm.renewalQuestionnaireMailingEvent.mailingevent.header=Mailing Event
pm.renewalQuestionnaireMailingEvent.questionnaire.header=Mailing Event Questionnaire
pm.renewalQuestionnaireMailingEvent.questionnaire.detail.header=Detail
pm.renewalQuestionnaireMailingEvent.capture.header=Error Message
pm.renewalQuestionnaireMailingEvent.saveComment.fail=Error saving questionnaire comments.
pm.renewalQuestionnaireMailingEvent.save.changed=Save changes?
pm.renewalQuestionnaireMailingEvent.save.continue=Continue to search?
pm.renewalQuestionnaireMailingEvent.save.success=Complete successfully.
pm.renewalQuestionnaireMailingEvent.addRenewal.policyNo.empty=Policy number is required.
pm.renewalQuestionnaireMailingEvent.addRenewal.riskName.empty=Risk is required.
pm.renewalQuestionnaireMailingEvent.addRenewal.policyNo.invalid=Invalid policy number.
pm.renewalQuestionnaireMailingEvent.addRenewal.fail=Cannot add renewal questionnaire. Please contact your system administrator.
pm.renewalQuestionnaireMailingEvent.print.fail=Error while printing.
pm.renewalQuestionnaireMailingEvent.print.success=Print completed successfully.
pm.renewalQuestionnaireMailingEvent.print.unsavedDate=Changes must be saved before Printing.
pm.renewalQuestionnaireMailingEvent.updateSendDate.fail={0}.
pm.renewalQuestionnaireMailingEvent.print.options.empty=Please select a option.
pm.renewalQuestionnaireMailingEvent.print.sendDate.empty=Invalid Operation. Must Print ALL at least one before RESEND.
pm.renewalQuestionnaireMailingEvent.print.resend.nothing=All Received - Nothing to Resend.

#renewal questionnaire response
pm.renewalQuestionnaireResponse.search.header=Search Criteria
pm.renewalQuestionnaireResponse.date.header=Dates
pm.renewalQuestionnaireResponse.response.header=Responses
pm.renewalQuestionnaireResponse.url.missing=URL is not specified. Please contact your system administrator.
pm.renewalQuestionnaireResponse.questionnaire.notExists=No data exists for policy {0} and selected specialty.
pm.renewalQuestionnaireResponse.webIdentifier.empty=Unable to retrieve web identifier. Please contact your system administrator.
pm.renewalQuestionnaireResponse.saveDate.success=Successfully saved renewal questionnaire information.
pm.renewalQuestionnaireResponse.saveResposne.error={0}
pm.renewalQuestionnaireResponse.saveResposne.success=Successfully saved renewal questionnaire responses.
pm.renewalQuestionnaireResponse.saveData.error=Error saving data. Please contact your system administrator.
pm.renewalQuestionnaireResponse.policyNo=\ Policy No:
pm.renewalQuestionnaireResponse.response.info=Changes made to responses will be saved when you click on the Next/Finish options.

## {0} type (Issue or Print)
pm.batchRenewalProcess.eventInProgress.error=Another {0} process is still in progress for this event. Cannot proceed with this request.

## {0} error message
pm.batchRenewalProcess.save.error={0}

pm.batchRenewalProcess.commonAnniversary.noPolicyType.info=No common anniversary policy types found.
pm.batchRenewalProcess.commonAnniversary.noTermDates.error=Cannot find term dates for the policy year {0}.
pm.batchRenewalProcess.commonAnniversary.noCompletion.error=The Pre-renewal process did not complete.
pm.batchRenewalProcess.issue.failed.error=Operation Failed.  The issue process did not submit.
pm.batchRenewalProcess.issue.success.info=Issue process submitted successfully.
pm.batchRenewalProcess.print.failed.error=Error submitting documents for printing.
pm.batchRenewalProcess.print.success.info=Documents successfully submitted for printing.
pm.batchRenewalProcess.print.noSelection.error=Please select print device.
pm.batchRenewalProcess.merge.selection.error=Please select at least two renewal events to merge.
pm.batchRenewalProcess.delete.failed.error=Operation Failed.  The delete WIP process did not submit.
pm.batchRenewalProcess.delete.success.info=Delete WIP process submitted successfully.
pm.batchRenewalProcess.rerate.failed.error=Operation Failed.  The Rerate process did not submit.
pm.batchRenewalProcess.rerate.success.info=Rerate process submitted successfully.
pm.batchRenewalProcess.release.failed.error=Operation Failed. The release process did not complete.
pm.batchRenewalProcess.release.success.info=Release process operated successfully.
pm.batchRenewalProcess.release.no.policy.info=No Qualifying Policies because all were excluded.

# JS alert message
pm.batchRenewalProcess.existInBatch.afterSaveOfficial.info=Policy is part of a Renewal Batch. Please select Auto-Renew option from the Policy Action dropdown.
pm.batchRenewalProcess.processAutoRenewal.manually.info=Please process the Auto Renewal manually.
pm.batchRenewalProcess.processAutoRenewal.manually.phaseNotQualify.info=Policy has a Phase that does not qualify it for a Batch. Please process the policy manually.

# prompt message
pm.batchRenewalProcess.addToBatch.qualify.afterAutoRenew.prompt=Policy qualifies for Auto Renewal with an existing Renewal Batch. Do you want to add the policy to the Batch?
pm.batchRenewalProcess.addToBatch.notQualify.afterAutoRenew.prompt=Policy does not currently qualify for Auto Renewal with an existing Renewal Batch. Do you want to add the policy to the Batch to be Auto Saved as Official when it qualifies in the future?

## {0} row number
pm.batchRenewalProcess.merge.policyType.mismatch.error=Row {0}: Invalid data.  Renewal Events to merge should have same policy type.
## {0} row number
pm.batchRenewalProcess.merge.nonPrerenewal.error=Row {0}: Invalid data.  Renewal Events to merge should have a process code of pre-renewal.
## {0} row number
pm.batchRenewalProcess.merge.nonCommon.anniversaryDate.mismatch.error=Row {0}: Invalid data.  Renewal Events to merge should have same effective dates.
## {0} row number
pm.batchRenewalProcess.merge.common.anniversaryDate.mismatch.error=Row {0}: Invalid data.  Renewal Events to merge should fall within the same renewal term dates.

cs.policy.activityHistory.displayInformation = Policyholder Name: {0}

# For Risk Relation
## {0} Reverse or "", {1} risk name, {2} risk effective from date, {3} risk effective to date
pm.maintainRiskRelation.header={0} Relationship(s) for: {1}, {2} - {3}

## {0} total count of policy insured, {1} total count of company insured, {2} total count of Non-Insured
## {3} Count of Active policy insured, {4} Count of Active company insured, {5} Count of Active Non-Insured
## {6} Count of Cancelled policy insured, {7} Count of Cancelled company insured, {8} Count of Cancelled Non-Insured
## {3} - {8} are not displayed by default.  They are available for customization.
pm.maintainRiskRelation.riskRelationList.header=Relationship List - PI({0}), CI({1}), NI({2})

pm.maintainRiskRelation.riskRelationForm.header=Relationship/Rating Info
pm.maintainRiskRelation.noRelation.data.info=There are no relationships established for this policy.
pm.maintainRiskRelation.noRisk.error=Select a Risk to work on.
pm.maintainRiskRelation.autoRiskRelation.success.info=Newly added risk(s) have had risk relationship(s) assigned automatically.
pm.maintainRiskRelation.autoRiskRelation.multipleOwnerRiskType.warning=Auto risk relationship process was not performed due to multiple parent risks.
pm.maintainRiskRelation.autoRiskRelation.incompleteDueToMultipleParents.warning=Auto risk relationship processing was incomplete due to the types of risks added. Please review the risk relationship screen.

## {0} row number
pm.maintainRiskRelation.ratingBasis.nullOrNegative.error=Row {0}: Invalid Data.  Annual Premium must be positive.
## {0} row number
pm.maintainRiskRelation.niRisk.invalid.error=Row {0}: Invalid Data.  Not a valid entity for the risk type.
## {0} row number
## {1} row number
pm.maintainRiskRelation.niDate.overlap1.error=Invalid Data.  Time period cannot overlap for Non Ins Fte with the same County, Specialty and type code on row {0} and {1}.
## {0} row number
## {1} row number
pm.maintainRiskRelation.niDate.overlap2.error=Invalid Data.  Time period cannot overlap for same person on row {0} and {1}.
## {0} row number
## {1} row number
pm.maintainRiskRelation.piOrCiDate.overlap.error=Invalid Data.  Time period cannot overlap for same policy on row {0} and {1}.
## {0} row number
pm.maintainRiskRelation.riskRelationType.required.error=Invalid Data.  Relationship is required at row {0}.
## {0} row number
pm.maintainRiskRelation.riskType.required.error=Invalid Data.  Risk type is required at row {0}.
## {0} row number
pm.maintainRiskRelation.practiceStateCode.required.error=Invalid Data.  Practice state is required at row {0}.
## {0} row number
pm.maintainRiskRelation.countyCode.required.error=Invalid Data.  County is required at row {0}.
## {0} row number
pm.maintainRiskRelation.specialty.required.error=Invalid Data.  Specialty is required at row {0}.
## {0} row number
pm.maintainRiskRelation.niCoverageLimit.required.error=Invalid Data.  Coverage limit is required at row {0}.
## {0} row number
pm.maintainRiskRelation.ratingBasis.required.error=Invalid Data.  Annual premium amount is required at row {0}.
pm.maintainRiskRelation.save.failed.error=Error processing risk relation save, Please contact your system administrator.
pm.maintainRiskRelation.selectPolInsRiskList.header=List
pm.maintainRiskRelation.selectPolInsRiskForm.header=Defaults
pm.maintainRiskRelation.selectPolInsRisk.noData.error=No active risk(s) available.
pm.maintainRiskRelation.selectPolInsRisk.noSelection.error=Invalid operation.  Please select a risk.
pm.maintainRiskRelation.selectCompInsRisk.noData.error=No active policy available.
pm.maintainRiskRelation.selectCompInsRisk.noSelection.error=Invalid operation.  Please select a policy.
## {0} name of risk relationship entity
pm.maintainRiskRelation.prodCovgCode.error=Invalid Data.  Unable to get product coverage information for non insured {0}.
pm.maintainRiskRelation.delete.changedRecord.warning=All of the relation records to the same risk and policy will be deleted. Do you wish to continue?

## {0} error message when reinstate risk relation
pm.reinstateRiskRelation.save.error=Error: {0}.

pm.reverseRiskRelation.title=Reverse Risk Relationship

# Rating/Product Notify/Save as Official Detail workflow
pm.workflowmgr.saveAsOfficial.invokeRatingMsg.info=Processing rating...
pm.workflowmgr.saveAsOfficial.invokeProductNotifyMsg.info=Processing product notification...
pm.workflowmgr.saveAsOfficial.invokeViewRelatedPoliciesMsg.info=Processing display of related policies...
pm.workflowmgr.saveAsOfficial.invokeProcessSaveOfficialMsg.info=Processing save as official...
pm.workflowmgr.saveAsOfficial.validateLockedRelPol.warning=At least one of the related policies is in WIP mode. Are you sure you want to continue saving as official?
pm.workflowmgr.saveAsOfficial.validateLockedRelPol.error=Invalid Operation. Related Policies must be saved as official.
pm.workflowmgr.saveAsOfficial.success.info=Your operation is Successfully finished.
pm.workflowmgr.saveAsOfficial.error.info=Save transaction failed.
pm.workflowmgr.saveAsOfficial.processRating.error=An error has occurred while rating. Please contact your system administrator.
## {0} policy cycle code
pm.workflowmgr.saveAsOfficial.processSaveOfficial.info.SAVE_ERROR=Error processing save as official.  {0} has been saved as Official.
pm.workflowmgr.saveAsOfficial.processBilling.info.BILLING_ERROR==Error processing save as official (Billing).  {0} has been saved as Official.
pm.workflowmgr.saveAsOfficial.processOutput.info.OUTPUT_ERROR=Error processing save as official (Output).  {0} has been saved as Official.
pm.workflowmgr.saveAsOfficial.processUnlock.info.UNLOCK_ERROR=Error processing save as official (Unlocking).  {0} has been saved as Official.
pm.workflowmgr.saveAsOfficial.processComplete.info.COMPLETE_ERROR=Error processing save as official (Status).  {0} has been saved as Official.
pm.workflowmgr.saveAsOfficial.info={0} has been saved as official.

# Select Address
pm.selectAddress.header=Available Address(s)
pm.transferUnderwriter.underwriters.header=Underwriting Team Member
pm.transferUnderwriter.policyDetails.header=Policy Details
pm.transferUnderwriter.searchCriteria.header=Search Criteria
pm.transferUnderwriter.policyList.header=Policy List
pm.transferUnderwriter.policyList.abortSearch.header = Search aborted because policy list is too large.  First {0} policies listed.

pm.transferUnderwriter.noPolicySelected.error=Please select at least one policy.
pm.transferUnderwriter.targetUnderwriterNotSelected.error=Please enter value for new underwriter.
pm.transferUnderwriter.sameFromAndToUnderwriter.error=From and to underwriter cannot be the same.
pm.transferUnderwriter.policyList.noDataFound=No policy exists for underwriter and date specified.
pm.transferUnderwriter.fromEntityChanged.error=From underwriter has changed from initial search. Please search again.
pm.transferUnderwriter.effDateChanged.error=Effective date has changed from initial search. Please search again.
pm.transferUnderwriter.success.info=Operation completed successfully.

pm.selectAddress.NoSelection.error=Please select at least one address.
pm.selectAddress.singleSelect.error=Only one address can be selected.

#unlock policy
pm.maitainUnlockPolicy.unlockSucess = Policy Unlocked Successfully
pm.maitainUnlockPolicy.listHeader = Policy List
pm.maitainUnlockPolicy.abortSearch.listHeader = Policy list is too large. First {0} listed
pm.maitainUnlockPolicy.noPolicySelected.error = No Policies Selected for unlocking
pm.maitainUnlockPolicy.noData.error = No policies match entered criteria.
pm.maitainUnlockPolicy.fail.error = Error Unlocking Policy. Please contact your system administrator.
pm.maitainUnlockPolicy.unlockResult = {0} Policies Unlocked Successfully. {1} Errors Encountered.
pm.maitainUnlockPolicy.searchForm.header = Search Criteria

#maintain underlying policy
pm.maintainUnderlyingPolicy.policyNo.required.error = Policy number is required.
pm.maintainUnderlyingPolicy.effDate.required.error = Effective Date is required.
pm.maintainUnderlyingPolicy.expDate.required.error = Expiration Date is required.
pm.maintainUnderlyingPolicy.invalidEffectiveFromDate.error = Effective Date cannot be prior to Term Effective Date.
pm.maintainUnderlyingPolicy.invalidEffectiveToDate.error = Expiration Date cannot be after Term Expiration Date.
pm.maintainUnderlyingPolicy.expLessTanEff.error = Effective Date must be less than or equal to Expiration Date.
pm.maintainUnderlyingPolicy.retroDate.required.error = Retro Date is required.
pm.maintainUnderlyingPolicy.retroGreaterEff.error = Retro Date must be less than or equal to Effective Date.
pm.maintainUnderlyingPolicy.noActivePolicy = No active policy available.
pm.maintainunderlyingPolicy.underlyingPolicyForm.header = Detail Info
pm.maintainunderlyingPolicy.underlyingPolicyList.header = Underlying Info
pm.maintainunderlyingPolicy.activePolicyList.header = Policy List
pm.maintainunderlyingPolicy.deteMustOverlap.error = Date error. Policy Date Must Overlap.
pm.maintainunderlyingPolicy.conflictEdit.error = Row {0}: Invalid Data. When expiring/extending a record, data in other editable fields cannot be changed.
pm.maintainunderlyingPolicy.allTermOverlapDates.error = Time period cannot overlap with the same policy no and same coverage.
pm.maintainUnderlyingPolicy.invalidDate.error = The Coverage Effective Date or the Coverage Expiration Date must be within the current Policy Term.
pm.maintainunderlyingPolicy.currentTermOverlapDates.error = Time period cannot overlap for row {0} and {1} with the same policy no {2} and some coverage {3}.
pm.maintainunderlyingPolicy.sameOffVersionExists.error=Invalid Data. Underlying policy version which is from same official record exists in same time period.

# Risk Copy Address/Phone
pm.copyAddrPhone.addressPhone.header=Address/Phone
pm.copyAddrPhone.addressPhoneList.header=Address/Phone List
pm.copyAddrPhone.addressPhoneForm.header=Address/Phone Detail
pm.copyAddrPhone.changeDateForm.header=Change Date
pm.copyAddrPhone.riskNameList.header=Copy To List
pm.copyAddrPhone.nodata.error=No Data Found.
pm.copyAddrPhone.addrPhone.noselection.error=Please select an address/phone number.
pm.copyAddrPhone.copyToRisk.noselection.error=Please select a destination entity.
pm.copyAddrPhone.changeDate.missing.error=Change Date is required.
pm.copyAddrPhone.changeDate.afterToday.error=Address cannot be copied with an effective date after today's date.
pm.copyAddrPhone.changeDate.beforeEff.error=Change date must be on or after the address effective from date.
## {0} error message returned from copy procedure
pm.copyAddrPhone.copy.process.failure={0}
pm.copyAddrPhone.copy.system.failure=Error copying address/phone information. Please contact your system administrator.
## {0} warning message
pm.copyAddrPhone.copy.warning.message={0}
pm.copyAddrPhone.copy.success.message=Address/Phone information successfully copied.

## For VL Coverage
pm.maintainVLCoverage.expGreaterThaneff.error = Invalid Data. Expiration date cannot be before effective date.
pm.maintainVLCoverage.rateBiasRange.error = Invalid Data. Rating basis must be between 0 and 100.
pm.maintainVLCoverage.relationDateRange.error = Invalid Data. Relation date range cannot be over term data range.
pm.maintainVLCoverage.ratingDateRange.error = Invalid Data. Rating date range cannot be over relation data range.
pm.maintainVLCoverage.practiceState.required.error = Invalid Data. Practice state is required.
pm.maintainVLCoverage.county.required.error = Invalid Data. County is required.
pm.maintainVLCoverage.specialty.required.error = Invalid Data. Specialty is required.
pm.maintainVLCoverage.recordDuplicate.error = Row {0} and {1} overlap. Time period cannot overlap for same name.
pm.maintainVLCoverage.effGreaterTransEff.error = The original VL coverage effective date is after transaction date, it may be adjusted.
pm.maintainVLCoverage.noData.error = No Data.
pm.maintainVLCoverage.saveData.error = Save data failed. Please contact your system administrator.
pm.maintainVLCoverage.riskList.header = Employee List
pm.maintainVLCoverage.employeeInfo.header = Employee Info
pm.maintainVLCoverage.rateInfo.header = Rating Info

## For amalgamation
pm.amalgamation.invalidPolicyNo.error={0}
pm.amalgamation.invalidDestinationPolicyNo.error=Destination policy must be different than the source policy.
## {0}: policy no 1  {1}: policy no 2
pm.amalgamation.pmDiary.note=Amalgamation linkage between {0} and {1} linkage is broken.
pm.amalgamation.saveAsOfficialConfirm.info=This transaction was created as a result of an amalgamation.  The original cancellation has not saved as official yet.  Do you wish to continue?
pm.amalgamation.saveAsOfficialFowardConfirm.info=Do you wish to view the amalgamated policy?
## {0}: policy no for destination policy
pm.amalgamation.success.info=Amalgamation has been completed successfully to policy {0}.

## For maintain regional team
pm.viewInsuredHistory.noDataFound=No Data Found
pm.regional.team.header=Underwriting Team
pm.regional.team.memeber.header=Team Member
pm.regional.team.information=Team Information
pm.regional.team.member.information=Member Information
## {0}: RowNum 1  {1}: RowNum 2
pm.regional.team.hasSameTeamCode=Please Enter different regional team code (check row {0} and row {1}).
pm.regional.team.required=Team is required.
pm.regional.description.required=Description is required.
pm.regional.name.required=Name is required.
pm.regional.startdate.required=Start Date is required.
pm.regional.enddate.required=End Date is required.
## {0}: RowNum 1  {1}: RowNum 2
pm.regional.team.member.duplicate1=The Team member cannot be duplicate (check row {0} and row {1}).
pm.regional.team.member.duplicate2=Row {0} and Row {1}: Time period cannot overlap.
pm.regional.team.member.underwriter.duplicate=Each team can only have one underwriter (check row {0}).
pm.regional.team.no.member.underwriter=Each team must have one underwriter (check row {0}).
pm.regional.team.member.underwriter.duplicate.error=An underwriter can only be on one team (underwriter is already on team {0}).
## {0}: RowNum
pm.regional.team.member.date.error=Row {0}: Team member Start Date should be before End Date.

## For part time notes
pm.partTimeNotes.searchCriteria.header=Search Criteria
pm.partTimeNotes.notesList.header=Note List
pm.parTimeNotes.notesListForm.header=Note Detail
pm.partTimeNotes.emptyPolicyNo.error=Please enter a policy number.
pm.partTimeNotes.emptyRisk.error=Please select a risk.
pm.partTimeNotes.emptyOccupant.error=Please select an occupant.
pm.partTimeNotes.noDataFound=No Data found.
pm.partTimeNotes.clearConfirm=Changes exist and will be lost. Do you wish to continue?
pm.partTimeNotes.invalidPolicyNo=Invalid Policy number.
## {0}: row number
pm.partTimeNotes.invalidDate.error=Row {0}: Expiration date must be after Effective date.
## {0}: row number 1, {1}: row number 2
pm.partTimeNotes.overlapTimePeriod.error=Row {0} and Row {1}: Time period cannot overlap.

## For premium worksheet
pm.premiumworksheet.transactionLog.error=Please work with transaction(s) in current term.
pm.premiumworksheet.noData=No Data. Please rate first or this transaction is not a premium bearing transaction.

## For process Rm component
pm.processingRmComponent.event.header=Processing Event
pm.processingRmComponent.detail.header=Processing Detail
pm.processingRmComponent.date.error=Start Date must be less than End Date.
pm.processingRmComponent.transEffDate.required=Transaction Effective Date is required.
pm.processingRmComponent.startDate.required=Start Date is required.
pm.processingRmComponent.endDate.required=End Date is required.
pm.processingRmComponent.process.confirmation=Do you want to process the RMT classification also?
pm.processingRmComponent.save.error=Error has occurred during save processing event. Please contact your system administrator
pm.processingRmComponent.unsave.data=RM Processing Event Changed. Changes must be saved to continue.
pm.processingRmComponent.process.error=Error has occurred during RM discount processing. Please contact your system administrator
pm.processingRmComponent.process.completed=RM Discount Processing has completed.
## {0}: return error message
pm.processingRmComponent.discount.error={0}

## For process Corp/Org component
pm.processingCorpOrgComponent.search.header=Search Criteria
pm.processingCorpOrgComponent.member.header=Members
pm.processingCorpOrgComponent.noMember=No Members for Selected Discount, Client and Transaction date.
pm.processingCorpOrgComponent.process.error=Error has occurred during Org/Corp discount processing. Please contact your system administrator
pm.processingCorpOrgComponent.process.completed=Corp/Phys Org Discount Processing has completed.
pm.processingCorpOrgComponent.noHistory=No Discount History exists for this Client.
## {0}: return error message
pm.processingCorpOrgComponent.discount.error={0}

## For maintain excess coverage
pm.maintainExcessCoverage.prior.header=Prior Carrier
pm.maintainExcessCoverage.current.header=Current Carrier
## {0}: row number
pm.maintainExcessCoverage.prior.limitLessZero=Row {0}: Invalid Data. Prior Carrier - Limit cannot be negative.
## {0}: row number
pm.maintainExcessCoverage.prior.limit.decimalPlace.error=Row {0}: Invalid Data. Prior Carrier - Limit cannot be more than two decimal places.
## {0}: row number 1, {1}: row number 2
pm.maintainExcessCoverage.prior.periodOverlap=Prior Carrier duplicate, check row {0} and row {1}.
## {0}: row number
pm.maintainExcessCoverage.prior.date.rang.error=Row {0}: Invalid Data. Prior Carrier - The Start Date cannot be after the End Date.
pm.maintainExcessCoverage.currentCarrier.date.rang.error=Invalid Data. Current Carrier - The Start Date cannot be after the End Date.
pm.maintainExcessCoverage.currentCarrier.limitLessZero=Invalid Data. Current Carrier - Limit cannot be negative.
pm.maintainExcessCoverage.currentCarrier.limit.decimalPlace.error=Invalid Data. Current Carrier - Limit cannot be more than two decimal places.
pm.maintainExcessCoverage.currentCarrier.pointLessZero=Invalid Data. Current Carrier - Attachment point cannot be negative.
pm.maintainExcessCoverage.currentCarrier.point.decimalPlace.error=Invalid Data. Current Carrier - Attachment point cannot be more than two decimal places.
pm.maintainExcessCoverage.currentCarrier.retroDateError=Invalid Data. Current Carrier - Retro Date cannot be After Policy Term Effective Date.
## {0}: row number
pm.maintainExcessCoverage.prior.carrier.required=Row {0}: Prior Carrier - Carrier is required.
## {0}: row number
pm.maintainExcessCoverage.prior.startDate.required=Row {0}: Prior Carrier - Start Date is required.
## {0}: row number
pm.maintainExcessCoverage.prior.endDate.required=Row {0}: Prior Carrier - End Date is required.
## {0}: row number
pm.maintainExcessCoverage.prior.limit.required=Row {0}: Prior Carrier - Limit is required.
pm.maintainExcessCoverage.currentCarrier.carrier.required=Current Carrier - Carrier is required.
pm.maintainExcessCoverage.currentCarrier.broker.required=Current Carrier - Broker is required.
pm.maintainExcessCoverage.currentCarrier.startDate.required=Current Carrier - Start Date is required.
pm.maintainExcessCoverage.currentCarrier.endDate.required=Current Carrier - End Date is required.
pm.maintainExcessCoverage.currentCarrier.limit.required=Current Carrier - Limit is required.
pm.maintainExcessCoverage.currentCarrier.point.required=Current Carrier - Attachment Point is required.
pm.maintainExcessCoverage.currentCarrier.retroactive.required=Current Carrier - Retroactive Date is required.

## For Application List
pm.applicationList.policyTerm.header=Select Policy Term
pm.applicationList.list.header=Application List for selected term
pm.applicationList.display.header=Application

## For View Premium Accounting Date
pm.viewPremiumAccounting.date.header=Premium Accounting Dates
pm.viewPremiumAccounting.generate.error=Failed to generate data. Please contact your system administrator.
pm.viewPremiumAccounting.rate.error=Please rate first.
pm.viewPremiumAccounting.data.empty=No premium information.
pm.viewPremiumAccounting.periodDates.error=Period to must be after period from.
pm.viewPremiumAccounting.periodFrom.required=Period From is required
pm.viewPremiumAccounting.periodTo.required=Period To is required
pm.viewPremiumAccounting.transactionDate.required=Transaction Date is required
pm.viewPremiumAccounting.accountingDate.required=Accounting Date is required
## {0}: the maximum number of rating log
pm.viewPremiumAccounting.ratingLog.exceedMax=The rating log records exceed the maximum number of {0} for display, please use the \"Export(Excel)\" to retrieve all records.

## For purge policy, flat cancel/decline short term policy
pm.specialTrans.createTransaction.error=Unable to create transaction. Please contact your system administrator.
pm.specialTrans.cancelPolicy.error=Unable to cancel the policy. Please contact your system administrator.
pm.specialTrans.ratingPolicy.error=Unable to rate the policy. Please contact your system administrator.

## For process mass component
pm.process.mass.component.header=Individual Component Update
## {0}: component description
pm.process.mass.component.duplicated.error = Invalid Operation. Component {0} already exists.
## {0}: return message
pm.process.mass.component.apply.info={0}
## {0}: row number
pm.process.mass.component.value.error=Row {0}: Component value should be in the range between low value and high value.
pm.process.mass.component.action.error=Row {0}: Action cannot be empty.
pm.process.mass.component.rate.error=Rating failure has occurred.
pm.process.mass.component.rate.info=Rating is complete.

## For quick quote
pm.quickQuote.hasFileHeader.confirm=Does this file contain a header line?
pm.quickQuote.fileNotExist=File does not exist.
## {0}: returned message
pm.quickQuote.processResult.info={0}

pm.excessPremium.save.error=Save data failed. Please contact your system administrator.
## {0}: column number from 1~5
pm.excessPremium.Confirm.ifContinue=Difference for column {0} is not zero. Do you want to continue?

## For view cancellation detail
pm.viewCancellationDetail.transactionSnapshot.header=Cancellation Snapshot
pm.viewCancellationDetail.termSnapshot.header=Term Information
pm.viewCancellationDetail.policyComponentSnapshot.header=Policy Discount/Deductible/Surcharge Information
pm.viewCancellationDetail.riskSnapshot.header=Risk Information
pm.viewCancellationDetail.coverageSnapshot.header=Coverage Information
pm.viewCancellationDetail.coverageComponentSnapshot.header=Coverage Discount/Deductible/Surcharge Information

## For delete wip transaction
pm.deleteWIPTransaction.workflowExist.error=You may not delete WIP transaction while workflow is in progress.

# For Maintain select Procedure Code page
pm.selectProcedureCode.filterCriteria.header=Filter
pm.selectProcedureCode.procedureList.header=Procedure Code

# For Create Coi Batch Renewal page
pm.createCoiRenewal.search.header=Criteria
pm.createCoiRenewal.system.error=Unable to generate COI form. Please contact the System Administrator.
pm.createCoiRenewal.endDate.prior.startDate.error=End Date should be after Start Date.
pm.createCoiRenewal.success.info=COI form generation process submitted successfully.

# For COI Renewal Event page
pm.coiRenewal.renewalEvent.resultHeader=Summary
pm.coiRenewal.renewalEvent.gridHeader=Renewal Events
pm.coiRenewal.renewalEventDetail.gridHeader=Detail
pm.coiRenewal.dates.null.error=Please enter search dates.
pm.coiRenewal.endDate.prior.startDate.error=End date should be after start date.
pm.coiRenewal.nodata.found.error=No Data.
pm.coiRenewal.noPolicy.found.error=Policy not found.

## For View Professtional Entity Details page
pm.viewProfEntityDetails.search.header=Search Criteria
pm.viewProfEntityDetails.trans.header=Transactions
pm.viewProfEntityDetails.details.header=Transaction Details
pm.viewProfEntityDetails.no.transaction=No Entity Details information found.

## For View Quick Pay Details page
pm.viewQuickPayDetails.transactionSummaryLayer.header=Transaction Summary
pm.viewQuickPayDetails.quickPayTransactionList.header=Quick Pay Transactions
pm.viewQuickPayDetails.riskCoverageList.header=Risks/Coverages
pm.viewQuickPayDetails.quickPayTransactionList.noDataFound.error=No Quick Pay Transactions Data
pm.viewQuickPayDetails.transactionSummaryLayer.noDataFound.error=No Transaction Summary Data

## For Manage Quick Pay page
pm.manageQuickPay.search.header=Search Criteria
pm.manageQuickPay.summaryLayer.header=Summary
pm.manageQuickPay.transactionHistoryList.header=Transaction History
pm.manageQuickPay.summaryList.noDataFound.error=No Summary Data
pm.manageQuickPay.transactionHistoryList.noDataFound.error=No Transaction History Data
pm.manageQuickPay.shortTermPolicy.error=Cannot give discount to short term policy.
pm.manageQuickPay.save.error = Unable to save Quick Pay data. Please contact your system administrator.
pm.manageQuickPay.unsavedData.error=Changes will be lost. Do you wish to continue?

## For Quick Pay Transaction Detail page
pm.quickPayTransactionDetail.transactionSummaryLayer.header=Transaction Summary
pm.quickPayTransactionDetail.riskCoverageList.header=Risks/Coverages
pm.quickPayTransactionDetail.summaryList.noDataFound.error=No Transaction Summary Data
pm.quickPayTransactionDetail.riskCoverageList.noDataFound.error=No risk/coverage Data
## {0} row number
pm.quickPayTransactionDetail.qpAmountBlankOrZero.error=Row {0}: Quick Pay amount must be greater than zero.
## {0} row number
pm.quickPayTransactionDetail.qpAmountRange.error=Row {0}: QuickPay amount cannot be greater than the eligible amount.
pm.quickPayTransactionDetail.save.error = Unable to save Quick Pay data. Please contact your system administrator.

## For Process Quick Pay Transaction Detail page
pm.processQuickPay.origTransactionLayer.header=Orig. Transaction Info.
pm.processQuickPay.quickPayAccounting.header=QP Accounting Date and Amount
pm.processQuickPay.riskCoverageList.header=Risks/Coverages
pm.processQuickPay.origTransInfoLayer.noDataFound.error=No Transaction Data
pm.processQuickPay.riskCoverageList.noDataFound.error=No risk/coverage Data
pm.processQuickPay.noDiscountsToRemove.error=No Discounts to Remove
pm.processQuickPay.discountExists.error=Discount already exists.
pm.processQuickPay.shortTermPolicy.error=Cannot give discount to short term policy.
pm.processQuickPay.validateProcedureFailed.error=PM_Covg_QP_Val Procedure Failed.
pm.processQuickPay.invalidTransAmount.error=Invalid Transaction Amounts. No Risks Eligible for Discount.
pm.processQuickPay.qpAmountBlankOrZero.error=Quick Pay amount must be greater than zero.
pm.processQuickPay.qpAmountGreaterThanTransAmount.error=Discount amount cannot be greater than the transaction amount.
pm.processQuickPay.indDiscountGreaterThanIndAmount.error=Individual Discount cannot be greater than Individual Amount.
pm.processQuickPay.save.error = Unable to save Quick Pay data. Please contact your system administrator.

## For coverage billing
pm.coverageBilling.billingRelation.error=Invalid Operation, Incomplete billing relation.

## For Home Page
pm.home.page.description=&nbsp;This application is used to add and maintain data<br>&nbsp;in the Policy Management System.<br><br>&nbsp;Use the menu on the top to navigate through this application.

## For Policy Searching
pm.maintainPolicy.search.moreCriteria=More Criteria
pm.maintainPolicy.search.lessCriteria=Less Criteria
pm.maintainCoverage.navigate.header=Navigate

## For Policy Common Information
pm.common.policy.actions=Policy Actions
pm.common.policy.folder=Policy Folder
## {0} policy number, {1} begin term, {2} end term
pm.common.policy.header.information=Policy #: {0}, Term: {1} - {2}
pm.common.policy.information=Policy Information
## For policy header navigation information
pm.common.policy.header.navigation.information=Term
## {0} record counts
pm.common.searchResult.header=Search aborted because policy list is too large. First {0} policies listed.
pm.common.process.notCompleted=Your previous save request is not yet completed. Please refresh the page before you save any changes.
pm.common.page.button.ok=OK
pm.common.validate.policyNo.error=Please enter a valid Policy number.
## {0} function name
pm.common.handle.saveOption.error=Function {0} does not exist.
pm.common.miniEntity.open.error=Entity information is not recorded in the system.
## {0} error name, {1} error message
pm.common.row.selected.error=commonOnRowSelected: An exception occurred in the script. Error name: {0}. Error message: {1}
## {0} web element id
pm.common.getRecord.run.error=error in run:oRecord.{0} = gridId.recordset.Fields.Item(i).value
pm.common.list.validTerm.select.error=You must select a valid term from the list.
## {0} popup page name
pm.common.miniPopup.noEntityId.error=Contact Customer Service - no entityId for opening mini popup for:{0}
pm.common.notes.functionality.notAvailable.error=Error:  notes functionality not available.
pm.common.fileNumber.determine.error=Unable to determine the ImageRight file number.
pm.common.wip.delete.confirm=Are you sure you wish to Delete WIP?
pm.common.clickOk.changesLost.confirm=Data has been changed; if you click on OK, changes will be lost.
pm.common.selected.record.delete.confirm=Are you sure you want to delete the selected record?
## popup message for UI Tab style
pm.subTab.reserved.clickOk.changesWitoutSave.confirm=Data has been changed on main page; if you click on OK, changes will not be saved.
pm.subTab.real.clickOk.changesLost.confirm=Data has been changed on sub tab; if you click on OK, changes will be lost.
## {0} current policy sequence, {1} total policy counts
pm.common.list.navigation.direction=Policy {0} of {1}
pm.common.unsaved.changes.error={0} changes must be saved prior to accessing {1}.

## For Specific Page Headers
## For Manual Excess Premium
pm.maintainExcessPremium.form.header=Manual Excess Premium

## For Free Mini Tail
pm.miniTail.form.header=Free Mini Tail

## For Quick Quote
pm.processQuickQuote.loadResult.header=Load Result

## For Maintain BatchRenewal
pm.maintainBatchRenewalDetailProcess.filter.header=Filter
pm.renewalQuestionResponsePopup.header.policyNo=Policy No:

## For Maintain Risk Relation
pm.maintainRiskRelation.header.reverse=Reverse

## For Maintain Schedule
pm.maintainSchedule.scheduleList.header.for=for
pm.maintainSchedule.scheduleList.header.coverage=Coverage:

## For Policy Core
pm.pmcore.closePage.error=Error:
pm.pmcore.closePage.information=Information:

## For Specific JavaScript Messages Using
pm.maintainCoverage.getLimitShared.error=Please Expire Limit Sharing for coverage first.
pm.maintainExcessCoverage.handleOnBlur.error=Please enter a number.
pm.generateCoiAsOfDate.coiHolder.select.error=Please select at least one COI Holder to generate.

## For undo Term JavaScript Message Using
##{0} term effective date
pm.undoTerm.confirm.continue=All terms effective {0} forward will be undone. Are you sure?
pm.undoTerm.getPrevTermDate.error=Error in Getting Previous Term
pm.undoTerm.getPrevTermInfo.error=Error Getting Term Information for Undo transaction

# For Manage Additional Sql page
pm.manageAddtionalSql.addlSqlInfo.header=Additional SQL Information

# For Create Batch Renewal page
pm.createBatchRenewalProcess.header=Renewal Criteria

## For View Shared Limit page
pm.viewSharedLimitInfo.sharedLimitFilter.header=Filter
pm.viewSharedLimitInfo.sharedLimitList.header=Shared Limit Detail
pm.viewSharedLimitInfo.sharedLimitList.noDataFound=No Data found.

## For View Claims Summary page
pm.viewClaimsSummary.header.claims=Claims
pm.viewClaimsSummary.risk.select.error=No valid entity risk found.
pm.viewClaimsSummary.noDataFound.error=No Claims Summary Data.

## For Process Distribution
pm.process.distribution.header=Distribution Information
pm.process.distribution.dateExisted.error=Invalid Date. Distribution date already exists.
pm.process.distribution.zeroData.error=Distribution percentage cannot be zero.
pm.process.distribution.unSaved.error=Data must be saved before processing.
pm.process.distribution.noDataFound.error=No Data found.
pm.process.distribution.process.success=Distribution calculation job successfully submitted.
pm.process.distribution.catchUp.calendarYear.null.error=Please enter start date for catching up dividend.
pm.process.distribution.catchUp.success=Process Catch Up job successfully submitted.
pm.process.distribution.invalidEffectiveToDate.error=Expiration Date cannot be prior to effective Date.
pm.process.distribution.calcTrans.dateExisted.error=Invalid Date. Same Issue Company/Issue State/Policy Type/Risk Type/Coverage Type Distribution date already exists.

## For Process ERP page
pm.processErp.search.header=Search Criteria
pm.processErp.erpList.header=ERP List
## {0} Total Distinct Policy Number
pm.processErp.erpGrid.header=Total No. Of Policies:{0}
pm.processErp.erpForm.header=ERP Information
pm.processErp.claimDetail.header=Claim Detail
pm.processErp.error.policy.page.title=View Error Policies
pm.processErp.error.policy.header=Batch Delete Errors
pm.processErp.noProcessDate.error=Please enter Process Date.
pm.processErp.noIssueState.error=Please Select Issue State.
pm.processErp.processErp.error=Unable to process ERP data. Please contact your system administrator.
## {0} Process ERP Success Information
pm.processErp.processErp.success={0}
pm.processErp.deleteBatch.noBatchNo.error=Please Select Batch No.
## {0} ERP Batch Number
pm.processErp.deleteBatch.confirmation=ERP Batch No {0} will be deleted. Are you sure?
## {0} Delete ERP Batch Success or Fail Information
pm.processErp.deleteBatch.result={0}
pm.processErp.saveErp.comments.too.long.error=Comments should not be more than 500 characters.
pm.processErp.saveErp.error=Unable to save ERP data. Please contact your system administrator.
pm.processErp.noErpDataFound.information=No eligible risks found for experience discount processing.

# For Select Associated Risk Type
pm.selectAssociatedRisk.header=Associated Risk List
pm.selectAssociatedRisk.NoDataFound=No Associated risk found.

# For IBNR Inactive Risks page
pm.associatedRisk.header=Associated Risk
pm.sssociatedRisk.NoDataFound=No Associated risk found.
pm.ibnrInactiveRisk.header=IBNR Inactive Risk Detail
pm.ibnrInactiveRisk.NoDataFound=No IBNR Inactive risk found.
pm.associatedRiskForInactiveRisk.header=Associated Risks for Inactive IBNR
pm.maintainInactive.associatedRiskNameRequired.error=Selected Associated risk name cannot be empty.
pm.maintainInactive.inactiveRiskHasClaimAttached.error=The following inactive risks have claims against them: {0}.
pm.maintainInactive.ibnrFromDateBeforeIbnrToDate.error=Row {0}: IBNR From date must be less than or equal to the IBNR To date.
pm.cancel.ibnrRisk.confirm=Do you wish to default IBNR inactive details for the cancelled risk?
pm.workflowmgr.default.ibnr.invokeDefaultIbnrDetailNotifyMsg.info=Processing IBNR...
pm.workflowmgr.default.ibnr.invokeViewAssociatedRiskMsg.info=Processing associated risk...
pm.workflowmgr.default.ibnr.invokeViewIbnrInactiveRiskMsg.info=View IBNR inactive risk...
pm.maintainInactive.addAssociatedRisk.riskExists.error=Invalid Operation. Selected risk already exists.
pm.maintainInactive.detail.required.error=Please add IBNR inactive risk details for newly added associated risk.
pm.maintainRisk.isReinstateIbnrRiskValid.info=IBNR Inactive information was modified after cancellation.  Please review the IBNR Inactive information and adjust as needed.
pm.maintainInactive.unsavedData.error=Changes exist, please save it first.
# {0} Row number
pm.maintainInactive.nameRequried.error=Row {0}: IBNR Inactive Risk Detail - Name is required.
pm.maintainInactive.fromDateRequried.error=Row {0}: IBNR Inactive Risk Detail - IBNR From Date is required.
pm.maintainInactive.toDateRequried.error=Row {0}: IBNR Inactive Risk Detail - IBNR To Date is required.
pm.maintainInactive.riskTypeRequried.error=Row {0}: IBNR Inactive Risk Detail - Risk Type is required.
pm.maintainInactive.practiceStatetRequried.error=Row {0}: IBNR Inactive Risk Detail - Practice State is required.
pm.maintainInactive.countyRequried.error=Row {0}: IBNR Inactive Risk Detail - County is required.
pm.maintainInactive.specialtyRequried.error=Row {0}: IBNR Inactive Risk Detail - Specialty is required.
pm.maintainInactive.limitRequried.error=Row {0}: IBNR Inactive Risk Detail - Limit is required.
pm.maintainInactive.invalidPtPercent=PT % must between 0% and 100%.

## For Process Dividend
pm.dividend.maintain.search.header=Search Criteria
pm.dividend.maintain.list.header=Dividend Declaration Information
pm.dividend.maintain.save.error=Unable to save data. Please contact your system administrator.
pm.dividend.maintain.process.success.info=Dividend's successfully processed.
pm.dividend.maintain.validation.noData.error=Please enter dividend percentage or amount.
pm.dividend.maintain.validation.bothData.error=Dividend percentage and amount cannot be defined together.
pm.dividend.maintain.validation.invalidPct.error=Invalid dividend percentage, the value should between 0 and 100.
pm.dividend.maintain.validation.invalidAmount.error=Invalid dividend amount, the value should more than 0.
pm.dividend.process.search.header=Search Policy Type
pm.dividend.process.priorList.header=Prior Calculations
pm.dividend.process.filter.header=Search Calculated Dividends
pm.dividend.process.calculated.header=Calculated Dividends
pm.dividend.process.calculated.noDataFound.error=No records found.
pm.dividend.process.post.confirm=Are you sure you want to post?
pm.dividend.process.post.noRecord.select=Invalid operation. Please click check box first.
pm.dividend.process.post.success.info=Dividend's successfully posted.
pm.dividend.calculate.parameter.header=Enter Parameters
pm.dividend.calculate.validation.accountingDate.error=Accounting date is invalid.
pm.dividend.calculate.validation.percentage.error=Dividend percentage must be less than 100%.
pm.dividend.calculate.validation.noPercentage.error=Please enter dividend percentage.
pm.dividend.calculate.process.confirm=Processing may take a while. Do you wish to continue?
## {0} Detail error messages for calculate dividend
pm.dividend.calculate.failed.error=Error: {0}
pm.dividend.report.noDataFound.error=No data found.
pm.dividend.report.search.header=Search Criteria
pm.dividend.report.list.header=Summary
pm.dividend.report.filter.header=Filter Criteria
pm.dividend.report.detail.header=Detail

## For Process ACF page
pm.processAcf.product.header=Product Data
pm.processAcf.override.header=Overrides
pm.processAcf.result.header=Results
pm.processAcf.fee.header=Fees
pm.processAcf.result.total.header=Total
pm.processAcf.product.noDataFound=No data found. Please contact your administrator.
pm.processAcf.add.override.noProductSelected=Please select a record to override first.
pm.processAcf.add.fee.entity.missing=Row {0}: Entity is required for fee data.
pm.processAcf.add.fee.amt.missing=Row {0}: Fee Amt is required for fee data.
pm.processAcf.add.override.missing=Row {0}: All fields are required for a newly added override record.
pm.processAcf.add.override.percent.invalid=The entered Allocation and/or Commission values must equal 100.
pm.processAcf.add.override.flat.invalid=The Total Transaction Premium must equal the entered Allocation and/or Commission values.
pm.processAcf.filter.header=Filter Criteria

## For Predictive Analytics
pm.predictiveAnalytics.request.header=Scoring Requests
pm.predictiveAnalytics.filter.header=Filter
pm.predictiveAnalytics.result.header=Scoring Results
pm.predictiveAnalytics.reason.header=Scoring Reasons
## {0}: the message returned from DB
pm.predictiveAnalytics.process.error={0}
pm.predictiveAnalytics.process.modelType.required=Model Type is required.
pm.predictiveAnalytics.process.requestType.required=Score Request Type is required.

pm.predictiveAnalyticsErrors.atLeastOneSearchCriteria.error=At least one search criteria must be entered.
pm.predictiveAnalyticsErrors.searchCriteria.reqStartDateAfterEndDate.error=Score Req End Date must be after Score Req Start Date.
pm.predictiveAnalyticsErrors.invalidInputData.error=Missing policy, term or model required information.
pm.predictiveAnalyticsErrors.invalidTransaction.error=The current transaction is not valid for scoring.
pm.predictiveAnalyticsErrors.onlyNewBusDuringEndorsement.error=During an endorsement transaction, only New Business scoring can be selected.
pm.predictiveAnalyticsErrors.noAddedRisks.error=No risk found that were added by the current endorsement transaction.
pm.predictiveAnalyticsErrors.invalidRisk.error=Data problems found with the extracted risk records.  Please correct the data and re-process.

## For Credit Stacking
pm.creditStacking.search.header=Search Criteria
pm.creditStacking.headerInfo.header=Header Information
pm.creditStacking.appliedInfo.header=Applied Information
pm.creditStacking.filter.header=Filter
pm.creditStacking.noDataFound=No data found.
pm.creditStacking.search.empty=Please select a risk/coverage first

## For Short Term Policy
pm.shortTermPolicy.acceptPolicy.cancel=Accept Policy Cancelled.
pm.shortTermPolicy.acceptPolicy.error=Accept Policy Failed.
pm.shortTermPolicy.acceptPolicy.success=Accept Policy Successfully.
pm.shortTermPolicy.declinePolicy.error=Decline Policy Failed.
pm.shortTermPolicy.invokeAcceptShortTermPolicyMsg.info=Accepting short term policy...
pm.shortTermPolicy.createAcceptPolicyTransaction.error=Unable to create accept policy transaction. Please contact your system administrator.

## For Maintain National Program page
pm.maintainNationalProgram.nationalProgramList.header=Program List
pm.maintainNationalProgram.nationalProgramForm.header=Program Detail
pm.maintainNationalProgram.noRisk.error=Select a Risk to work on.
pm.maintainNationalProgram.programRequired.error=Row {0}: Program Detail - Program is required.
pm.maintainNationalProgram.primaryRequired.error=Row {0}: Program Detail - Primary is required.
pm.maintainNationalProgram.expirationDateRequired.error=Row {0}: Program Detail - Expiration Date is required.
pm.maintainNationalProgram.fromDateBeforeToDate.error=Row {0}: Effective Date must be less than or equal to the Expiration Date.
pm.maintainNationalProgram.noPrimaryNationalProgram.error=Invalid Data. No Primary Program exists for period {0} - {1}.
pm.maintainNationalProgram.overLapForPrimaryNationalProgramCount.error=Row {0}: Invalid Data. Multiple Primary Programs exist for the same time period.
pm.maintainNationalProgram.overLapForSameNationalProgram.error=Row {0}: Invalid Data. The same program exists for the same time period.
pm.maintainNationalProgram.PrimaryBExpiratinoDate.rule.error=Row {0}: Invalid Operation. Only one edit for either primary indicator or expiration date allowed.
pm.maintainNationalProgram.dateOutsideTermDates.error=Row {0}: Invalid Data.  Effective From/To Date must be within risk effective period.

## For PM Web Services
ws.policy.inquiry.policy.id.element.required=<PolicyId> element is required when <PolicyTermNumberId> element is provided for Policy Inquiry Web Service.
ws.policy.inquiry.one.id.element.required=At least one element is required for Policy Inquiry Web Service.
ws.policy.inquiry.party.inquiry.error=Error while invoking the Party Inquiry Service.
ws.policy.inquiry.transaction.status.code.filter.invalid = Policy does not have transaction in requested status.
ws.policy.inquiry.policy.id.invalid = Policy ID: {0} does not exist in the system.
ws.policy.inquiry.policy.term.id.invalid = Policy term ID: {0} does not exist in the system.
ws.policy.premium.inquiry.policy.element.required=Either Policy number or policy term history ID is required for Policy Premium Inquiry Web Service.
ws.policy.premium.inquiry.transaction.status.code.filter.invalid = Policy does not have transaction in requested status.
ws.policy.premium.inquiry.policy.id.invalid = Policy ID: {0} does not exist in the system.
ws.policy.premium.inquiry.policy.term.id.invalid = Policy term ID: {0} does not exist in the system.
ws.policy.quote.in.official=Quote {0} is not in official status.
ws.policy.quote.processCopyDenyAccept.quoteTempVersionExists.error=Cannot process Copy/Deny/Accept for quote {0}. Multiple Quote versions exist in WIP.
ws.policy.quote.processCopyDenyAccept.quoteEndorsementExists.error=Cannot process Copy/Deny/Accept for quote {0}. The quote is in WIP endorsement transaction.
ws.policy.quote.processCopyDenyAccept.ineligibleQuote.error=Cannot process Copy/Deny/Accept for quote {0}. The quote is not eligible for these operations.

ws.policy.change.lock.policy=Invalid Request: Cannot lock policy {0}.
ws.policy.change.new.policy.required=Invalid Data. The following element(s) are required for new policy: {0}.
ws.policy.change.new.risk.version=Invalid Data. The following element(s) {0} are required for new insured version.
ws.policy.change.new.coverage.version=Invalid Data. The following element(s) {0} are required for new coverage version.
ws.policy.change.new.component.version=Invalid Data. The following element(s) {0} are required for new component version.
ws.policy.change.existing.policy.required=Invalid Data. The following element(s) cannot be modified when endorsing policy: {0}.
ws.policy.change.existing.risk=Invalid Data. The following element(s) {0} cannot be modified for insured id {1}.
ws.policy.change.existing.coverage=Invalid Data. The following element(s) {0} cannot be modified for coverage id {1}.
ws.policy.change.existing.subcoverage=Invalid Data. The following element(s) {0} cannot be modified for coverage class id {1}.
ws.policy.change.existing.component=Invalid Data. The following element(s) {0} cannot be modified for component id{1}.
ws.policy.change.existing.risk.version=Invalid Data. The following element(s) {0} cannot be modified for insured version {1}.
ws.policy.change.existing.component.version=Invalid Data. The following element(s) {0} cannot be modified for component id {1}.
ws.policy.change.invalid.update=Invalid Data. {0}
ws.policy.change.one.policy.term=Invalid Data. Only one policy and term change per request is supported. Multiple found in {0}.
ws.policy.invalid.xml.date=Invalid XML date: {0}. Valid format: yyyy-mm-dd
ws.policy.change.new.transaction=Invalid Data. Transaction Effective Date is required.
ws.policy.change.duplicate.risk.input=Invalid Data. Insured with entity_id {0} already exists on the policy.
ws.policy.change.duplicate.coverage.input=Invalid Data. Coverage {0} already exists on the risk {1}.
ws.policy.change.duplicate.coverage.class.input=Invalid Data. Coverage Class {0} already exists on the coverage {1}.
ws.policy.change.duplicate.component.input=Invalid Data. Component {0} already exists on coverage {1}.
ws.quote.accept.multiple.policies.input=Invalid Data. Only one Quote is supported in the input for MedicalMalpracticeQuoteAcceptRequest.
ws.policy.change.agent.invalid.agent=Invalid Data. {0}.
ws.policy.change.agent.newbusCommBasis.required=Invalid Data. NB Comm Basis is required in policy {0}
ws.policy.change.agent.renewalCommBasis.required=Invalid Data. Renewal Comm Basis is required in policy {0}
ws.policy.change.agent.newbusCommBasis.ereCommBasis=Invalid Data. ERE Comm Basis is required in policy {0}
ws.policy.change.version.invalid=Invalid version changes in {0}. The transaction date is out of the version period range.
ws.policy.change.transaction.date.invalid=TransactionEffectiveDate is invalid. The date should be between {0} and {1}
ws.policy.change.term.invalid=Invalid Data. The provided PolicyTermNumberId {0} does not exist, please provide a valid term base id.
ws.policy.change.version.not.exist=Invalid Data. Version with id {0} does not exist.
ws.policy.change.originalPolicy.policyId.noMatch.input=Invalid Data. The policy id in original data is not matched with the policy id in changed data.
ws.policy.change.existing.riskAddtlExp.version=Invalid Data. The following element(s) {0} cannot be modified for insured additional territory {1}.
ws.policy.change.issueCompany.invalid.clientId=Invalid Data.Client Id {0} for issue company is invalid.

ws.policyNumberGeneration.required=Invalid Data. The following element(s) are required for policy number generation: {0}.
ws.policyNumberGeneration.failed.error=Failed to create policy number. Please report the error to your system administrator.
ws.policyNumberGeneration.policyNumber.existing=A policy with the same number already exists.
ws.policyNumberGeneration.policyNumber.unavailable=There is no policy number available.
ws.policyNumberGeneration.issueCompIdentifier.invalid=Issue Company Identifier is invalid.

ws.policyCertificateOfInsuranceChange.required=Invalid Data. The following element(s) are required for COI generation: {0}.
ws.policyCertificateOfInsuranceChange.invalid.parameters=Invalid Data. Input parameters term effective date or coi id or policy term id is invalid.
ws.policyCertificateOfInsuranceChange.generation.warning=Warning. Generate indicator value needed for COI generation.
ws.policyCertificateOfInsuranceChange.system.parameter.warning=COI holder cannot be generated due to PM_CALL_DOC system parameter.

ws.quote.copy.changedQuote.policy.required=Invalid Data. MedicalMalpracticePolicy element is required in the input for MedicalMalpracticeQuoteCopyRequest element.
ws.quote.copy.changedQuote.policyId.required=Invalid Data. The policy id is required in the input for MedicalMalpracticeQuoteCopyRequest element.
ws.quote.copy.one.quote.input=Invalid Data. Only one Quote and its change per request is supported. Multiple found in {0}.
ws.quote.copy.originalQuote.policyId.noMatch.input=Invalid Data. The policy id in original data is not matched with the policy id in changed data.
ws.quote.copy.change.risk.required=Invalid Data. The following element(s) {0} are required to be modified for insured id {1}.
ws.quote.copy.change.coverage.required=Invalid Data. The following element(s) {0} are required to be modified for coverage id {1}.
ws.quote.copy.change.subcoverage.required=Invalid Data. The following element(s) {0} are required to be modified for sub coverage id {1}.
ws.quote.copy.change.component.required=Invalid Data. The following element(s) {0} are required to be modified for component id {1}.
ws.quote.copy.change.risk.version.required=Invalid Data. The following element(s) {0} are required to be modified for insured key {1}.
ws.quote.copy.change.coverage.version.required=Invalid Data. The following element(s) {0} are required to be modified for coverage key {1}.
ws.quote.copy.change.subcoverage.version.required=Invalid Data. The following element(s) {0} are required to be modified for subcoverage key {1}.
ws.quote.copy.change.component.version.required=Invalid Data. The following element(s) {0} are required to be modified for component key {1}.
ws.quote.copy.lock.policy=Invalid Request: Cannot lock policy {0}.

ws.eApp.initiate.requestDetails.required=Invalid Data. At least one RequestDetails element is required in the InitiateElectronicApplicationRequest element.
ws.eApp.initiate.policyId.required=Invalid Data. The policy id is required.
ws.eApp.initiate.multiple.requestDetails.input=Invalid Data. Only one RequestDetails node is supported in the input for InitiateElectronicApplicationRequest.
ws.eApp.initiate.request.noValidPolicyTerm.invalid=Invalid request to initialize an eApplication. No such the valid latest policy/term based on the following request parameter(s): {0}.

## For application management
pm.applicationManagement.search.header=Search Criteria
pm.applicationManagement.detail.header=Application Detail
pm.applicationManagement.noSelection.error=Please make at least one selection.
pm.applicationManagement.unsavedData.error=Changes exist, please save it first.
pm.applicationManagement.reassign.warning=Not reassign any application
pm.applicationManagement.validate.error.noExtDefined=System failed to retrieve applications. Please contact technical support.

# For select app reviewer
pm.applicationManagement.selectAppReviewer.header=Reviewer List

## For view application history
pm.viewApplicationHistory.header=Application History Detail

## For view insured information
pm.insuredInfo.noDataFound=No Data Found
pm.insuredInfo.insuredInfoList.header=Insured Information List for {0}

# For obtaining lock failed error
pm.verifyPolicyIsLockedInterceptor.obtain.lock.error=Current user does not have a lock on the policy. Please reopen the policy in WIP mode.

# For maintain insured tracking
pm.maintainInsuredTracking.searchCriteria.header=Search Criteria
pm.maintainInsuredTracking.insuredList.header=Insured List (Risk: {0}, {1} - {2})
pm.maintainInsuredTracking.insuredForm.header=Insured Information
pm.maintainInsuredTracking.overlapDates.error=Dates for Entity overlap. Please correct.
pm.maintainInsuredTracking.invalidRetroDate.error=Tracked insured retro date cannot be after the tracked effective date. Please correct.
pm.maintainInsuredTracking.invalidDates.error=Start Date cannot be after End Date.
pm.maintainInsuredTracking.invalidStartDate.error=Start Date must be prior to last term expiration date.
pm.maintainInsuredTracking.invalidEndDate.error=End Date cannot be after risk expiration date.
pm.maintainInsuredTracking.flatRecord.error=Start Date and End Date cannot be equal while adding new insured.

# For policy summary
pm.policySummary.summaryList.header=Policy Summary

# For renewal flag
pm.maintainRenewalFlag.renewalFlagList.header=Renewal Flag List
pm.maintainRenewalFlag.renewalFlagForm.header=Renewal Flag Details
# For maintain Additional Exposure
pm.maintainRiskAddtlExposure.primaryExposureList.header=Primary Exposure (Risk: {0}, {1} - {2})
pm.maintainRiskAddtlExposure.addtlExposureList.header=Additional Exposures
pm.maintainRiskAddtlExposure.addtlExposureForm.header=Exposure Information
pm.maintainRiskAddtlExposure.riskExists.error1=Row {0} and {1} overlap: Has the same Practice State Code, County and Specialty.
pm.maintainRiskAddtlExposure.riskExists.error2=Row {0}: The % of Practice should be whole number and less than 100%.
pm.maintainRiskAddtlExposure.effectiveToDate.rule1.error=Row {0}: Invalid Operation for expiration date.  Only one edit for either % of Practice or Expiration date allowed.
pm.maintainRiskAddtlExposure.ooseRiskAddtlExposure.changeOption.error=You have no privilege to change the additional exposure.
pm.maintainRiskAddtlExposure.overLapForTotalPractice.error=Percent of practice for same time period cannot total >= 100% for below periods: {0}.

pm.maintainRiskAddtlExposure.oose.changeDate.effectiveToDate.error=Row {0}: Invalid Operation. Expiration date cannot be changed to {1} which is later than current term's expiring date in OOSE initial term when future version existed. Please do it in future term.

# For retro date entry
pm.maintainRetroDate.header=Retroactive Date Entry
pm.maintainRetroDate.retroGreaterEff.error=Row {0}: Retroactive date cannot be added later than the coverage effective date.
pm.maintainRetroDate.retroDate.required.error = Row {0}: The retroactive date is required.
#For validate entity source
pm.maintainPolicy.isPolicyEntity.filter=This option is not supported for information not in CIS.

## For Review Duplicate
pm.reviewDuplicate.rosterRisk.header=Roster Risks
pm.reviewDuplicate.rosterRisk.noDataFound=No Roster Risk was found.
pm.reviewDuplicate.CISDuplicate.header=CIS Possible Matches
pm.reviewDuplicate.processResult.info=No CIS Duplicates were found.
pm.reviewDuplicate.emptyState.error=Invalid Data. State cannot be empty.
pm.reviewDuplicate.emptyAddress1.error=Invalid Data. Addr1 cannot be empty.
pm.reviewDuplicate.emptyCity.error=Invalid Data. City cannot be empty.
pm.reviewDuplicate.saveReviewDuplicateInfo.error=Invalid Data. {0}
pm.reviewDuplicate.confirmation.info=Possible CIS Duplicates still exist from the Upload. If not resolved, they will automatically be added to CIS and create duplicate records. Continue?
pm.reviewDuplicate.invalid.suffixName.error=The value entered in the Suffix field for roster id {0} is not a valid Suffix name.
pm.reviewDuplicate.invalid.licenseType.error=The value entered in the License Type field for roster id {0} is not a valid License type.
pm.reviewDuplicate.invalid.licenseState.error=The value entered in the License State field for roster id {0} is not a valid License state.

# For view quote
pm.viewQuote.viewQuoteList.header=Associated Quotes

# For maintain quote transfer
pm.maintainQuoteTransfer.quoteTransferList.header=Target(s)
pm.maintainQuoteTransfer.noselection.error=Please make at least one selection.
pm.maintainQuoteTransfer.noPolicy.error=Cannot find target policy.
pm.maintainQuoteTransfer.autoPendingRenewal=Auto apply pending renewal changes.
pm.maintainQuoteTransfer.autoOpenWindow=Auto open Maintain Quote Transfer Window.

# For view soft validation
pm.viewSoftValidation.validationFilter.header=Validation Filter
pm.viewSoftValidation.validationTrans.header=Transaction Information
pm.viewSoftValidation.validationList.header=Validation Detail
pm.viewSoftValidation.validationList.noDataFound=No data found.
pm.viewSoftValidation.validationExists.prompt=Soft validations exist, do you wish to continue?

# For initiate app
pm.eApp.initiate.applicationExists.info=An application already exists for the current term.
pm.eApp.initiate.process.error=An error occurred while initiating an application. Please contact the system administrator.
pm.eApp.initiate.process.success=An application was successfully initiated.
pm.eApp.initiate.process.submit.info=An Application was submitted.

## For View Experience Discount History page
pm.viewExpDiscHistory.expDiscHistoryInfo.header=Experience Discount History For {0} ( {1} ) <br>&nbsp;&nbsp;&nbsp;&nbsp Client ID {2}
pm.viewExpDiscHistory.claimInfo.header=Claim Info
pm.viewExpDiscHistory.expHistoryInfo.noDataFound.error=No Experience Discount History Data
pm.viewExpDiscHistory.claimInfo.noDataFound.error=No Claim Data

# For Quick Quote Web Service
ws.QuickQuote.premium.error=Unable to get premium from rating.
ws.QuickQuote.validation.malformed.request.error=? found in input data. Valid input required.
ws.QuickQuote.validation.policytype.risktype.error=Invalid Policy Type Code {0}, Risk Type Code {1} combination provided.
ws.QuickQuote.validation.one.risk.required.error=At least one risk is required.
ws.QuickQuote.validation.risk.key.required.error=Insured Key is required since there is more than one risk in the input.
ws.QuickQuote.validation.risk.class.required.error=Insured Class Code is required for risk key {0}
ws.QuickQuote.validation.risktype.riskclass.error=Invalid Risk Type {0} and Insured Class {1} combination provided.
ws.QuickQuote.validation.postalcodeorstatecounty.required.error=Postal Code or a combination of Practice State and Practice County is required for risk with key {0}
ws.QuickQuote.validation.postalcode.error=Invalid postal code {0} provided.
ws.QuickQuote.validation.postalcode.statecode.error=Invalid postal code {0}, State Code {1} combination provided.
ws.QuickQuote.validation.statecode.countycode.error=State {0} and County {1} combination is not valid.
ws.QuickQuote.validation.covg.risk.policy.error=Coverage Code {0} is not available for policy type {1} and risk type {2}
ws.QuickQuote.validation.individual.covg.error=Only individual coverage is supported by quick quote. {0} is not a set as individual coverage.
ws.QuickQuote.validation.covg.policytype.risktype.error=Invalid coverage {0} provided for the policy type {1} and risk type {2} combination.
ws.QuickQuote.validation.covg.limittype.error=Invalid coverage {0} limit {1} code combination provided.
ws.QuickQuote.validation.comp.covg.error=Invalid component {0} provided for coverage {1}
ws.QuickQuote.validation.one.covg.required.error=At least one coverage is required.
ws.QuickQuote.validation.covgcode.formcode.required.error=Policy Form Code or Coverage Code is required for coverage key {0}
ws.QuickQuote.validation.covg.limit.required.error=Limit Type Code is required for coverage key {0}
ws.QuickQuote.validation.covg.referredinsured.required.error=Reffered Insured is required for coverage key {0}
ws.QuickQuote.validation.covg.key.required.error=Coverage Key is required since there is more than one risk in the input.
ws.QuickQuote.validation.comp.required.error=CreditSurchargeDeductible Code is required.
ws.QuickQuote.validation.comp.covgkey.required.error=Referred Coverage reference is required for key {0}