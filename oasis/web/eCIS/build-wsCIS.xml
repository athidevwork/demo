<project name="wsCIS" default="build.and.deploy.exploded" basedir=".">

    <!-- Import dependant project build files -->
    <import file="${basedir}/../OasisTags/build-core.xml"/>
    <import file="${basedir}/../eCS/CS/build-cs.xml"/>
    <import file="${basedir}/CIS/build-cis.xml"/>

    <!--************************************************************************-->
    <!-- Build targets specific to this project                                 -->
    <!--************************************************************************-->
    <target name="init.project.properties" >
        <!-- Project properties -->
        <property name="project.app.name" value="eCIS"/>
        <property name="project.name" value="wsCIS"/>

        <property name="wsdl.gen.dir" value="${basedir}/${project.name}/wsdlgen"/>
        <property name="wsdl.gen.src.dir" value="${wsdl.gen.dir}/src"/>
        <property name="wsdl.gen.lib.dir" value="${wsdl.gen.dir}/lib"/>
    </target>

    <target name="init"
            description="Initialize properties for this project and all dependant projects,
                            starting with the properties of this project so they take precedence"
            depends="init.project.properties, init.core.properties.for.ear, init.cs.properties, init.cis.properties, echo.build.properties"/>

    <target name="build.dependant.projects"
            description="Define all dependant projects as 'depends' for building all dependant projects."
            depends="build.CS.no.web, build.CIS.no.web"/>

    <target name="copy.oasistags.webfiles" depends="init, copy.oasistags.webfiles.for.ear"/>

    <target name="copy.web.and.config.files"
            description="Copy all the web and config files to the exploded deployment directory.
                            This target should be configured to Execute on After Compilation.
                            This target can also be run separately to copy web files only to the exploded deployment directory."
            depends="init, build.exploded.skip.compile"/>

    <target  name="copy.additional.project.webfiles">
        <copy todir="${build.webapp.dir}">
            <!-- Copy web.xml, struts config files, tld files-->
            <fileset dir="${oasistags.web.resources.dir}" includes="WEB-INF/**" excludes="**/web*.xml,**/*.jar,**/*.iml**/*.awf"/>
        </copy>
        <!-- Overwrite the web.xml file to avoid errors in the jwsc command that updates the web.xml, stating that "The service uri ... is already in use" -->
        <delete file="${build.webapp.dir}/WEB-INF/web.xml" failonerror="false"/>
        <copy todir="${build.webapp.dir}" file="${project.webapp.dir}/WEB-INF/web.xml" overwrite="true" />
        <copy todir="${build.webapp.dir}/wsdls">
            <fileset dir="${CS.project.dir}/ows/xsd"/>
        </copy>
    </target>

    <target name="post.build.project" depends="jwsc-all"/>

    <target name="jwsc-all" depends="jwsc-init, jwsc-Service" />
    
    <target name="jwsc-init" >
        <mkdir dir="${build.app.classes.dir}"/>
        <taskdef name="jwsc" classname="weblogic.wsee.tools.anttasks.JwscTask" classpathref="weblogic.jar.path"/>
    </target>

    <target name="jwsc-Service" depends="jwsc-init">
        <jwsc
            srcdir="${project.src.dir}"
            destdir="${build.app.dir}"
            verbose="on"
            debug="on"
            keepGenerated="yes"
            >
            <module contextPath="${project.app.name}/${project.name}" explode="true" name="${project.webapp.name}">

                <!-- To build all java classes with JAX-WS annotations as services in a file set: -->
              <jwsfileset srcdir="${project.src.dir}" type="JAXWS" includes="**/*.java"/>

                <!-- To update the web.xml and weblogic.xml files (though nothing has changed in the weblogic.xml) : -->
                <descriptor file="${build.webapp.dir}/WEB-INF/web.xml"/>
                <descriptor file="${build.webapp.dir}/WEB-INF/weblogic.xml"/>
            </module>
            <classpath >
                <path location="${build.app.classes.dir}"/>
                <path refid="weblogic.jar.path"/>
            </classpath>
        </jwsc>
    </target>


    <taskdef name="wsdlc"
             classname="weblogic.wsee.tools.anttasks.WsdlcTask" classpathref="weblogic.jar.path" />
 
    <target name="generate-party-inquiry-from-wsdl"
      description="Generate PartyInquiryService JAXWS Service Java code."
      depends="init">
        <wsdlc  srcWsdl="${project.webapp.resources.dir}/wsdls/PartyInquiryService.wsdl"
                destJwsDir="${wsdl.gen.lib.dir}"
                destImplDir="${wsdl.gen.src.dir}"
                packageName="dti.ci.entitymgr.service"
        />
    </target> 
    <target name="generate-party-change-from-wsdl"
      description="Generate PartyChangeService JAXWS Service Java code."
      depends="init">
        <wsdlc  srcWsdl="${project.webapp.resources.dir}/wsdls/PartyChangeService.wsdl"
                destJwsDir="${wsdl.gen.lib.dir}"
                destImplDir="${wsdl.gen.src.dir}"
                packageName="dti.ci.entitymgr.service"
        />
    </target>
</project>
