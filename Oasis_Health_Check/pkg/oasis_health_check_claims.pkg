CREATE OR REPLACE PACKAGE oasis_health_check_claims
  AUTHID CURRENT_USER -- [ DO NOT EDIT! Invoker Rights Clause ]
  IS
 /****************************************************************************
  *
  * ---------------------------------------------------------------------------
  * $Revision 1.0  03/20/2018   $$Author Athi $
  *****************************************************************************
  *  Copyright(C) 2018 - Delphi Technology Inc.
  *
  *   File Name : oasis_health_check_output.pkg
  * Object Name : oasis_health_check_output
  * Description : health check and validation for output sub system
  *----------------------------------------------------------------------------
  * Revisions:
  *   Date    By     Purpose
  * -------- ------- ----------------------------------------------------------
  *
  *****************************************************************************/
  -- ========================================================================
  -- ===== PACKAGE LEVEL PUBLIC DECLARATIONS ================================
  -- ========================================================================
  -- === Template variables and constants.
  g_trace   BOOLEAN := FALSE; -- To turn output on/off for debug purposes.
  g_updated BOOLEAN := FALSE; -- To turn output on/off for heatlh check table being altered.

  PROCEDURE main;

  PROCEDURE validate_claims_parm(category VARCHAR2,
                              v_ohc_record oasis_health_check_main.oasis_health_check_type,
                              v_run_date VARCHAR2);

END oasis_health_check_claims;
/
CREATE OR REPLACE PACKAGE BODY oasis_health_check_claims IS
  -- ========================================================================
  -- ===== PACKAGE LEVEL PRIVATE DECLARATIONS ===============================
  -- ========================================================================
  -- === Template variables and constants.
  g_error       EXCEPTION;
  g_time_format VARCHAR2(12);
  g_date_format VARCHAR2(12);

  v_obj_name        CONSTANT VARCHAR2(30) := 'oasis_health_check_claims'; -- Oracle object name
  v_msg_pref        CONSTANT VARCHAR2(20) := 'Error ';
  v_msg             VARCHAR2(4000); -- error/info message
  v_line            VARCHAR2 (255);
  v_run_date        DATE  := SYSDATE;
  v_run_code        VARCHAR2(50) := '';
  v_proc_name       VARCHAR2(50) := '';
  v_sub_system      VARCHAR2(25) := 'CLAIMS';
  v_category        VARCHAR(25) := 'CLAIMS_CFG';
  v_data_code       VARCHAR2(25) := '';
  --v_data_code       VARCHAR2(25) := 'CLAIMS_CFG_DATA';
  v_sql_stmt        VARCHAR2(3000) := '';
  v_ok              VARCHAR2(2) := 'OK';
  v_review          VARCHAR2(7) := 'REVIEW';
  v_desc            VARCHAR2(255) := '';
  v_level           VARCHAR2(25);
  v_count           NUMBER(15);
  v_test_criteria_0 VARCHAR2(25) := 'COUNT=0';


  -- === Constants: <ConstantName> CONSTANT <DataType> := <Value>;
  -- === Types.
  -- === Variables of user-defined Types.
  -- === Cursors.
  claims_sys_parms VARCHAR2(200) := 'CM_AUTO_INS_CLMNTCOV^ERROR';
  /**************************************************************************
  * pl
  *--------------------------------------------------------------------------
  * Short form for put_line. Output is controlled by the g_trace variable.
  ***************************************************************************/
  PROCEDURE pl(s IN VARCHAR2) IS
  BEGIN
    IF g_trace=TRUE THEN
      dbms_output.enable(1000000);
      --dbms_output.put_line(substr(s, 1, 255));
      dbms_output.put_line(s);
    END IF;
  END pl;

  PROCEDURE validate_claims_parm(category VARCHAR2,
                            v_ohc_record oasis_health_check_main.oasis_health_check_type,
                            v_run_date VARCHAR2) IS
  v_parm VARCHAR2(25);
  v_update_stmt VARCHAR2(500);
  BEGIN
    BEGIN
      IF (v_ohc_record.VALUE IS NOT NULL) THEN
         oasis_health_check_main.validate_yesno_parm(v_ohc_record.NAME, v_ohc_record.VALUE,
                                 'CM_AUTO_INS_CLMNTCOV', v_sub_system, category,v_run_date,
                                 'Should be set to Y.');
      END IF;
    END;
  END validate_claims_parm;

  PROCEDURE CM_001 IS
  BEGIN
    v_proc_name := 'CM_001';
    v_run_code := v_proc_name;
    v_desc := v_obj_name||'.'||v_proc_name||' - cm_transaction_detail w/o matching CIX and claimant on CCX';
    v_level := 'WARNING';
    pl('Checking for ' || v_desc || ' : ' || v_level);
    
    v_sql_stmt := 'SELECT count(*)
    FROM system_parameter_util sys,
           cm_transaction_detail d
    WHERE sysparm_code = ''CM_AUTO_INS_CLMNTCOV''
          and sysparm_value = ''Y''
          and not EXISTS
          (SELECT ''x''
           FROM claimant_coverage_xref ccx
           WHERE d.claimant_fk = ccx.claimant_fk
                 and d.coverage_insured_xref_fk = ccx.coverage_insured_xref_fk
          )';

    EXECUTE IMMEDIATE v_sql_stmt INTO v_count;
    
    oasis_health_check_main.verify_count(v_level, v_sub_system, v_category, 
                        v_data_code, v_test_criteria_0, v_count, v_desc, 'transactions', v_sql_stmt, v_run_code);
  END CM_001;
  
  PROCEDURE CM_002 IS
  BEGIN
    v_proc_name := 'CM_002';
    v_run_code := v_proc_name;
    v_desc := v_obj_name||'.'||v_proc_name||' - cm_transaction w/ data_checking cm_trans_status_history row';
    v_level := 'WARNING';
    pl('Checking for ' || v_desc || ' : ' || v_level);

    v_sql_stmt := 'SELECT count(*)
    FROM cm_transaction t, 
         cm_trans_status_history tsh
    WHERE t.cm_transaction_pk = tsh.cm_transaction_fk
          and tsh.cm_trans_status_history_pk =
          (SELECT max(cm_trans_status_history_pk)
           FROM cm_trans_status_history
           WHERE cm_Transaction_fk = t.cm_transaction_pk
           )
           and t.trans_status_code <> tsh.cm_transaction_status_code';

    EXECUTE IMMEDIATE v_sql_stmt INTO v_count;
    
    oasis_health_check_main.verify_count(v_level, v_sub_system, v_category, 
                        v_data_code, v_test_criteria_0, v_count, v_desc, 'transactions', v_sql_stmt, v_run_code);
  END CM_002;
  
  PROCEDURE CM_003 IS
  BEGIN
    v_proc_name := 'CM_003';
    v_run_code := v_proc_name;
    v_desc := v_obj_name||'.'||v_proc_name||' - cm_transaction w/ missing  cm_trans_status_history row';
    v_level := 'WARNING';
    pl('Checking for ' || v_desc || ' : ' || v_level);

    v_sql_stmt := 'SELECT count(*)
    FROM cm_transaction t
    WHERE not exists(select ''x''
                     from cm_trans_status_history tsh
                     where tsh.cm_transaction_fk = t.cm_transaction_pk)';

    EXECUTE IMMEDIATE v_sql_stmt INTO v_count;
    
    oasis_health_check_main.verify_count(v_level, v_sub_system, v_category, 
                        v_data_code, v_test_criteria_0, v_count, v_desc, 'transactions', v_sql_stmt, v_run_code);
  END CM_003;

  PROCEDURE CM_004 IS
  BEGIN
    v_proc_name := 'CM_004';
    v_run_code := v_proc_name;
    v_desc := v_obj_name||'.'||v_proc_name||' - cm_transaction w/o matching cm_transaction_detail row';
    v_level := 'WARNING';
    pl('Checking for ' || v_desc || ' : ' || v_level);
    
    v_sql_stmt := 'SELECT count(*)
    FROM cm_transaction t
    WHERE source_table_name = ''CLAIM''
          and not exists(select ''x''
                         from cm_transaction_detail d
                         where d.cm_transaction_fk = t.cm_transaction_pk)';

    EXECUTE IMMEDIATE v_sql_stmt INTO v_count;
    
    oasis_health_check_main.verify_count(v_level, v_sub_system, v_category, 
                        v_data_code, v_test_criteria_0, v_count, v_desc, 'transactions', v_sql_stmt, v_run_code);
  END CM_004;

  PROCEDURE CM_005 IS
  BEGIN
    v_proc_name := 'CM_005';
    v_run_code := v_proc_name;
    v_desc := v_obj_name||'.'||v_proc_name||' - cm_transaction where trans_amt <> sum amount on det row';
    v_level := 'WARNING';
    pl('Checking for ' || v_desc || ' : ' || v_level);
    
    v_sql_stmt := 'SELECT count(*)
    FROM (select cm_transaction_pk,
               trans_amt
          from cm_transaction t,
               cm_transaction_detail d
          where t.source_table_name = ''CLAIM''
           and t.cm_transaction_pk = d.cm_transaction_fk
           group by cm_transaction_pk,trans_amt
           having min(trans_amt) <> sum(amount))';

    EXECUTE IMMEDIATE v_sql_stmt INTO v_count;
    
    oasis_health_check_main.verify_count(v_level, v_sub_system, v_category, 
                        v_data_code, v_test_criteria_0, v_count, v_desc, 'transactions', v_sql_stmt, v_run_code);
  END CM_005;

  PROCEDURE CM_006 IS
  BEGIN
    v_proc_name := 'CM_006';
    v_run_code := v_proc_name;
    v_desc := v_obj_name||'.'||v_proc_name||' - txn dtl rows where the txn claim differs from CIX claim';
    v_level := 'WARNING';
    pl('Checking for ' || v_desc || ' : ' || v_level);
    
    v_sql_stmt := 'SELECT count(*)
    FROM cm_transaction_detail d,
         cm_transaction t,
         coverage_insured_xref cix,
         claim_insured ci,
         entity_role er
    WHERE d.cm_transaction_fk = t.cm_transaction_pk
          and d.coverage_insured_xref_fk = cix.coverage_insured_xref_pk
          and cix.claim_insured_fk       = ci.claim_insured_pk
          and ci.entity_role_fk          = er.entity_role_pk
          and er.source_record_fk        <> t.source_record_fk';

    EXECUTE IMMEDIATE v_sql_stmt INTO v_count;
    
    oasis_health_check_main.verify_count(v_level, v_sub_system, v_category, 
                        v_data_code, v_test_criteria_0, v_count, v_desc, 'transactions', v_sql_stmt, v_run_code);
  END CM_006;

  PROCEDURE CM_007 IS
  BEGIN
    v_proc_name := 'CM_007';
    v_run_code := v_proc_name;
    v_desc := v_obj_name||'.'||v_proc_name||' - entity_role roles where entity fk is not on entity table';
    v_level := 'WARNING';
    pl('Checking for ' || v_desc || ' : ' || v_level);
    
    v_sql_stmt := 'SELECT count(*)
    FROM entity_Role er
    WHERE not exists(select ''x''
                    from entity e
                   where e.entity_pk = er.entity_fk)';

    EXECUTE IMMEDIATE v_sql_stmt INTO v_count;
    
    oasis_health_check_main.verify_count(v_level, v_sub_system, v_category, 
                        v_data_code, v_test_criteria_0, v_count, v_desc, 'entities', v_sql_stmt, v_run_code);
  END CM_007;

  PROCEDURE CM_008 IS
  BEGIN
    v_proc_name := 'CM_008';
    v_run_code := v_proc_name;
    v_desc := v_obj_name||'.'||v_proc_name||' - claimant rows where entity role not on entity role table';
    v_level := 'WARNING';
    pl('Checking for ' || v_desc || ' : ' || v_level);

    v_sql_stmt := 'SELECT count(*)
    FROM claimant c
    WHERE not exists(select ''x''
                     from entity_role er
                     where er.entity_role_pk = c.entity_role_fk)';

    EXECUTE IMMEDIATE v_sql_stmt INTO v_count;
    
    oasis_health_check_main.verify_count(v_level, v_sub_system, v_category, 
                        v_data_code, v_test_criteria_0, v_count, v_desc, 'claimants', v_sql_stmt, v_run_code);
  END CM_008;

  PROCEDURE CM_009 IS
  BEGIN
    v_proc_name := 'CM_009';
    v_run_code := v_proc_name;
    v_desc := v_obj_name||'.'||v_proc_name||' - claim_insured rows where entity role not on entity role table';
    v_level := 'WARNING';
    pl('Checking for ' || v_desc || ' : ' || v_level);

    v_sql_stmt := 'SELECT count(*)
    FROM claim_insured ci
    WHERE not exists(select ''x''
                     from entity_role er
                     where er.entity_role_pk = ci.entity_role_fk)';

    EXECUTE IMMEDIATE v_sql_stmt INTO v_count;
    
    oasis_health_check_main.verify_count(v_level, v_sub_system, v_category, 
                        v_data_code, v_test_criteria_0, v_count, v_desc, 'claim insureds', v_sql_stmt, v_run_code);
  END CM_009;

  PROCEDURE CM_010 IS
  BEGIN
    v_proc_name := 'CM_010';
    v_run_code := v_proc_name;
    v_desc := v_obj_name||'.'||v_proc_name||' - CIX rows where claim_insured_fk does not exist';
    v_level := 'WARNING';
    pl('Checking for ' || v_desc || ' : ' || v_level);

    v_sql_stmt := 'SELECT count(*)
    FROM coverage_insured_xref cix
    WHERE not exists(select ''x''
                     from claim_insured ci
                     where ci.claim_insured_pk = cix.claim_insured_fk)';

    EXECUTE IMMEDIATE v_sql_stmt INTO v_count;
    
    oasis_health_check_main.verify_count(v_level, v_sub_system, v_category, 
                        v_data_code, v_test_criteria_0, v_count, v_desc, 'rows', v_sql_stmt, v_run_code);
  END CM_010;

  PROCEDURE CM_011 IS
  BEGIN
    v_proc_name := 'CM_011';
    v_run_code := v_proc_name;
    v_desc := v_obj_name||'.'||v_proc_name||' - claims where min claim type and claim hist dates are not equal';
    v_level := 'WARNING';
    pl('Checking for ' || v_desc || ' : ' || v_level);

    v_sql_stmt := 'SELECT count(*)
    FROM (
         SELECT csh.source_record_fk
         FROM claim_status_history csh,
              claim_type_history cth
         WHERE csh.source_record_fk = cth.source_record_fk
               and csh.source_table_name = ''CLAIM''
               and cth.source_table_name = ''CLAIM''
         GROUP BY csh.Source_Record_Fk
         HAVING min(cth.type_start_date) <> min(csh.status_start_date)
    )';

    EXECUTE IMMEDIATE v_sql_stmt INTO v_count;
    
    oasis_health_check_main.verify_count(v_level, v_sub_system, v_category, 
                        v_data_code, v_test_criteria_0, v_count, v_desc, 'rows', v_sql_stmt, v_run_code);
  END CM_011;

  PROCEDURE CM_012 IS
  BEGIN
    v_proc_name := 'CM_012';
    v_run_code := v_proc_name;
    v_desc := v_obj_name||'.'||v_proc_name||' - missing cm_transaction sys_update_time';
    v_level := 'WARNING';
    pl('Checking for ' || v_desc || ' : ' || v_level);

    v_sql_stmt := 'SELECT count(*)
    FROM cm_transaction
    WHERE sys_update_time is null';

    EXECUTE IMMEDIATE v_sql_stmt INTO v_count;
    
    oasis_health_check_main.verify_count(v_level, v_sub_system, v_category, 
                        v_data_code, v_test_criteria_0, v_count, v_desc, 'rows', v_sql_stmt, v_run_code);
  END CM_012;

  PROCEDURE CM_013 IS
  BEGIN
    v_proc_name := 'CM_013';
    v_run_code := v_proc_name;
    v_desc := v_obj_name||'.'||v_proc_name||' - claimant_fk on txn detail, not on claimant table';
    v_level := 'WARNING';
    pl('Checking for ' || v_desc || ' : ' || v_level);

    v_sql_stmt := 'SELECT count(*)
    FROM cm_transaction_detail d
    WHERE not exists(select ''x''
                     from claimant c
                     where c.claimant_pk = d.claimant_fk)';

    EXECUTE IMMEDIATE v_sql_stmt INTO v_count;
    
    oasis_health_check_main.verify_count(v_level, v_sub_system, v_category, 
                        v_data_code, v_test_criteria_0, v_count, v_desc, 'rows', v_sql_stmt, v_run_code);
  END CM_013;

  PROCEDURE CM_014 IS
  BEGIN
    v_proc_name := 'CM_014';
    v_run_code := v_proc_name;
    v_desc := v_obj_name||'.'||v_proc_name||' - CIX fks on txn detail, not on CIX table';
    v_level := 'WARNING';
    pl('Checking for ' || v_desc || ' : ' || v_level);

    v_sql_stmt := 'SELECT count(*)
    FROM cm_transaction_detail d
    WHERE not exists(SELECT ''x''
                     FROM coverage_insured_xref c
                     WHERE c.coverage_insured_xref_pk = d.coverage_insured_xref_fk)';

    EXECUTE IMMEDIATE v_sql_stmt INTO v_count;
    
    oasis_health_check_main.verify_count(v_level, v_sub_system, v_category, 
                        v_data_code, v_test_criteria_0, v_count, v_desc, 'rows', v_sql_stmt, v_run_code);
  END CM_014;

  PROCEDURE CM_015 IS
  BEGIN
    v_proc_name := 'CM_015';
    v_run_code := v_proc_name;
    v_desc := v_obj_name||'.'||v_proc_name||' - cm_trans_status_history w/ null status_start_date';
    v_level := 'WARNING';
    pl('Checking for ' || v_desc || ' : ' || v_level);

    v_sql_stmt := 'SELECT count(*) 	
    FROM cm_trans_status_history
    WHERE status_start_date is null';

    EXECUTE IMMEDIATE v_sql_stmt INTO v_count;
    
    oasis_health_check_main.verify_count(v_level, v_sub_system, v_category, 
                        v_data_code, v_test_criteria_0, v_count, v_desc, 'rows', v_sql_stmt, v_run_code);
  END CM_015;

  PROCEDURE CM_016 IS
  BEGIN
    v_proc_name := 'CM_016';
    v_run_code := v_proc_name;
    v_desc := v_obj_name||'.'||v_proc_name||' - cm_trans_status_history rows w/ null accounting_date';
    v_level := 'WARNING';
    pl('Checking for ' || v_desc || ' : ' || v_level);

    v_sql_stmt := 'SELECT count(*)
    FROM cm_trans_status_history
    WHERE accounting_date is null';

    EXECUTE IMMEDIATE v_sql_stmt INTO v_count;
    
    oasis_health_check_main.verify_count(v_level, v_sub_system, v_category, 
                        v_data_code, v_test_criteria_0, v_count, v_desc, 'rows', v_sql_stmt, v_run_code);
  END CM_016;

  PROCEDURE CM_017 IS
  BEGIN
    v_proc_name := 'CM_017';
    v_run_code := v_proc_name;
    v_desc := v_obj_name||'.'||v_proc_name||' - claims where min txn start date < min claim start date';
    v_level := 'WARNING';
    pl('Checking for ' || v_desc || ' : ' || v_level);

    v_sql_stmt := 'SELECT count(*)
    FROM (select *
          from (select csh.source_record_fk clm_fk,
                           min(status_start_date) clm_status_start_date
                      from claim_status_history csh
                     where source_table_name = ''CLAIM''
                     group by source_record_fk) v1,
               (select t.source_record_fk txn_clm_fk,
                           min(status_start_date) txn_status_start_date
                      from cm_transaction t, cm_trans_status_history tsh
                     where t.cm_transaction_pk = tsh.cm_transaction_fk
                     group by t.source_record_fk) v2
          where v1.clm_fk = v2.txn_clm_fk
                and txn_status_start_date < clm_status_start_date)';

    EXECUTE IMMEDIATE v_sql_stmt INTO v_count;
    
    oasis_health_check_main.verify_count(v_level, v_sub_system, v_category, 
                        v_data_code, v_test_criteria_0, v_count, v_desc, 'rows', v_sql_stmt, v_run_code);
  END CM_017;

  PROCEDURE CM_018 IS
  BEGIN
    v_proc_name := 'CM_018';
    v_run_code := v_proc_name;
    v_desc := v_obj_name||'.'||v_proc_name||' - CIX rows where policy fk not on cm_policy';
    v_level := 'WARNING';
    pl('Checking for ' || v_desc || ' : ' || v_level);

    v_sql_stmt := 'SELECT count(*)
    FROM coverage_insured_xref cix
    WHERE source_table_name = ''CLAIM_POLICY''
          and not exists(select ''x''
                        from cm_policy p
                       where cix.policy_fk = p.cm_policy_pk)';

    EXECUTE IMMEDIATE v_sql_stmt INTO v_count;
    
    oasis_health_check_main.verify_count(v_level, v_sub_system, v_category, 
                        v_data_code, v_test_criteria_0, v_count, v_desc, 'rows', v_sql_stmt, v_run_code);
  END CM_018;

  PROCEDURE CM_019 IS
  BEGIN
    v_proc_name := 'CM_019';
    v_run_code := v_proc_name;
    v_desc := v_obj_name||'.'||v_proc_name||' - CIX rows where risk fk not on cm_risk';
    v_level := 'WARNING';
    pl('Checking for ' || v_desc || ' : ' || v_level);

    v_sql_stmt := 'SELECT count(*)
    FROM coverage_insured_xref cix
    WHERE source_table_name = ''CLAIM_POLICY''
          and not exists(select ''x''
                         from cm_risk r
                         where cix.risk_fk = r.cm_risk_pk)';

    EXECUTE IMMEDIATE v_sql_stmt INTO v_count;
    
    oasis_health_check_main.verify_count(v_level, v_sub_system, v_category, 
                        v_data_code, v_test_criteria_0, v_count, v_desc, 'rows', v_sql_stmt, v_run_code);
  END CM_019;

  PROCEDURE CM_020 IS
  BEGIN
    v_proc_name := 'CM_020';
    v_run_code := v_proc_name;
    v_desc := v_obj_name||'.'||v_proc_name||' - CIX rows where cvg fk not on cm_coverage';
    v_level := 'WARNING';
    pl('Checking for ' || v_desc || ' : ' || v_level);

    v_sql_stmt := 'SELECT count(*)
    FROM coverage_insured_xref cix
    WHERE source_table_name = ''CLAIM_POLICY''
          and not exists(select ''x''
                         from cm_coverage c
                         where cix.coverage_fk = c.cm_coverage_pk)';

    EXECUTE IMMEDIATE v_sql_stmt INTO v_count;
    
    oasis_health_check_main.verify_count(v_level, v_sub_system, v_category, 
                        v_data_code, v_test_criteria_0, v_count, v_desc, 'rows', v_sql_stmt, v_run_code);
  END CM_020;

  PROCEDURE CM_021 IS
  BEGIN
    v_proc_name := 'CM_021';
    v_run_code := v_proc_name;
    v_desc := v_obj_name||'.'||v_proc_name||' - CIX rows where policy fk not on policy';
    v_level := 'WARNING';
    pl('Checking for ' || v_desc || ' : ' || v_level);

    v_sql_stmt := 'SELECT count(*)
    FROM coverage_insured_xref cix
    WHERE source_table_name = ''OASIS PM''
          and not exists(select ''x''
                         from policy p
                         where cix.policy_fk = p.policy_pk)';

    EXECUTE IMMEDIATE v_sql_stmt INTO v_count;
    
    oasis_health_check_main.verify_count(v_level, v_sub_system, v_category, 
                        v_data_code, v_test_criteria_0, v_count, v_desc, 'rows', v_sql_stmt, v_run_code);
  END CM_021;

  PROCEDURE CM_022 IS
  BEGIN
    v_proc_name := 'CM_022';
    v_run_code := v_proc_name;
    v_desc := v_obj_name||'.'||v_proc_name||' - CIX rows where policy term fk not on policy term history';
    v_level := 'WARNING';
    pl('Checking for ' || v_desc || ' : ' || v_level);

    v_sql_stmt := 'SELECT count(*)
    FROM coverage_insured_xref cix
    WHERE source_table_name = ''OASIS PM''
          and not exists(select ''x''
                         from policy_term_history p
                         where cix.policy_term_fk = p.policy_term_history_pk)';

    EXECUTE IMMEDIATE v_sql_stmt INTO v_count;
    
    oasis_health_check_main.verify_count(v_level, v_sub_system, v_category, 
                        v_data_code, v_test_criteria_0, v_count, v_desc, 'rows', v_sql_stmt, v_run_code);
  END CM_022;

  PROCEDURE CM_023 IS
  BEGIN
    v_proc_name := 'CM_023';
    v_run_code := v_proc_name;
    v_desc := v_obj_name||'.'||v_proc_name||' - CIX rows where risk fk not on risk';
    v_level := 'WARNING';
    pl('Checking for ' || v_desc || ' : ' || v_level);

    v_sql_stmt := 'select count(*)
    from coverage_insured_xref cix
    where source_table_name = ''OASIS PM''
          and not exists(select ''x''
                         from risk r
                         where cix.risk_fk = r.risk_pk)';

    EXECUTE IMMEDIATE v_sql_stmt INTO v_count;
    
    oasis_health_check_main.verify_count(v_level, v_sub_system, v_category, 
                        v_data_code, v_test_criteria_0, v_count, v_desc, 'rows', v_sql_stmt, v_run_code);
  END CM_023;

  PROCEDURE CM_024 IS
  BEGIN
    v_proc_name := 'CM_024';
    v_run_code := v_proc_name;
    v_desc := v_obj_name||'.'||v_proc_name||' - CIX rows where cvg fk not on coverage';
    v_level := 'WARNING';
    pl('Checking for ' || v_desc || ' : ' || v_level);

    v_sql_stmt := 'SELECT count(*)
    FROM coverage_insured_xref cix
    where source_table_name = ''OASIS PM''
          and not exists(select ''x''
                         from coverage c
                         where cix.coverage_fk = c.coverage_pk)';

    EXECUTE IMMEDIATE v_sql_stmt INTO v_count;
    
    oasis_health_check_main.verify_count(v_level, v_sub_system, v_category, 
                        v_data_code, v_test_criteria_0, v_count, v_desc, 'rows', v_sql_stmt, v_run_code);
  END CM_024;

  PROCEDURE CM_025 IS
  BEGIN
    v_proc_name := 'CM_025';
    v_run_code := v_proc_name;
    v_desc := v_obj_name||'.'||v_proc_name||' - cm_transaction_detail rows where CIX fk is null';
    v_level := 'WARNING';
    pl('Checking for ' || v_desc || ' : ' || v_level);

    v_sql_stmt := 'SELECT count(*)
    FROM cm_transaction_detail
    WHERE coverage_insured_xref_fk is null';

    EXECUTE IMMEDIATE v_sql_stmt INTO v_count;
    
    oasis_health_check_main.verify_count(v_level, v_sub_system, v_category, 
                        v_data_code, v_test_criteria_0, v_count, v_desc, 'rows', v_sql_stmt, v_run_code);
  END CM_025;

  PROCEDURE CM_026 IS
  BEGIN
    v_proc_name := 'CM_026';
    v_run_code := v_proc_name;
    v_desc := v_obj_name||'.'||v_proc_name||' - cm_transaction_detail rows where claimant fk is null';
    v_level := 'WARNING';
    pl('Checking for ' || v_desc || ' : ' || v_level);

    v_sql_stmt := 'select count(*)
    from cm_transaction_detail
    where claimant_fk is null';

    EXECUTE IMMEDIATE v_sql_stmt INTO v_count;
    
    oasis_health_check_main.verify_count(v_level, v_sub_system, v_category, 
                        v_data_code, v_test_criteria_0, v_count, v_desc, 'rows', v_sql_stmt, v_run_code);
  END CM_026;

  PROCEDURE CM_027 IS
  BEGIN
    v_proc_name := 'CM_027';
    v_run_code := v_proc_name;
    v_desc := v_obj_name||'.'||v_proc_name||' - wacky CM_TRANSACTION accounting dates in yyyy/mm/dd format';
    v_level := 'WARNING';
    pl('Checking for ' || v_desc || ' : ' || v_level);

    v_sql_stmt := 'select count(*)
    from cm_transaction
    where accounting_date > SYSDATE
        or accounting_date < to_date(''01/01/1950'',''mm/dd/yyyy'')
    order by 1';

    EXECUTE IMMEDIATE v_sql_stmt INTO v_count;
    
    oasis_health_check_main.verify_count(v_level, v_sub_system, v_category, 
                        v_data_code, v_test_criteria_0, v_count, v_desc, 'rows', v_sql_stmt, v_run_code);
  END CM_027;

  PROCEDURE CM_028 IS
  BEGIN
    v_proc_name := 'CM_028';
    v_run_code := v_proc_name;
    v_desc := v_obj_name||'.'||v_proc_name||' - Checking for cm_trans_status_history rows where lastest status record '||
              'does not have the max Trans PK of transaction';
    v_level := 'WARNING';
    pl('Checking for ' || v_desc || ' : ' || v_level);

    v_sql_stmt := 'SELECT COUNT(*)
    FROM   cm_trans_status_history ctsh
    WHERE  ctsh.status_end_date = to_date(''1/1/3000'',''mm/dd/yyyy'')
    AND    ctsh.cm_trans_status_history_pk <> 
           (SELECT MAX(ctsh1.cm_trans_status_history_pk)
            FROM   cm_trans_status_history ctsh1
            WHERE  ctsh1.cm_transaction_fk = ctsh.cm_transaction_fk)';

    EXECUTE IMMEDIATE v_sql_stmt INTO v_count;
    
    oasis_health_check_main.verify_count(v_level, v_sub_system, v_category, 
                        v_data_code, v_test_criteria_0, v_count, v_desc, 'rows', v_sql_stmt, v_run_code);
  END CM_028;

  PROCEDURE CM_029 IS
  BEGIN
    v_proc_name := 'CM_029';
    v_run_code := v_proc_name;
    v_desc := v_obj_name||'.'||v_proc_name||' - CM Coverage records where sys update time is null';
    v_level := 'WARNING';
    pl('Checking for ' || v_desc || ' : ' || v_level);

    v_sql_stmt := 'SELECT COUNT(*)
    FROM   Cm_Coverage cc
    WHERE  cc.sys_update_time IS NULL';

    EXECUTE IMMEDIATE v_sql_stmt INTO v_count;
    
    oasis_health_check_main.verify_count(v_level, v_sub_system, v_category, 
                        v_data_code, v_test_criteria_0, v_count, v_desc, 'rows', v_sql_stmt, v_run_code);
  END CM_029;

  PROCEDURE CM_030 IS
  BEGIN
    v_proc_name := 'CM_030';
    v_run_code := v_proc_name;
    v_desc := v_obj_name||'.'||v_proc_name||' - CM Risk records where sys update time is null';
    v_level := 'WARNING';
    pl('Checking for ' || v_desc || ' : ' || v_level);

    v_sql_stmt := 'SELECT COUNT(*)
    FROM   Cm_Risk cc
    WHERE  cc.sys_update_time IS NULL';

    EXECUTE IMMEDIATE v_sql_stmt INTO v_count;
    
    oasis_health_check_main.verify_count(v_level, v_sub_system, v_category, 
                        v_data_code, v_test_criteria_0, v_count, v_desc, 'rows', v_sql_stmt, v_run_code);
  END CM_030;

  PROCEDURE CM_031 IS
  BEGIN
    v_proc_name := 'CM_031';
    v_run_code := v_proc_name;
    v_desc := v_obj_name||'.'||v_proc_name||' - CM Policy records where sys update time is null';
    v_level := 'WARNING';
    pl('Checking for ' || v_desc || ' : ' || v_level);

    v_sql_stmt := 'SELECT COUNT(*)
    FROM   Cm_Policy cc
    WHERE  cc.sys_update_time IS NULL';

    EXECUTE IMMEDIATE v_sql_stmt INTO v_count;
    
    oasis_health_check_main.verify_count(v_level, v_sub_system, v_category, 
                        v_data_code, v_test_criteria_0, v_count, v_desc, 'rows', v_sql_stmt, v_run_code);
  END CM_031;

  PROCEDURE CM_032 IS
  BEGIN
    v_proc_name := 'CM_032';
    v_run_code := v_proc_name;
    v_desc := v_obj_name||'.'||v_proc_name||' - CM Coverage records where eff from date is null';
    v_level := 'WARNING';
    pl('Checking for ' || v_desc || ' : ' || v_level);

    v_sql_stmt := 'SELECT COUNT(*)
    FROM   Cm_Coverage cc
    WHERE  cc.effective_from_date IS NULL';

    EXECUTE IMMEDIATE v_sql_stmt INTO v_count;
    
    oasis_health_check_main.verify_count(v_level, v_sub_system, v_category, 
                        v_data_code, v_test_criteria_0, v_count, v_desc, 'rows', v_sql_stmt, v_run_code);
  END CM_032;

  PROCEDURE CM_033 IS
  BEGIN
    v_proc_name := 'CM_033';
    v_run_code := v_proc_name;
    v_desc := v_obj_name||'.'||v_proc_name||' - CM Risk records where eff from date is null';
    v_level := 'WARNING';
    pl('Checking for ' || v_desc || ' : ' || v_level);

    v_sql_stmt := 'SELECT COUNT(*)
    FROM   Cm_Risk cc
    WHERE  cc.effective_from_date IS NULL';

    EXECUTE IMMEDIATE v_sql_stmt INTO v_count;
    
    oasis_health_check_main.verify_count(v_level, v_sub_system, v_category, 
                        v_data_code, v_test_criteria_0, v_count, v_desc, 'rows', v_sql_stmt, v_run_code);
  END CM_033;

  PROCEDURE CM_034 IS
  BEGIN
    v_proc_name := 'CM_034';
    v_run_code := v_proc_name;
    v_desc := v_obj_name||'.'||v_proc_name||' - CM Policy records where eff from date is null';
    v_level := 'WARNING';
    pl('Checking for ' || v_desc || ' : ' || v_level);

    v_sql_stmt := 'SELECT COUNT(*)
    FROM   Cm_Policy cc
    WHERE  cc.policy_start_date IS NULL';

    EXECUTE IMMEDIATE v_sql_stmt INTO v_count;
    
    oasis_health_check_main.verify_count(v_level, v_sub_system, v_category, 
                        v_data_code, v_test_criteria_0, v_count, v_desc, 'rows', v_sql_stmt, v_run_code);
  END CM_034;

  PROCEDURE CM_035 IS
  BEGIN
    v_proc_name := 'CM_035';
    v_run_code := v_proc_name;
    v_desc := v_obj_name||'.'||v_proc_name||' - CM Trans History records where sys create time is null';
    v_level := 'WARNING';
    pl('Checking for ' || v_desc || ' : ' || v_level);

    v_sql_stmt := 'SELECT COUNT(*)
    FROM   Cm_Trans_Status_History ctsh
    WHERE  ctsh.sys_create_time IS NULL';

    EXECUTE IMMEDIATE v_sql_stmt INTO v_count;
    
    oasis_health_check_main.verify_count(v_level, v_sub_system, v_category, 
                        v_data_code, v_test_criteria_0, v_count, v_desc, 'rows', v_sql_stmt, v_run_code);
  END CM_035;

  PROCEDURE CM_036 IS
  BEGIN
    v_proc_name := 'CM_036';
    v_run_code := v_proc_name;
    v_desc := v_obj_name||'.'||v_proc_name||' - CM Trans records whose trans date is less than claim report date';
    v_level := 'WARNING';
    pl('Checking for ' || v_desc || ' : ' || v_level);

    v_sql_stmt := 'SELECT COUNT(*)
    FROM   claim c,
           cm_transaction ct
    WHERE  c.claim_pk = ct.source_record_fk
    AND    ct.trans_date < c.report_date';

    EXECUTE IMMEDIATE v_sql_stmt INTO v_count;
    
    oasis_health_check_main.verify_count(v_level, v_sub_system, v_category, 
                        v_data_code, v_test_criteria_0, v_count, v_desc, 'rows', v_sql_stmt, v_run_code);
  END CM_036;

  PROCEDURE CM_037 IS
  BEGIN
    v_proc_name := 'CM_037';
    v_run_code := v_proc_name;
    v_desc := v_obj_name||'.'||v_proc_name||' - Wacky claim final disposition date';
    v_level := 'WARNING';
    pl('Checking for ' || v_desc || ' : ' || v_level);

    v_sql_stmt := 'SELECT count(*)
    FROM   claim c
    WHERE  c.final_disposition_date > SYSDATE';

    EXECUTE IMMEDIATE v_sql_stmt INTO v_count;
    
    oasis_health_check_main.verify_count(v_level, v_sub_system, v_category, 
                        v_data_code, v_test_criteria_0, v_count, v_desc, 'rows', v_sql_stmt, v_run_code);
  END CM_037;

  PROCEDURE CM_038 IS
  BEGIN
    v_proc_name := 'CM_038';
    v_run_code := v_proc_name;
    v_desc := v_obj_name||'.'||v_proc_name||' - Wacky claim type start date';
    v_level := 'WARNING';
    pl('Checking for ' || v_desc || ' : ' || v_level);

    v_sql_stmt := 'SELECT count(*)
    FROM   claim_type_history cth
    WHERE  cth.type_start_date < to_date(''1/1/1950'',''mm/dd/yyyy'')
    OR     cth.type_start_date > SYSDATE';

    EXECUTE IMMEDIATE v_sql_stmt INTO v_count;
    
    oasis_health_check_main.verify_count(v_level, v_sub_system, v_category, 
                        v_data_code, v_test_criteria_0, v_count, v_desc, 'rows', v_sql_stmt, v_run_code);
  END CM_038;

  PROCEDURE CM_039 IS
  BEGIN
    v_proc_name := 'CM_039';
    v_run_code := v_proc_name;
    v_desc := v_obj_name||'.'||v_proc_name||' - Wacky claim status start date';
    v_level := 'WARNING';
    pl('Checking for ' || v_desc || ' : ' || v_level);

    v_sql_stmt := 'SELECT count(*)
    FROM   claim_status_history csh
    WHERE  csh.status_start_date < to_date(''1/1/1950'',''mm/dd/yyyy'')
    OR     csh.status_start_date > SYSDATE';

    EXECUTE IMMEDIATE v_sql_stmt INTO v_count;
    
    oasis_health_check_main.verify_count(v_level, v_sub_system, v_category, 
                        v_data_code, v_test_criteria_0, v_count, v_desc, 'rows', v_sql_stmt, v_run_code);
  END CM_039;

  PROCEDURE CM_040 IS
  BEGIN
    v_proc_name := 'CM_040';
    v_run_code := v_proc_name;
    v_desc := v_obj_name||'.'||v_proc_name||' - Wacky cm_policy start date';
    v_level := 'WARNING';
    pl('Checking for ' || v_desc || ' : ' || v_level);

    v_sql_stmt := 'SELECT count(*)
    FROM   cm_policy p
    WHERE  p.policy_start_date < to_date(''1/1/1950'',''mm/dd/yyyy'')
    OR     p.policy_start_date > SYSDATE';

    EXECUTE IMMEDIATE v_sql_stmt INTO v_count;
    
    oasis_health_check_main.verify_count(v_level, v_sub_system, v_category, 
                        v_data_code, v_test_criteria_0, v_count, v_desc, 'rows', v_sql_stmt, v_run_code);
  END CM_040;

  PROCEDURE CM_041 IS
  BEGIN
    v_proc_name := 'CM_041';
    v_run_code := v_proc_name;
    v_desc := v_obj_name||'.'||v_proc_name||' - Claims that status start date is greater than end date';
    v_level := 'WARNING';
    pl('Checking for ' || v_desc || ' : ' || v_level);

    v_sql_stmt := 'SELECT COUNT(1)
    FROM   claim_status_history csh
    WHERE  trunc(csh.status_start_date) > trunc(csh.status_end_date)';

    EXECUTE IMMEDIATE v_sql_stmt INTO v_count;
    
    oasis_health_check_main.verify_count(v_level, v_sub_system, v_category, 
                        v_data_code, v_test_criteria_0, v_count, v_desc, 'rows', v_sql_stmt, v_run_code);
  END CM_041;

  PROCEDURE CM_042 IS
  BEGIN
    v_proc_name := 'CM_042';
    v_run_code := v_proc_name;
    v_desc := v_obj_name||'.'||v_proc_name||' - Claims that type start date is greater than end date';
    v_level := 'WARNING';
    pl('Checking for ' || v_desc || ' : ' || v_level);

    v_sql_stmt := 'SELECT COUNT(1)
    FROM   claim_type_history csh
    WHERE  trunc(csh.type_start_date) > trunc(csh.type_end_date)';

    EXECUTE IMMEDIATE v_sql_stmt INTO v_count;
    
    oasis_health_check_main.verify_count(v_level, v_sub_system, v_category, 
                        v_data_code, v_test_criteria_0, v_count, v_desc, 'rows', v_sql_stmt, v_run_code);
  END CM_042;

  PROCEDURE CM_043 IS
  BEGIN
    v_proc_name := 'CM_043';
    v_run_code := v_proc_name;
    v_desc := v_obj_name||'.'||v_proc_name||' - Claims that has trans acct date less than policy acct date';
    v_level := 'WARNING';
    pl('Checking for ' || v_desc || ' : ' || v_level);

    v_sql_stmt := 'SELECT COUNT(1)
    FROM   claim c,
           coverage_insured_xref cix,
           entity_role er,
           claim_insured ci,
           policy_term_history pth
    WHERE  c.claim_pk = er.source_record_fk
    AND    er.entity_role_pk = ci.entity_role_fk
    AND    cix.claim_insured_fk = ci.claim_insured_pk
    AND    cix.policy_term_fk = pth.policy_term_history_pk
    AND    EXISTS 
           (SELECT 1
            FROM   cm_transaction ct
            WHERE  ct.source_record_fk = c.claim_pk
            AND    ct.accounting_date < pth.accounting_from_date)
    ORDER  BY 1';

    EXECUTE IMMEDIATE v_sql_stmt INTO v_count;
    
    oasis_health_check_main.verify_count(v_level, v_sub_system, v_category, 
                        v_data_code, v_test_criteria_0, v_count, v_desc, 'rows', v_sql_stmt, v_run_code);
  END CM_043;

  PROCEDURE CM_044 IS
  BEGIN
    v_proc_name := 'CM_044';
    v_run_code := v_proc_name;
    v_desc := v_obj_name||'.'||v_proc_name||' - Trans that status start date is greater than status end date';
    v_level := 'WARNING';
    pl('Checking for ' || v_desc || ' : ' || v_level);

    v_sql_stmt := 'SELECT COUNT(1)
    FROM   cm_trans_status_history ctsh
    WHERE  trunc(ctsh.status_start_date) > trunc(ctsh.status_end_date)';

    EXECUTE IMMEDIATE v_sql_stmt INTO v_count;
    
    oasis_health_check_main.verify_count(v_level, v_sub_system, v_category, 
                        v_data_code, v_test_criteria_0, v_count, v_desc, 'rows', v_sql_stmt, v_run_code);
  END CM_044;

  PROCEDURE CM_045 IS
  BEGIN
    v_proc_name := 'CM_045';
    v_run_code := v_proc_name;
    v_desc := v_obj_name||'.'||v_proc_name||' - Mini policies that have overlap terms';
    v_level := 'WARNING';
    pl('Checking for ' || v_desc || ' : ' || v_level);

    v_sql_stmt := 'SELECT count(1)
    FROM CM_POLICY CP1, CM_POLICY CP2
    WHERE  CP1.POLICY_NO = CP2.POLICY_NO
       AND CP1.CM_POLICY_PK <> CP2.CM_POLICY_PK
       AND CP1.POLICY_START_DATE > CP2.POLICY_START_DATE
       AND CP1.POLICY_START_DATE < CP2.POLICY_END_DATE
       AND EXISTS
           (SELECT 1 
            FROM   coverage_insured_xref cix
            WHERE  cix.policy_fk = cp1.cm_policy_pk)
       AND EXISTS
           (SELECT 1 
            FROM   coverage_insured_xref cix
            WHERE  cix.policy_fk = cp2.cm_policy_pk)';

    EXECUTE IMMEDIATE v_sql_stmt INTO v_count;
    
    oasis_health_check_main.verify_count(v_level, v_sub_system, v_category, 
                        v_data_code, v_test_criteria_0, v_count, v_desc, 'rows', v_sql_stmt, v_run_code);
  END CM_045;

  PROCEDURE CM_046 IS
  BEGIN
    v_proc_name := 'CM_046';
    v_run_code := v_proc_name;
    v_desc := v_obj_name||'.'||v_proc_name||' - Trans that transaction accounting date is null';
    v_level := 'WARNING';
    pl('Checking for ' || v_desc || ' : ' || v_level);

    v_sql_stmt := 'SELECT COUNT(1)
    FROM   cm_transaction ct
    WHERE  ct.accounting_date is null';

    EXECUTE IMMEDIATE v_sql_stmt INTO v_count;
    
    oasis_health_check_main.verify_count(v_level, v_sub_system, v_category, 
                        v_data_code, v_test_criteria_0, v_count, v_desc, 'rows', v_sql_stmt, v_run_code);
  END CM_046;

  PROCEDURE CM_047 IS
  BEGIN
    v_proc_name := 'CM_047';
    v_run_code := v_proc_name;
    v_desc := v_obj_name||'.'||v_proc_name||' - CIX records that do not have correspond records in CCX';
    v_level := 'WARNING';
    pl('Checking for ' || v_desc || ' : ' || v_level);

    v_sql_stmt := 'SELECT COUNT(1) 
    FROM   coverage_insured_xref cix
    WHERE  NOT EXISTS 
           (SELECT 1 
            FROM   claimant_coverage_xref ccx
            WHERE  ccx.coverage_insured_xref_fk = cix.coverage_insured_xref_pk)';

    EXECUTE IMMEDIATE v_sql_stmt INTO v_count;
    
    oasis_health_check_main.verify_count(v_level, v_sub_system, v_category, 
                        v_data_code, v_test_criteria_0, v_count, v_desc, 'rows', v_sql_stmt, v_run_code);
  END CM_047;

  PROCEDURE CM_048 IS
  BEGIN
    v_proc_name := 'CM_048';
    v_run_code := v_proc_name;
    v_desc := v_obj_name||'.'||v_proc_name||' - CM Trans Detail records where sys update time is null';
    v_level := 'WARNING';
    pl('Checking for ' || v_desc || ' : ' || v_level);

    v_sql_stmt := 'SELECT COUNT(1)
    FROM   cm_transaction_detail d
    WHERE  d.sys_update_time IS NULL';

    EXECUTE IMMEDIATE v_sql_stmt INTO v_count;
    
    oasis_health_check_main.verify_count(v_level, v_sub_system, v_category, 
                        v_data_code, v_test_criteria_0, v_count, v_desc, 'rows', v_sql_stmt, v_run_code);
  END CM_048;

  PROCEDURE CM_049 IS
  BEGIN
    v_proc_name := 'CM_049';
    v_run_code := v_proc_name;
    v_desc := v_obj_name||'.'||v_proc_name||' - CM Trans Detail records where trans type code is null';
    v_level := 'WARNING';
    pl('Checking for ' || v_desc || ' : ' || v_level);

    v_sql_stmt := 'SELECT COUNT(1)
    FROM   cm_transaction_detail d
    WHERE  d.cm_transaction_type_code IS NULL';

    EXECUTE IMMEDIATE v_sql_stmt INTO v_count;
    
    oasis_health_check_main.verify_count(v_level, v_sub_system, v_category, 
                        v_data_code, v_test_criteria_0, v_count, v_desc, 'rows', v_sql_stmt, v_run_code);
  END CM_049;

  PROCEDURE CM_050 IS
  BEGIN
    v_proc_name := 'CM_050';
    v_run_code := v_proc_name;
    v_desc := v_obj_name||'.'||v_proc_name||' - CM Trans Detail records where trans status code is null';
    v_level := 'WARNING';
    pl('Checking for ' || v_desc || ' : ' || v_level);

    v_sql_stmt := 'SELECT COUNT(1)
    FROM   cm_transaction_detail d
    WHERE  d.trans_status_code IS NULL';

    EXECUTE IMMEDIATE v_sql_stmt INTO v_count;
    
    oasis_health_check_main.verify_count(v_level, v_sub_system, v_category, 
                        v_data_code, v_test_criteria_0, v_count, v_desc, 'rows', v_sql_stmt, v_run_code);
  END CM_050;

  PROCEDURE CM_051 IS
  BEGIN
    v_proc_name := 'CM_051';
    v_run_code := v_proc_name;
    v_desc := v_obj_name||'.'||v_proc_name||' - CM Trans Detail records where trans source fk is null';
    v_level := 'WARNING';
    pl('Checking for ' || v_desc || ' : ' || v_level);

    v_sql_stmt := 'SELECT COUNT(1)
    FROM   cm_transaction_detail d
    WHERE  d.trans_source_record_fk IS NULL';

    EXECUTE IMMEDIATE v_sql_stmt INTO v_count;
    
    oasis_health_check_main.verify_count(v_level, v_sub_system, v_category, 
                        v_data_code, v_test_criteria_0, v_count, v_desc, 'rows', v_sql_stmt, v_run_code);
  END CM_051;

  PROCEDURE CM_052 IS
  BEGIN
    v_proc_name := 'CM_052';
    v_run_code := v_proc_name;
    v_desc := v_obj_name||'.'||v_proc_name||' - Claim records that CLAIMANT_COVERAGE_XREF link to different claim';
    v_level := 'WARNING';
    pl('Checking for ' || v_desc || ' : ' || v_level);

    v_sql_stmt := 'SELECT COUNT(1)
    FROM   claim c, 
           claimant cla, 
           entity_role   er,
           claimant_coverage_xref ccx,
           coverage_insured_xref  cix, 
           claim_insured          ci,
           entity_role            er1
    WHERE  c.claim_pk = er.source_record_fk
    AND    er.entity_role_pk = cla.entity_role_fk
    AND    ccx.claimant_fk = cla.claimant_pk
    AND    ccx.coverage_insured_xref_fk = cix.coverage_insured_xref_pk
    AND    cix.claim_insured_fk = ci.claim_insured_pk
    AND    ci.entity_role_fk = er1.entity_role_pk
    AND    er1.source_record_fk <> er.source_record_fk';

    EXECUTE IMMEDIATE v_sql_stmt INTO v_count;
    
    oasis_health_check_main.verify_count(v_level, v_sub_system, v_category, 
                        v_data_code, v_test_criteria_0, v_count, v_desc, 'rows', v_sql_stmt, v_run_code);
  END CM_052;

  PROCEDURE CM_053 IS
  BEGIN
    v_proc_name := 'CM_053';
    v_run_code := v_proc_name;
    v_desc := v_obj_name||'.'||v_proc_name||' - ENTITY records that CLIENT_ID is null';
    v_level := 'WARNING';
    pl('Checking for ' || v_desc || ' : ' || v_level);

    v_sql_stmt := 'SELECT COUNT(1)
    FROM   entity 
    where  client_id is null';

    EXECUTE IMMEDIATE v_sql_stmt INTO v_count;
    
    oasis_health_check_main.verify_count(v_level, v_sub_system, v_category, 
                        v_data_code, v_test_criteria_0, v_count, v_desc, 'rows', v_sql_stmt, v_run_code);
  END CM_053;

  /**************************************************************************
  * Main
  ***************************************************************************/
  PROCEDURE main IS
  BEGIN
    BEGIN
      --claims system parameters
      oasis_health_check_main.check_parms('INFO', v_sub_system, 
                                          'CLAIMS_SYS_PARM', claims_sys_parms);
      --Claims data checks
      CM_001();
      CM_002();
      CM_003();
      CM_004();
      CM_005();
      CM_006();
      CM_007();
      CM_008();
      CM_009();
      CM_010();
      CM_011();
      CM_012();
      CM_013();
      CM_014();
      CM_015();
      CM_016();
      CM_017();
      CM_018();
      CM_019();
      CM_020();
      CM_021();
      CM_022();
      CM_023();
      CM_024();
      CM_025();
      CM_026();
      CM_027();
      CM_028();
      CM_029();
      CM_030();
      CM_031();
      CM_032();
      CM_033();
      CM_034();
      CM_035();
      CM_036();
      CM_037();
      CM_038();
      CM_039();
      CM_040();
      CM_041();
      CM_042();
      CM_043();
      CM_044();
      CM_045();
      CM_046();
      CM_047();
      CM_048();
      CM_049();
      CM_050();
      CM_051();
      CM_052();
      CM_053();
    END;
  END main;

  BEGIN
    g_trace := FALSE;

  EXCEPTION
    WHEN OTHERS THEN
      g_date_format := 'YYYY-MM-DD';
END oasis_health_check_claims;
/
