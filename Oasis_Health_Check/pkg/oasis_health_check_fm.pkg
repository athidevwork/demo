CREATE OR REPLACE PACKAGE oasis_health_check_fm
  AUTHID CURRENT_USER -- [ DO NOT EDIT! Invoker Rights Clause ]
  IS
 /****************************************************************************
  *
  * ---------------------------------------------------------------------------
  * $Revision 1.0  03/20/2018   $$Author Athi $
  *****************************************************************************
  *  Copyright(C) 2018 - Delphi Technology Inc.
  *
  *   File Name : oasis_health_check_output.pkg
  * Object Name : oasis_health_check_output
  * Description : health check and validation for output sub system
  *----------------------------------------------------------------------------
  * Revisions:
  *   Date    By     Purpose
  * -------- ------- ----------------------------------------------------------
  *
  *****************************************************************************/
  -- ========================================================================
  -- ===== PACKAGE LEVEL PUBLIC DECLARATIONS ================================
  -- ========================================================================
  -- === Template variables and constants.
  g_trace   BOOLEAN := FALSE; -- To turn output on/off for debug purposes.
  g_updated BOOLEAN := FALSE; -- To turn output on/off for heatlh check table being altered.

  PROCEDURE main;

END oasis_health_check_fm;
/
CREATE OR REPLACE PACKAGE BODY oasis_health_check_fm IS
  -- ========================================================================
  -- ===== PACKAGE LEVEL PRIVATE DECLARATIONS ===============================
  -- ========================================================================
  -- === Template variables and constants.
  g_error       EXCEPTION;
  g_time_format VARCHAR2(12);
  g_date_format VARCHAR2(12);

  v_obj_name    CONSTANT VARCHAR2(30) := 'oasis_health_check_fm'; -- Oracle object name
  v_msg_pref    CONSTANT VARCHAR2(20) := 'Error ';
  v_msg VARCHAR2(4000); -- error/info message
  v_line VARCHAR2 (255);
  v_run_date DATE  := SYSDATE;
  v_sub_system VARCHAR2(25) := 'FM';
  v_category VARCHAR(25) := 'FM_CFG';
  v_data_code VARCHAR2(25) := 'FM_CFG_DATA';
  v_sql_stmt   VARCHAR2(3000) := '';
  v_ok VARCHAR2(2) := 'OK';
  v_review VARCHAR2(7) := 'REVIEW';
  v_desc VARCHAR2(255) := '';
  v_level VARCHAR2(25);
  v_count NUMBER(15);

  -- === Constants: <ConstantName> CONSTANT <DataType> := <Value>;
  -- === Types.
  -- === Variables of user-defined Types.
  -- === Cursors.
    --cis_sys_parms VARCHAR2(200) := 'PM_CHECK_NOTICE^ERROR';
  /**************************************************************************
  * pl
  *--------------------------------------------------------------------------
  * Short form for put_line. Output is controlled by the g_trace variable.
  ***************************************************************************/
  PROCEDURE pl(s IN VARCHAR2) IS
  BEGIN
    IF g_trace=TRUE THEN
      dbms_output.enable(1000000);
      --dbms_output.put_line(substr(s, 1, 255));
      dbms_output.put_line(s);
    END IF;
  END pl;

  PROCEDURE finance_data_check_001 IS
  BEGIN
    v_desc := 'finance_data_check_001 - Invoices that exist in FM_BILL but not in FM_BILL_ACCOUNT table';
    v_level := 'WARNING';
    pl('Checking for ' || v_desc || ' : ' || v_level);

    v_sql_stmt := 'SELECT COUNT(1)
    FROM FM_BILL b
    WHERE NOT EXISTS (SELECT * FROM fm_bill_account ba 
                      WHERE ba.fm_bill_fk = b.fm_bill_pk)';

    EXECUTE IMMEDIATE v_sql_stmt INTO v_count;

    oasis_health_check_main.verify_count(v_level, v_sub_system, v_category, 
                        v_data_code, '>0', v_count, v_desc, 'rows', v_sql_stmt);
  END finance_data_check_001;

  PROCEDURE finance_data_check_002 IS
  BEGIN
    v_desc := 'finance_data_check_002 - Identify FM_Master records that transaction accounting date is less than minimum'||
              'accounting date of RISK table';
    v_level := 'WARNING';
    pl('Checking for ' || v_desc || ' : ' || v_level);

    v_sql_stmt := 'WITH r AS (
              SELECT r1.risk_base_record_fk, MIN(r1.accounting_from_date) min_acct_from_date
              FROM   Risk r1
              GROUP  BY r1.risk_base_record_fk) 
    SELECT COUNT(*)
    FROM   fm_master fm,
           r
    WHERE  fm.risk_fk = r.risk_base_record_fk
    AND    fm.accounting_date < r.min_acct_from_date';

    EXECUTE IMMEDIATE v_sql_stmt INTO v_count;

    oasis_health_check_main.verify_count(v_level, v_sub_system, v_category, 
                        v_data_code, '>0', v_count, v_desc, 'rows', v_sql_stmt);
  END finance_data_check_002;

  PROCEDURE finance_data_check_003 IS
  BEGIN
    v_desc := 'finance_data_check_003 - Identify FM_Master records that transaction accounting date is less than minimum'||
              'accounting date of COVERAGE table';
    v_level := 'WARNING';
    pl('Checking for ' || v_desc || ' : ' || v_level);

    v_sql_stmt := 'WITH c AS (
              SELECT c1.coverage_base_record_fk, MIN(c1.accounting_from_date) min_acct_from_date
              FROM   Coverage c1
              GROUP  BY c1.coverage_base_record_fk) 
    SELECT COUNT(*)
    FROM   fm_master fm,
           c
    WHERE  fm.coverage_fk = c.coverage_base_record_fk
    AND    fm.accounting_date < c.min_acct_from_date';

    EXECUTE IMMEDIATE v_sql_stmt INTO v_count;

    oasis_health_check_main.verify_count(v_level, v_sub_system, v_category, 
                        v_data_code, '>0', v_count, v_desc, 'rows', v_sql_stmt);
  END finance_data_check_003;

  PROCEDURE finance_data_check_004 IS
  BEGIN
    v_desc := 'finance_data_check_004 - Transaction amount different between FM_MASTER and FM_OPEN_ITEM_CHANGE';
    v_level := 'WARNING';
    pl('Checking for ' || v_desc || ' : ' || v_level);

    v_sql_stmt := 'SELECT COUNT(1)
    FROM   Fm_Master fm,
           Fm_Open_Item_Change ic
    WHERE  fm.fm_master_pk = ic.source_record_fk
    AND    ic.source_table_name = ''FM_MASTER''
    AND    fm.amount <> (ic.amount + ic.open_balance)';

    EXECUTE IMMEDIATE v_sql_stmt INTO v_count;

    oasis_health_check_main.verify_count(v_level, v_sub_system, v_category, 
                        v_data_code, '>0', v_count, v_desc, 'rows', v_sql_stmt);
  END finance_data_check_004;

  PROCEDURE finance_data_check_005 IS
  BEGIN
    v_desc := 'finance_data_check_005 -Transactions with accounting date is unreasonably high';
    v_level := 'WARNING';
    pl('Checking for ' || v_desc || ' : ' || v_level);

    v_sql_stmt := 'SELECT COUNT(*)
    FROM   fm_master fm
    WHERE  fm.accounting_date > add_months(SYSDATE,24)';

    EXECUTE IMMEDIATE v_sql_stmt INTO v_count;

    oasis_health_check_main.verify_count(v_level, v_sub_system, v_category, 
                        v_data_code, '>0', v_count, v_desc, 'rows', v_sql_stmt);
  END finance_data_check_005;

  PROCEDURE finance_data_check_006 IS
  BEGIN
    v_desc := 'finance_data_check_006 -Transactions with accounting date is unreasonably low';
    v_level := 'WARNING';
    pl('Checking for ' || v_desc || ' : ' || v_level);

    v_sql_stmt := 'SELECT COUNT(*)
    FROM   fm_master fm
    WHERE  fm.accounting_date < to_date(''1/1/1950'',''mm/dd/yyyy'')';

    EXECUTE IMMEDIATE v_sql_stmt INTO v_count;

    oasis_health_check_main.verify_count(v_level, v_sub_system, v_category, 
                        v_data_code, '>0', v_count, v_desc, 'rows', v_sql_stmt);
  END finance_data_check_006;

  PROCEDURE finance_data_check_007 IS
  BEGIN
    v_desc := 'finance_data_check_007 - Transactions with effective from date is unreasonably high';
    v_level := 'WARNING';
    pl('Checking for ' || v_desc || ' : ' || v_level);

    v_sql_stmt := 'SELECT COUNT(*)
    FROM   fm_master fm
    WHERE  fm.effective_from_date > add_months(SYSDATE,24)';

    EXECUTE IMMEDIATE v_sql_stmt INTO v_count;

    oasis_health_check_main.verify_count(v_level, v_sub_system, v_category, 
                        v_data_code, '>0', v_count, v_desc, 'rows', v_sql_stmt);
  END finance_data_check_007;

  PROCEDURE finance_data_check_008 IS
  BEGIN
    v_desc := 'finance_data_check_008 - Transactions with effective from date is unreasonably low';
    v_level := 'WARNING';
    pl('Checking for ' || v_desc || ' : ' || v_level);

    v_sql_stmt := 'SELECT COUNT(*)
    FROM   fm_master fm
    WHERE  fm.effective_from_date < to_date(''1/1/1950'',''mm/dd/yyyy'')';

    EXECUTE IMMEDIATE v_sql_stmt INTO v_count;

    oasis_health_check_main.verify_count(v_level, v_sub_system, v_category, 
                        v_data_code, '>0', v_count, v_desc, 'rows', v_sql_stmt);
  END finance_data_check_008;

  PROCEDURE finance_data_check_009 IS
  BEGIN
    v_desc := 'finance_data_check_009 - Transactions with transaction date is unreasonably high';
    v_level := 'WARNING';
    pl('Checking for ' || v_desc || ' : ' || v_level);

    v_sql_stmt := 'SELECT COUNT(*)
    FROM   fm_master fm
    WHERE  fm.transaction_date > add_months(SYSDATE,24)';

    EXECUTE IMMEDIATE v_sql_stmt INTO v_count;

    oasis_health_check_main.verify_count(v_level, v_sub_system, v_category, 
                        v_data_code, '>0', v_count, v_desc, 'rows', v_sql_stmt);
  END finance_data_check_009;

  PROCEDURE finance_data_check_010 IS
  BEGIN
    v_desc := 'finance_data_check_010 - Transactions with transaction date is unreasonably low';
    v_level := 'WARNING';
    pl('Checking for ' || v_desc || ' : ' || v_level);

    v_sql_stmt := 'SELECT COUNT(*)
    FROM   fm_master fm
    WHERE  fm.transaction_date < to_date(''1/1/1950'',''mm/dd/yyyy'')';

    EXECUTE IMMEDIATE v_sql_stmt INTO v_count;

    oasis_health_check_main.verify_count(v_level, v_sub_system, v_category, 
                        v_data_code, '>0', v_count, v_desc, 'rows', v_sql_stmt);
  END finance_data_check_010;

  PROCEDURE finance_data_check_011 IS
  BEGIN
    v_desc := 'finance_data_check_011 - Accounts that balance do not match between FM_OPEN_ITEM and FM_OPEN_ITEM_CHANGE';
    v_level := 'WARNING';
    pl('Checking for ' || v_desc || ' : ' || v_level);

    v_sql_stmt := 'WITH a AS 
        (SELECT ba.Account_No, 
                SUM(NVL(i.open_balance,0)) i_balance
         FROM   FM_Open_Item    i,
                Billing_Account ba
         WHERE  NVl(ba.Accounting_Mode, ''BAL_FWD'') = ''OPEN_ITEM''
         AND    ba.Billing_Account_Pk              = i.Billing_Account_Fk
         GROUP  BY ba.Account_No), 
         b AS 
        (SELECT ba.Account_No, 
                NVL(SUM((ic.amount + ic.open_balance)),0) ic_balance
         FROM   FM_Open_Item    i,
                Billing_Account ba, 
                Fm_Open_Item_Change ic
         WHERE  NVl(ba.Accounting_Mode, ''BAL_FWD'') = ''OPEN_ITEM''
         AND    ic.fm_open_item_fk = i.fm_open_item_pk
         AND    ba.Billing_Account_Pk              = i.Billing_Account_Fk
         GROUP  BY ba.Account_No)
    SELECT count(1)
    FROM   a, b 
    WHERE  a.account_no = b.account_no
    AND    a.i_balance <> b.ic_balance';

    EXECUTE IMMEDIATE v_sql_stmt INTO v_count;

    oasis_health_check_main.verify_count(v_level, v_sub_system, v_category, 
                        v_data_code, '>0', v_count, v_desc, 'accounts', v_sql_stmt);
  END finance_data_check_011;

  PROCEDURE finance_data_check_012 IS
  BEGIN
    v_desc := 'finance_data_check_012 - Records in FM_OPEN_ITEM table that OPEN_BALANCE is null';
    v_level := 'WARNING';
    pl('Checking for ' || v_desc || ' : ' || v_level);

    v_sql_stmt := 'SELECT COUNT(*)
    FROM   FM_Open_Item i
    WHERE  i.open_balance IS NULL';

    EXECUTE IMMEDIATE v_sql_stmt INTO v_count;

    oasis_health_check_main.verify_count(v_level, v_sub_system, v_category, 
                        v_data_code, '>0', v_count, v_desc, 'rows', v_sql_stmt);
  END finance_data_check_012;

  PROCEDURE finance_data_check_013 IS
  BEGIN
    v_desc := 'finance_data_check_013 - Records in FM_OPEN_ITEM_CHANGE table that OPEN_BALANCE is null';
    v_level := 'WARNING';
    pl('Checking for ' || v_desc || ' : ' || v_level);

    v_sql_stmt := 'SELECT COUNT(*)
    FROM   FM_Open_Item_Change i
    WHERE  i.open_balance IS NULL OR i.amount IS NULL';

    EXECUTE IMMEDIATE v_sql_stmt INTO v_count;

    oasis_health_check_main.verify_count(v_level, v_sub_system, v_category, 
                        v_data_code, '>0', v_count, v_desc, 'rows', v_sql_stmt);
  END finance_data_check_013;

  /**************************************************************************
  * Main
  ***************************************************************************/
  PROCEDURE main IS
  BEGIN
    BEGIN
      finance_data_check_001();
      finance_data_check_002();
      finance_data_check_003();
      finance_data_check_004();
      finance_data_check_005();
      finance_data_check_006();
      finance_data_check_007();
      finance_data_check_008();
      finance_data_check_009();
      finance_data_check_010();
      finance_data_check_011();
      finance_data_check_012();
      finance_data_check_013();
    END;
  END main;

  BEGIN
    g_trace := FALSE;

  EXCEPTION
    WHEN OTHERS THEN
      g_date_format := 'YYYY-MM-DD';
END oasis_health_check_fm;
/
